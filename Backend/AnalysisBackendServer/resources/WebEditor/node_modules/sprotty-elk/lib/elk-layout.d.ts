/********************************************************************************
 * Copyright (c) 2018-2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { ELK, ElkNode, ElkLabel, ElkPort, ElkShape, ElkExtendedEdge, LayoutOptions } from 'elkjs/lib/elk-api';
import { IModelLayoutEngine } from 'sprotty-protocol/lib/diagram-services';
import { SCompartment, SEdge, SGraph, SLabel, SModelElement, SNode, SPort, SShapeElement } from 'sprotty-protocol/lib/model';
import { SModelIndex } from 'sprotty-protocol/lib/utils/model-utils';
/**
 * Layout engine that delegates to ELK by transforming the Sprotty graph into an ELK graph.
 *
 * This layout engine requires that the _basic type_ of every model element conforms to the
 * convention: `graph` for the top-level element, `node` for nodes, `edge` for edges, `label`
 * for labels, and `port` for ports. The basic type is either the value of the `type` property
 * or the substring preceding the separator `:` if present. Example: `'node:state'` is
 * interpreted as a node, while `'edge:transition'` is interpreted as an edge.
 */
export declare class ElkLayoutEngine implements IModelLayoutEngine {
    protected readonly filter: IElementFilter;
    protected readonly configurator: ILayoutConfigurator;
    protected readonly preprocessor?: ILayoutPreprocessor | undefined;
    protected readonly postprocessor?: ILayoutPostprocessor | undefined;
    protected readonly elk: ELK;
    constructor(elkFactory: ElkFactory, filter?: IElementFilter, configurator?: ILayoutConfigurator, preprocessor?: ILayoutPreprocessor | undefined, postprocessor?: ILayoutPostprocessor | undefined);
    /**
     * Transform the Sprotty graph into an ELK graph, invoke the ELK layout engine,
     * apply the results to the original graph, and return it.
     *
     * _Note:_ The basic type of the root element must be `graph`.
     */
    layout(sgraph: SGraph, index?: SModelIndex): SGraph | Promise<SGraph>;
    /**
     * Determine the _basic type_ of the given model element. The layout engine supports
     * the following values: `graph`, `node`, `edge`, `label`, `port` and `compartment`
     */
    protected getBasicType(smodel: SModelElement): string;
    /**
     * Transform a Sprotty graph element to an ELK graph element.
     */
    protected transformGraph(sgraph: SGraph, index: SModelIndex): ElkNode;
    /**
     * Transform a Sprotty node element to an ELK node element.
     */
    protected transformNode(snode: SNode, index: SModelIndex): ElkNode;
    protected transformCompartment(scomp: SNode | SCompartment, index: SModelIndex, padding: LayoutPadding): ElkNode[] | undefined;
    /**
     * Transform a Sprotty edge element to an ELK edge element.
     */
    protected transformEdge(sedge: SEdge, index: SModelIndex): ElkExtendedEdge;
    /**
     * Transform a Sprotty label element to an ELK label element.
     */
    protected transformLabel(slabel: SLabel, index: SModelIndex): ElkLabel;
    /**
     * Transform a Sprotty port element to an ELK port element.
     */
    protected transformPort(sport: SPort, index: SModelIndex): ElkPort;
    /**
     * Copy the position and size of a Sprotty shape to an ELK shape.
     */
    protected transformShape(elkShape: ElkShape, sshape: SShapeElement): void;
    /**
     * Apply the results of the ELK layout engine to the original Sprotty model.
     */
    protected applyLayout(elkNode: ElkNode, index: SModelIndex): void;
    /**
     * Apply shape layout results, i.e. position and size.
     */
    protected applyShape(sshape: SShapeElement, elkShape: ElkShape, index: SModelIndex): void;
    /**
     * Apply edge layout results, i.e. start point, end point and bend points.
     */
    protected applyEdge(sedge: SEdge, elkEdge: ElkExtendedEdge, index: SModelIndex): void;
}
/**
 * Factory for ELK instances. Follow the elkjs package documentation on how to configure ELK
 * instances. For example, the bundled version can be used by importing the ELK constructor
 * from `"elkjs/lib/elk.bundled"`. For the webworker version, import the constructor from
 * `"elkjs/lib/elk-api"` and add the option `workerUrl: "elk/elk-worker.min.js"`.
 */
export type ElkFactory = () => ELK;
/**
 * Filter used to determine which model elements should be included in the automatic layout.
 */
export interface IElementFilter {
    apply(element: SModelElement, index: SModelIndex): boolean;
}
export declare class DefaultElementFilter implements IElementFilter {
    apply(element: SModelElement, index: SModelIndex): boolean;
    protected getBasicType(smodel: SModelElement): string;
    protected filterNode(node: SNode, index: SModelIndex): boolean;
    protected filterEdge(edge: SEdge, index: SModelIndex): boolean;
    protected filterLabel(label: SLabel, index: SModelIndex): boolean;
    protected filterPort(port: SPort, index: SModelIndex): boolean;
    protected filterCompartment(compartment: SCompartment, index: SModelIndex): boolean;
}
/**
 * Configurator of layout algorithms; provides mappings of layout options for each model element.
 */
export interface ILayoutConfigurator {
    apply(element: SModelElement, index: SModelIndex): LayoutOptions | undefined;
}
export declare class DefaultLayoutConfigurator implements ILayoutConfigurator {
    apply(element: SModelElement, index: SModelIndex): LayoutOptions | undefined;
    protected getBasicType(smodel: SModelElement): string;
    protected graphOptions(sgraph: SGraph, index: SModelIndex): LayoutOptions | undefined;
    protected nodeOptions(snode: SNode, index: SModelIndex): LayoutOptions | undefined;
    protected edgeOptions(sedge: SEdge, index: SModelIndex): LayoutOptions | undefined;
    protected labelOptions(slabel: SLabel, index: SModelIndex): LayoutOptions | undefined;
    protected portOptions(sport: SPort, index: SModelIndex): LayoutOptions | undefined;
}
export interface ILayoutPreprocessor {
    preprocess(elkGraph: ElkNode, sgraph: SGraph, index: SModelIndex): void;
}
export interface ILayoutPostprocessor {
    postprocess(elkGraph: ElkNode, sgraph: SGraph, index: SModelIndex): void;
}
export type LayoutPadding = {
    top: number;
    right: number;
    bottom: number;
    left: number;
};
//# sourceMappingURL=elk-layout.d.ts.map