"use strict";
/********************************************************************************
 * Copyright (c) 2018-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.elkLayoutModule = exports.ILayoutPostprocessor = exports.ILayoutPreprocessor = exports.DefaultLayoutConfigurator = exports.ILayoutConfigurator = exports.DefaultElementFilter = exports.IElementFilter = exports.ElkFactory = exports.ElkLayoutEngine = void 0;
const inversify_1 = require("inversify");
const elk_layout_1 = require("./elk-layout");
exports.ElkLayoutEngine = (0, inversify_1.injectable)()(elk_layout_1.ElkLayoutEngine);
exports.ElkFactory = Symbol('ElkFactory');
exports.IElementFilter = Symbol('IElementFilter');
exports.DefaultElementFilter = (0, inversify_1.injectable)()(elk_layout_1.DefaultElementFilter);
exports.ILayoutConfigurator = Symbol('ILayoutConfigurator');
exports.DefaultLayoutConfigurator = (0, inversify_1.injectable)()(elk_layout_1.DefaultLayoutConfigurator);
exports.ILayoutPreprocessor = Symbol('ILayoutPreprocessor');
exports.ILayoutPostprocessor = Symbol('ILayoutPostprocessor');
/**
 * This dependency injection module adds the default bindings for the frontend integration of ELK.
 * **Note:** Since this package has no direct dependency to the `sprotty` frontend package,
 * this module does not include a binding for `TYPES.IModelLayoutEngine`. Add it like this:
 * ```
 * bind(TYPES.IModelLayoutEngine).toService(ElkLayoutEngine);
 * ```
 * Furthermore, you need to add a binding for `ElkFactory` and choose between the bundled or the
 * webworker variant of `elkjs`:
 * ```
 * const elkFactory: ElkFactory = () => new ElkConstructor({ ... }); // See elkjs documentation
 * bind(ElkFactory).toConstantValue(elkFactory);
 * ```
 * You can import `ElkConstructor` from `'elkjs/lib/elk.bundled'` for the bundled variant or
 * `'elkjs/lib/elk-api'` for the webworker variant.
 */
exports.elkLayoutModule = new inversify_1.ContainerModule(bind => {
    bind(exports.ElkLayoutEngine).toDynamicValue(context => {
        const elkFactory = context.container.get(exports.ElkFactory);
        const elementFilter = context.container.get(exports.IElementFilter);
        const layoutConfigurator = context.container.get(exports.ILayoutConfigurator);
        const layoutPreprocessor = context.container.isBound(exports.ILayoutPreprocessor)
            ? context.container.get(exports.ILayoutPreprocessor) : undefined;
        const layoutPostprocessor = context.container.isBound(exports.ILayoutPostprocessor)
            ? context.container.get(exports.ILayoutPostprocessor) : undefined;
        return new exports.ElkLayoutEngine(elkFactory, elementFilter, layoutConfigurator, layoutPreprocessor, layoutPostprocessor);
    }).inSingletonScope();
    bind(exports.IElementFilter).to(exports.DefaultElementFilter);
    bind(exports.ILayoutConfigurator).to(exports.DefaultLayoutConfigurator);
});
//# sourceMappingURL=inversify.js.map