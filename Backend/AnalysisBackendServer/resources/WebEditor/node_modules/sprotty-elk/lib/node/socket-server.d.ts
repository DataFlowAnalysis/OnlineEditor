/********************************************************************************
 * Copyright (c) 2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/// <reference types="node" />
import { Socket } from 'net';
import { ELK, ElkLayoutAlgorithmDescription, ElkLayoutCategoryDescription, ElkLayoutOptionDescription, ElkNode } from 'elkjs/lib/elk-api';
/**
 * Use this together with the `ElkLayoutEngine` to connect to a Java process via socket:
 * ```
 * const elkFactory: ElkFactory = () => new SocketElkServer();
 * ```
 * The `elk-server` application can be obtained here:
 * https://github.com/TypeFox/elk-server
 */
export declare class SocketElkServer implements ELK {
    protected socket?: Socket;
    protected readonly port: number;
    protected readonly timeoutDelay: number;
    constructor(options?: {
        port?: number;
        timeoutDelay?: number;
    });
    layout(graph: ElkNode): Promise<ElkNode>;
    protected createSocket(): Promise<Socket>;
    knownLayoutAlgorithms(): Promise<ElkLayoutAlgorithmDescription[]>;
    knownLayoutOptions(): Promise<ElkLayoutOptionDescription[]>;
    knownLayoutCategories(): Promise<ElkLayoutCategoryDescription[]>;
}
//# sourceMappingURL=socket-server.d.ts.map