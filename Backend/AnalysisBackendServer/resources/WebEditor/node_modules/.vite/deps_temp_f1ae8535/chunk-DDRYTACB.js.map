{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/editor/contrib/editorState/browser/keybindingCancellation.js", "../../monaco-editor/esm/vs/editor/contrib/editorState/browser/editorState.js", "../../monaco-editor/esm/vs/editor/browser/editorBrowser.js", "../../monaco-editor/esm/vs/platform/progress/common/progress.js", "../../monaco-editor/esm/vs/platform/markers/common/markers.js", "../../monaco-editor/esm/vs/platform/contextkey/common/contextkeys.js", "../../monaco-editor/esm/vs/base/browser/ui/list/listPaging.js", "../../monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js", "../../monaco-editor/esm/vs/base/browser/ui/table/tableWidget.js", "../../monaco-editor/esm/vs/base/browser/ui/tree/tree.js", "../../monaco-editor/esm/vs/base/browser/ui/tree/indexTreeModel.js", "../../monaco-editor/esm/vs/base/browser/ui/tree/abstractTree.js", "../../monaco-editor/esm/vs/base/browser/ui/tree/objectTreeModel.js", "../../monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js", "../../monaco-editor/esm/vs/base/browser/ui/tree/objectTree.js", "../../monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree.js", "../../monaco-editor/esm/vs/base/browser/ui/tree/dataTree.js", "../../monaco-editor/esm/vs/platform/product/common/product.js", "../../monaco-editor/esm/vs/platform/list/browser/listService.js", "../../monaco-editor/esm/vs/editor/browser/services/bulkEditService.js", "../../monaco-editor/esm/vs/base/browser/ui/countBadge/countBadge.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorCommand, registerEditorCommand } from '../../../browser/editorExtensions.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { localize } from '../../../../nls.js';\nconst IEditorCancellationTokens = createDecorator('IEditorCancelService');\nconst ctxCancellableOperation = new RawContextKey('cancellableOperation', false, localize('cancellableOperation', 'Whether the editor runs a cancellable operation, e.g. like \\'Peek References\\''));\nregisterSingleton(IEditorCancellationTokens, class {\n    constructor() {\n        this._tokens = new WeakMap();\n    }\n    add(editor, cts) {\n        let data = this._tokens.get(editor);\n        if (!data) {\n            data = editor.invokeWithinContext(accessor => {\n                const key = ctxCancellableOperation.bindTo(accessor.get(IContextKeyService));\n                const tokens = new LinkedList();\n                return { key, tokens };\n            });\n            this._tokens.set(editor, data);\n        }\n        let removeFn;\n        data.key.set(true);\n        removeFn = data.tokens.push(cts);\n        return () => {\n            // remove w/o cancellation\n            if (removeFn) {\n                removeFn();\n                data.key.set(!data.tokens.isEmpty());\n                removeFn = undefined;\n            }\n        };\n    }\n    cancel(editor) {\n        const data = this._tokens.get(editor);\n        if (!data) {\n            return;\n        }\n        // remove with cancellation\n        const cts = data.tokens.pop();\n        if (cts) {\n            cts.cancel();\n            data.key.set(!data.tokens.isEmpty());\n        }\n    }\n}, 1 /* InstantiationType.Delayed */);\nexport class EditorKeybindingCancellationTokenSource extends CancellationTokenSource {\n    constructor(editor, parent) {\n        super(parent);\n        this.editor = editor;\n        this._unregister = editor.invokeWithinContext(accessor => accessor.get(IEditorCancellationTokens).add(editor, this));\n    }\n    dispose() {\n        this._unregister();\n        super.dispose();\n    }\n}\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: 'editor.cancelOperation',\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */\n            },\n            precondition: ctxCancellableOperation\n        });\n    }\n    runEditorCommand(accessor, editor) {\n        accessor.get(IEditorCancellationTokens).cancel(editor);\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { Range } from '../../../common/core/range.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorKeybindingCancellationTokenSource } from './keybindingCancellation.js';\nexport class EditorState {\n    constructor(editor, flags) {\n        this.flags = flags;\n        if ((this.flags & 1 /* CodeEditorStateFlag.Value */) !== 0) {\n            const model = editor.getModel();\n            this.modelVersionId = model ? strings.format('{0}#{1}', model.uri.toString(), model.getVersionId()) : null;\n        }\n        else {\n            this.modelVersionId = null;\n        }\n        if ((this.flags & 4 /* CodeEditorStateFlag.Position */) !== 0) {\n            this.position = editor.getPosition();\n        }\n        else {\n            this.position = null;\n        }\n        if ((this.flags & 2 /* CodeEditorStateFlag.Selection */) !== 0) {\n            this.selection = editor.getSelection();\n        }\n        else {\n            this.selection = null;\n        }\n        if ((this.flags & 8 /* CodeEditorStateFlag.Scroll */) !== 0) {\n            this.scrollLeft = editor.getScrollLeft();\n            this.scrollTop = editor.getScrollTop();\n        }\n        else {\n            this.scrollLeft = -1;\n            this.scrollTop = -1;\n        }\n    }\n    _equals(other) {\n        if (!(other instanceof EditorState)) {\n            return false;\n        }\n        const state = other;\n        if (this.modelVersionId !== state.modelVersionId) {\n            return false;\n        }\n        if (this.scrollLeft !== state.scrollLeft || this.scrollTop !== state.scrollTop) {\n            return false;\n        }\n        if (!this.position && state.position || this.position && !state.position || this.position && state.position && !this.position.equals(state.position)) {\n            return false;\n        }\n        if (!this.selection && state.selection || this.selection && !state.selection || this.selection && state.selection && !this.selection.equalsRange(state.selection)) {\n            return false;\n        }\n        return true;\n    }\n    validate(editor) {\n        return this._equals(new EditorState(editor, this.flags));\n    }\n}\n/**\n * A cancellation token source that cancels when the editor changes as expressed\n * by the provided flags\n * @param range If provided, changes in position and selection within this range will not trigger cancellation\n */\nexport class EditorStateCancellationTokenSource extends EditorKeybindingCancellationTokenSource {\n    constructor(editor, flags, range, parent) {\n        super(editor, parent);\n        this._listener = new DisposableStore();\n        if (flags & 4 /* CodeEditorStateFlag.Position */) {\n            this._listener.add(editor.onDidChangeCursorPosition(e => {\n                if (!range || !Range.containsPosition(range, e.position)) {\n                    this.cancel();\n                }\n            }));\n        }\n        if (flags & 2 /* CodeEditorStateFlag.Selection */) {\n            this._listener.add(editor.onDidChangeCursorSelection(e => {\n                if (!range || !Range.containsRange(range, e.selection)) {\n                    this.cancel();\n                }\n            }));\n        }\n        if (flags & 8 /* CodeEditorStateFlag.Scroll */) {\n            this._listener.add(editor.onDidScrollChange(_ => this.cancel()));\n        }\n        if (flags & 1 /* CodeEditorStateFlag.Value */) {\n            this._listener.add(editor.onDidChangeModel(_ => this.cancel()));\n            this._listener.add(editor.onDidChangeModelContent(_ => this.cancel()));\n        }\n    }\n    dispose() {\n        this._listener.dispose();\n        super.dispose();\n    }\n}\n/**\n * A cancellation token source that cancels when the provided model changes\n */\nexport class TextModelCancellationTokenSource extends CancellationTokenSource {\n    constructor(model, parent) {\n        super(parent);\n        this._listener = model.onDidChangeContent(() => this.cancel());\n    }\n    dispose() {\n        this._listener.dispose();\n        super.dispose();\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as editorCommon from '../common/editorCommon.js';\n/**\n *@internal\n */\nexport function isCodeEditor(thing) {\n    if (thing && typeof thing.getEditorType === 'function') {\n        return thing.getEditorType() === editorCommon.EditorType.ICodeEditor;\n    }\n    else {\n        return false;\n    }\n}\n/**\n *@internal\n */\nexport function isDiffEditor(thing) {\n    if (thing && typeof thing.getEditorType === 'function') {\n        return thing.getEditorType() === editorCommon.EditorType.IDiffEditor;\n    }\n    else {\n        return false;\n    }\n}\n/**\n *@internal\n */\nexport function isCompositeEditor(thing) {\n    return !!thing\n        && typeof thing === 'object'\n        && typeof thing.onDidChangeActiveEditor === 'function';\n}\n/**\n *@internal\n */\nexport function getCodeEditor(thing) {\n    if (isCodeEditor(thing)) {\n        return thing;\n    }\n    if (isDiffEditor(thing)) {\n        return thing.getModifiedEditor();\n    }\n    if (isCompositeEditor(thing) && isCodeEditor(thing.activeCodeEditor)) {\n        return thing.activeCodeEditor;\n    }\n    return null;\n}\n", "import { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IProgressService = createDecorator('progressService');\nexport const emptyProgressRunner = Object.freeze({\n    total() { },\n    worked() { },\n    done() { }\n});\nexport class Progress {\n    constructor(callback) {\n        this.callback = callback;\n    }\n    report(item) {\n        this._value = item;\n        this.callback(this._value);\n    }\n}\nProgress.None = Object.freeze({ report() { } });\nexport const IEditorProgressService = createDecorator('editorProgressService');\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport Severity from '../../../base/common/severity.js';\nimport { localize } from '../../../nls.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport var MarkerSeverity;\n(function (MarkerSeverity) {\n    MarkerSeverity[MarkerSeverity[\"Hint\"] = 1] = \"Hint\";\n    MarkerSeverity[MarkerSeverity[\"Info\"] = 2] = \"Info\";\n    MarkerSeverity[MarkerSeverity[\"Warning\"] = 4] = \"Warning\";\n    MarkerSeverity[MarkerSeverity[\"Error\"] = 8] = \"Error\";\n})(MarkerSeverity || (MarkerSeverity = {}));\n(function (MarkerSeverity) {\n    function compare(a, b) {\n        return b - a;\n    }\n    MarkerSeverity.compare = compare;\n    const _displayStrings = Object.create(null);\n    _displayStrings[MarkerSeverity.Error] = localize('sev.error', \"Error\");\n    _displayStrings[MarkerSeverity.Warning] = localize('sev.warning', \"Warning\");\n    _displayStrings[MarkerSeverity.Info] = localize('sev.info', \"Info\");\n    function toString(a) {\n        return _displayStrings[a] || '';\n    }\n    MarkerSeverity.toString = toString;\n    function fromSeverity(severity) {\n        switch (severity) {\n            case Severity.Error: return MarkerSeverity.Error;\n            case Severity.Warning: return MarkerSeverity.Warning;\n            case Severity.Info: return MarkerSeverity.Info;\n            case Severity.Ignore: return MarkerSeverity.Hint;\n        }\n    }\n    MarkerSeverity.fromSeverity = fromSeverity;\n    function toSeverity(severity) {\n        switch (severity) {\n            case MarkerSeverity.Error: return Severity.Error;\n            case MarkerSeverity.Warning: return Severity.Warning;\n            case MarkerSeverity.Info: return Severity.Info;\n            case MarkerSeverity.Hint: return Severity.Ignore;\n        }\n    }\n    MarkerSeverity.toSeverity = toSeverity;\n})(MarkerSeverity || (MarkerSeverity = {}));\nexport var IMarkerData;\n(function (IMarkerData) {\n    const emptyString = '';\n    function makeKey(markerData) {\n        return makeKeyOptionalMessage(markerData, true);\n    }\n    IMarkerData.makeKey = makeKey;\n    function makeKeyOptionalMessage(markerData, useMessage) {\n        const result = [emptyString];\n        if (markerData.source) {\n            result.push(markerData.source.replace('¦', '\\\\¦'));\n        }\n        else {\n            result.push(emptyString);\n        }\n        if (markerData.code) {\n            if (typeof markerData.code === 'string') {\n                result.push(markerData.code.replace('¦', '\\\\¦'));\n            }\n            else {\n                result.push(markerData.code.value.replace('¦', '\\\\¦'));\n            }\n        }\n        else {\n            result.push(emptyString);\n        }\n        if (markerData.severity !== undefined && markerData.severity !== null) {\n            result.push(MarkerSeverity.toString(markerData.severity));\n        }\n        else {\n            result.push(emptyString);\n        }\n        // Modifed to not include the message as part of the marker key to work around\n        // https://github.com/microsoft/vscode/issues/77475\n        if (markerData.message && useMessage) {\n            result.push(markerData.message.replace('¦', '\\\\¦'));\n        }\n        else {\n            result.push(emptyString);\n        }\n        if (markerData.startLineNumber !== undefined && markerData.startLineNumber !== null) {\n            result.push(markerData.startLineNumber.toString());\n        }\n        else {\n            result.push(emptyString);\n        }\n        if (markerData.startColumn !== undefined && markerData.startColumn !== null) {\n            result.push(markerData.startColumn.toString());\n        }\n        else {\n            result.push(emptyString);\n        }\n        if (markerData.endLineNumber !== undefined && markerData.endLineNumber !== null) {\n            result.push(markerData.endLineNumber.toString());\n        }\n        else {\n            result.push(emptyString);\n        }\n        if (markerData.endColumn !== undefined && markerData.endColumn !== null) {\n            result.push(markerData.endColumn.toString());\n        }\n        else {\n            result.push(emptyString);\n        }\n        result.push(emptyString);\n        return result.join('¦');\n    }\n    IMarkerData.makeKeyOptionalMessage = makeKeyOptionalMessage;\n})(IMarkerData || (IMarkerData = {}));\nexport const IMarkerService = createDecorator('markerService');\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isIOS, isLinux, isMacintosh, isMobile, isWeb, isWindows } from '../../../base/common/platform.js';\nimport { localize } from '../../../nls.js';\nimport { RawContextKey } from './contextkey.js';\nexport const IsMacContext = new RawContextKey('isMac', isMacintosh, localize('isMac', \"Whether the operating system is macOS\"));\nexport const IsLinuxContext = new RawContextKey('isLinux', isLinux, localize('isLinux', \"Whether the operating system is Linux\"));\nexport const IsWindowsContext = new RawContextKey('isWindows', isWindows, localize('isWindows', \"Whether the operating system is Windows\"));\nexport const IsWebContext = new RawContextKey('isWeb', isWeb, localize('isWeb', \"Whether the platform is a web browser\"));\nexport const IsMacNativeContext = new RawContextKey('isMacNative', isMacintosh && !isWeb, localize('isMacNative', \"Whether the operating system is macOS on a non-browser platform\"));\nexport const IsIOSContext = new RawContextKey('isIOS', isIOS, localize('isIOS', \"Whether the operating system is iOS\"));\nexport const IsMobileContext = new RawContextKey('isMobile', isMobile, localize('isMobile', \"Whether the platform is a mobile web browser\"));\nexport const IsDevelopmentContext = new RawContextKey('isDevelopment', false, true);\nexport const ProductQualityContext = new RawContextKey('productQualityType', '', localize('productQualityType', \"Quality type of VS Code\"));\nexport const InputFocusedContextKey = 'inputFocus';\nexport const InputFocusedContext = new RawContextKey(InputFocusedContextKey, false, localize('inputFocus', \"Whether keyboard focus is inside an input box\"));\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { range } from '../../../common/arrays.js';\nimport { CancellationTokenSource } from '../../../common/cancellation.js';\nimport { Event } from '../../../common/event.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport './list.css';\nimport { List } from './listWidget.js';\nclass PagedRenderer {\n    get templateId() { return this.renderer.templateId; }\n    constructor(renderer, modelProvider) {\n        this.renderer = renderer;\n        this.modelProvider = modelProvider;\n    }\n    renderTemplate(container) {\n        const data = this.renderer.renderTemplate(container);\n        return { data, disposable: Disposable.None };\n    }\n    renderElement(index, _, data, height) {\n        var _a;\n        (_a = data.disposable) === null || _a === void 0 ? void 0 : _a.dispose();\n        if (!data.data) {\n            return;\n        }\n        const model = this.modelProvider();\n        if (model.isResolved(index)) {\n            return this.renderer.renderElement(model.get(index), index, data.data, height);\n        }\n        const cts = new CancellationTokenSource();\n        const promise = model.resolve(index, cts.token);\n        data.disposable = { dispose: () => cts.cancel() };\n        this.renderer.renderPlaceholder(index, data.data);\n        promise.then(entry => this.renderer.renderElement(entry, index, data.data, height));\n    }\n    disposeTemplate(data) {\n        if (data.disposable) {\n            data.disposable.dispose();\n            data.disposable = undefined;\n        }\n        if (data.data) {\n            this.renderer.disposeTemplate(data.data);\n            data.data = undefined;\n        }\n    }\n}\nclass PagedAccessibilityProvider {\n    constructor(modelProvider, accessibilityProvider) {\n        this.modelProvider = modelProvider;\n        this.accessibilityProvider = accessibilityProvider;\n    }\n    getWidgetAriaLabel() {\n        return this.accessibilityProvider.getWidgetAriaLabel();\n    }\n    getAriaLabel(index) {\n        const model = this.modelProvider();\n        if (!model.isResolved(index)) {\n            return null;\n        }\n        return this.accessibilityProvider.getAriaLabel(model.get(index));\n    }\n}\nfunction fromPagedListOptions(modelProvider, options) {\n    return {\n        ...options,\n        accessibilityProvider: options.accessibilityProvider && new PagedAccessibilityProvider(modelProvider, options.accessibilityProvider)\n    };\n}\nexport class PagedList {\n    constructor(user, container, virtualDelegate, renderers, options = {}) {\n        const modelProvider = () => this.model;\n        const pagedRenderers = renderers.map(r => new PagedRenderer(r, modelProvider));\n        this.list = new List(user, container, virtualDelegate, pagedRenderers, fromPagedListOptions(modelProvider, options));\n    }\n    updateOptions(options) {\n        this.list.updateOptions(options);\n    }\n    getHTMLElement() {\n        return this.list.getHTMLElement();\n    }\n    get onDidFocus() {\n        return this.list.onDidFocus;\n    }\n    get widget() {\n        return this.list;\n    }\n    get onDidDispose() {\n        return this.list.onDidDispose;\n    }\n    get onMouseDblClick() {\n        return Event.map(this.list.onMouseDblClick, ({ element, index, browserEvent }) => ({ element: element === undefined ? undefined : this._model.get(element), index, browserEvent }));\n    }\n    get onPointer() {\n        return Event.map(this.list.onPointer, ({ element, index, browserEvent }) => ({ element: element === undefined ? undefined : this._model.get(element), index, browserEvent }));\n    }\n    get onDidChangeSelection() {\n        return Event.map(this.list.onDidChangeSelection, ({ elements, indexes, browserEvent }) => ({ elements: elements.map(e => this._model.get(e)), indexes, browserEvent }));\n    }\n    get model() {\n        return this._model;\n    }\n    set model(model) {\n        this._model = model;\n        this.list.splice(0, this.list.length, range(model.length));\n    }\n    getFocus() {\n        return this.list.getFocus();\n    }\n    getSelection() {\n        return this.list.getSelection();\n    }\n    getSelectedElements() {\n        return this.getSelection().map(i => this.model.get(i));\n    }\n    style(styles) {\n        this.list.style(styles);\n    }\n    dispose() {\n        this.list.dispose();\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, append, getWindow, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { Sash } from '../sash/sash.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { pushToEnd, pushToStart, range } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { combinedDisposable, Disposable, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nimport * as types from '../../../common/types.js';\nimport './splitview.css';\nconst defaultStyles = {\n    separatorBorder: Color.transparent\n};\nclass ViewItem {\n    set size(size) {\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    get visible() {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n    setVisible(visible, size) {\n        var _a, _b;\n        if (visible === this.visible) {\n            return;\n        }\n        if (visible) {\n            this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\n            this._cachedVisibleSize = undefined;\n        }\n        else {\n            this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n        this.container.classList.toggle('visible', visible);\n        try {\n            (_b = (_a = this.view).setVisible) === null || _b === void 0 ? void 0 : _b.call(_a, visible);\n        }\n        catch (e) {\n            console.error('Splitview: Failed to set visible view');\n            console.error(e);\n        }\n    }\n    get minimumSize() { return this.visible ? this.view.minimumSize : 0; }\n    get viewMinimumSize() { return this.view.minimumSize; }\n    get maximumSize() { return this.visible ? this.view.maximumSize : 0; }\n    get viewMaximumSize() { return this.view.maximumSize; }\n    get priority() { return this.view.priority; }\n    get proportionalLayout() { var _a; return (_a = this.view.proportionalLayout) !== null && _a !== void 0 ? _a : true; }\n    get snap() { return !!this.view.snap; }\n    set enabled(enabled) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n    constructor(container, view, size, disposable) {\n        this.container = container;\n        this.view = view;\n        this.disposable = disposable;\n        this._cachedVisibleSize = undefined;\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        }\n        else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n    layout(offset, layoutContext) {\n        this.layoutContainer(offset);\n        try {\n            this.view.layout(this.size, offset, layoutContext);\n        }\n        catch (e) {\n            console.error('Splitview: Failed to layout view');\n            console.error(e);\n        }\n    }\n    dispose() {\n        this.disposable.dispose();\n    }\n}\nclass VerticalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.top = `${offset}px`;\n        this.container.style.height = `${this.size}px`;\n    }\n}\nclass HorizontalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.left = `${offset}px`;\n        this.container.style.width = `${this.size}px`;\n    }\n}\nvar State;\n(function (State) {\n    State[State[\"Idle\"] = 0] = \"Idle\";\n    State[State[\"Busy\"] = 1] = \"Busy\";\n})(State || (State = {}));\nexport var Sizing;\n(function (Sizing) {\n    /**\n     * When adding or removing views, distribute the delta space among\n     * all other views.\n     */\n    Sizing.Distribute = { type: 'distribute' };\n    /**\n     * When adding or removing views, split the delta space with another\n     * specific view, indexed by the provided `index`.\n     */\n    function Split(index) { return { type: 'split', index }; }\n    Sizing.Split = Split;\n    /**\n     * When adding a view, use DistributeSizing when all pre-existing views are\n     * distributed evenly, otherwise use SplitSizing.\n     */\n    function Auto(index) { return { type: 'auto', index }; }\n    Sizing.Auto = Auto;\n    /**\n     * When adding or removing views, assume the view is invisible.\n     */\n    function Invisible(cachedVisibleSize) { return { type: 'invisible', cachedVisibleSize }; }\n    Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\n/**\n * The {@link SplitView} is the UI component which implements a one dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are essentially HTMLElement instances with the following size constraints:\n *\n * - {@link IView.minimumSize}\n * - {@link IView.maximumSize}\n * - {@link IView.priority}\n * - {@link IView.snap}\n *\n * In case the SplitView doesn't have enough size to fit all views, it will overflow\n * its content with a scrollbar.\n *\n * In between each pair of views there will be a {@link Sash} allowing the user\n * to resize the views, making sure the constraints are respected.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n *\n * Features:\n * - Flex-like layout algorithm\n * - Snap support\n * - Orthogonal sash support, for corner sashes\n * - View hide/show support\n * - View swap/move support\n * - Alt key modifier behavior, macOS style\n */\nexport class SplitView extends Disposable {\n    get orthogonalStartSash() { return this._orthogonalStartSash; }\n    get orthogonalEndSash() { return this._orthogonalEndSash; }\n    get startSnappingEnabled() { return this._startSnappingEnabled; }\n    get endSnappingEnabled() { return this._endSnappingEnabled; }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the left- or top-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalStartSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalStartSash = sash;\n        }\n        this._orthogonalStartSash = sash;\n    }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the right- or bottom-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalEndSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalEndSash = sash;\n        }\n        this._orthogonalEndSash = sash;\n    }\n    /**\n     * Enable/disable snapping at the beginning of this {@link SplitView}.\n     */\n    set startSnappingEnabled(startSnappingEnabled) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    /**\n     * Enable/disable snapping at the end of this {@link SplitView}.\n     */\n    set endSnappingEnabled(endSnappingEnabled) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    /**\n     * Create a new {@link SplitView} instance.\n     */\n    constructor(container, options = {}) {\n        var _a, _b, _c, _d, _e;\n        super();\n        this.size = 0;\n        this._contentSize = 0;\n        this.proportions = undefined;\n        this.viewItems = [];\n        this.sashItems = []; // used in tests\n        this.state = State.Idle;\n        this._onDidSashChange = this._register(new Emitter());\n        this._onDidSashReset = this._register(new Emitter());\n        this._startSnappingEnabled = true;\n        this._endSnappingEnabled = true;\n        /**\n         * Fires whenever the user resizes a {@link Sash sash}.\n         */\n        this.onDidSashChange = this._onDidSashChange.event;\n        /**\n         * Fires whenever the user double clicks a {@link Sash sash}.\n         */\n        this.onDidSashReset = this._onDidSashReset.event;\n        this.orientation = (_a = options.orientation) !== null && _a !== void 0 ? _a : 0 /* Orientation.VERTICAL */;\n        this.inverseAltBehavior = (_b = options.inverseAltBehavior) !== null && _b !== void 0 ? _b : false;\n        this.proportionalLayout = (_c = options.proportionalLayout) !== null && _c !== void 0 ? _c : true;\n        this.getSashOrthogonalSize = options.getSashOrthogonalSize;\n        this.el = document.createElement('div');\n        this.el.classList.add('monaco-split-view2');\n        this.el.classList.add(this.orientation === 0 /* Orientation.VERTICAL */ ? 'vertical' : 'horizontal');\n        container.appendChild(this.el);\n        this.sashContainer = append(this.el, $('.sash-container'));\n        this.viewContainer = $('.split-view-container');\n        this.scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration: 125,\n            scheduleAtNextAnimationFrame: callback => scheduleAtNextAnimationFrame(getWindow(this.el), callback),\n        }));\n        this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n            vertical: this.orientation === 0 /* Orientation.VERTICAL */ ? ((_d = options.scrollbarVisibility) !== null && _d !== void 0 ? _d : 1 /* ScrollbarVisibility.Auto */) : 2 /* ScrollbarVisibility.Hidden */,\n            horizontal: this.orientation === 1 /* Orientation.HORIZONTAL */ ? ((_e = options.scrollbarVisibility) !== null && _e !== void 0 ? _e : 1 /* ScrollbarVisibility.Auto */) : 2 /* ScrollbarVisibility.Hidden */\n        }, this.scrollable));\n        // https://github.com/microsoft/vscode/issues/157737\n        const onDidScrollViewContainer = this._register(new DomEmitter(this.viewContainer, 'scroll')).event;\n        this._register(onDidScrollViewContainer(_ => {\n            const position = this.scrollableElement.getScrollPosition();\n            const scrollLeft = Math.abs(this.viewContainer.scrollLeft - position.scrollLeft) <= 1 ? undefined : this.viewContainer.scrollLeft;\n            const scrollTop = Math.abs(this.viewContainer.scrollTop - position.scrollTop) <= 1 ? undefined : this.viewContainer.scrollTop;\n            if (scrollLeft !== undefined || scrollTop !== undefined) {\n                this.scrollableElement.setScrollPosition({ scrollLeft, scrollTop });\n            }\n        }));\n        this.onDidScroll = this.scrollableElement.onScroll;\n        this._register(this.onDidScroll(e => {\n            if (e.scrollTopChanged) {\n                this.viewContainer.scrollTop = e.scrollTop;\n            }\n            if (e.scrollLeftChanged) {\n                this.viewContainer.scrollLeft = e.scrollLeft;\n            }\n        }));\n        append(this.el, this.scrollableElement.getDomNode());\n        this.style(options.styles || defaultStyles);\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this.size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : { type: 'invisible', cachedVisibleSize: viewDescriptor.size };\n                const view = viewDescriptor.view;\n                this.doAddView(view, sizing, index, true);\n            });\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n    style(styles) {\n        if (styles.separatorBorder.isTransparent()) {\n            this.el.classList.remove('separator-border');\n            this.el.style.removeProperty('--separator-border');\n        }\n        else {\n            this.el.classList.add('separator-border');\n            this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n        }\n    }\n    /**\n     * Add a {@link IView view} to this {@link SplitView}.\n     *\n     * @param view The view to add.\n     * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n     * @param index The index to insert the view on.\n     * @param skipLayout Whether layout should be skipped.\n     */\n    addView(view, size, index = this.viewItems.length, skipLayout) {\n        this.doAddView(view, size, index, skipLayout);\n    }\n    /**\n     * Layout the {@link SplitView}.\n     *\n     * @param size The entire size of the {@link SplitView}.\n     * @param layoutContext An optional layout context to pass along to {@link IView views}.\n     */\n    layout(size, layoutContext) {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.layoutContext = layoutContext;\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n            const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        }\n        else {\n            let total = 0;\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                }\n                else {\n                    size -= item.size;\n                }\n            }\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(Math.round(proportion * size / total), item.minimumSize, item.maximumSize);\n                }\n            }\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    saveProportions() {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this.proportions = this.viewItems.map(v => v.proportionalLayout && v.visible ? v.size / this._contentSize : undefined);\n        }\n    }\n    onSashStart({ sash, start, alt }) {\n        for (const item of this.viewItems) {\n            item.enabled = false;\n        }\n        const index = this.sashItems.findIndex(item => item.sash === sash);\n        // This way, we can press Alt while we resize a sash, macOS style!\n        const disposable = combinedDisposable(addDisposableListener(this.el.ownerDocument.body, 'keydown', e => resetSashDragState(this.sashDragState.current, e.altKey)), addDisposableListener(this.el.ownerDocument.body, 'keyup', () => resetSashDragState(this.sashDragState.current, false)));\n        const resetSashDragState = (start, alt) => {\n            const sizes = this.viewItems.map(i => i.size);\n            let minDelta = Number.NEGATIVE_INFINITY;\n            let maxDelta = Number.POSITIVE_INFINITY;\n            if (this.inverseAltBehavior) {\n                alt = !alt;\n            }\n            if (alt) {\n                // When we're using the last sash with Alt, we're resizing\n                // the view to the left/up, instead of right/down as usual\n                // Thus, we must do the inverse of the usual\n                const isLastSash = index === this.sashItems.length - 1;\n                if (isLastSash) {\n                    const viewItem = this.viewItems[index];\n                    minDelta = (viewItem.minimumSize - viewItem.size) / 2;\n                    maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n                }\n                else {\n                    const viewItem = this.viewItems[index + 1];\n                    minDelta = (viewItem.size - viewItem.maximumSize) / 2;\n                    maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n                }\n            }\n            let snapBefore;\n            let snapAfter;\n            if (!alt) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n                const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n                const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const viewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n                        size: viewItem.size\n                    };\n                }\n                if (typeof snapAfterIndex === 'number') {\n                    const viewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n                        size: viewItem.size\n                    };\n                }\n            }\n            this.sashDragState = { start, current: start, index, sizes, minDelta, maxDelta, alt, snapBefore, snapAfter, disposable };\n        };\n        resetSashDragState(start, alt);\n    }\n    onSashChange({ current }) {\n        const { index, start, sizes, alt, minDelta, maxDelta, snapBefore, snapAfter } = this.sashDragState;\n        this.sashDragState.current = current;\n        const delta = current - start;\n        const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n        if (alt) {\n            const isLastSash = index === this.sashItems.length - 1;\n            const newSizes = this.viewItems.map(i => i.size);\n            const viewItemIndex = isLastSash ? index : index + 1;\n            const viewItem = this.viewItems[viewItemIndex];\n            const newMinDelta = viewItem.size - viewItem.maximumSize;\n            const newMaxDelta = viewItem.size - viewItem.minimumSize;\n            const resizeIndex = isLastSash ? index - 1 : index + 1;\n            this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    onSashEnd(index) {\n        this._onDidSashChange.fire(index);\n        this.sashDragState.disposable.dispose();\n        this.saveProportions();\n        for (const item of this.viewItems) {\n            item.enabled = true;\n        }\n    }\n    onViewChange(item, size) {\n        const index = this.viewItems.indexOf(item);\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n        if (this.inverseAltBehavior && index > 0) {\n            // In this case, we want the view to grow or shrink both sides equally\n            // so we just resize the \"left\" side by half and let `resize` do the clamping magic\n            this.resize(index - 1, Math.floor((item.size - size) / 2));\n            this.distributeEmptySpace();\n            this.layoutViews();\n        }\n        else {\n            item.size = size;\n            this.relayout([index], undefined);\n        }\n    }\n    /**\n     * Resize a {@link IView view} within the {@link SplitView}.\n     *\n     * @param index The {@link IView view} index.\n     * @param size The {@link IView view} size.\n     */\n    resizeView(index, size) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        try {\n            const indexes = range(this.viewItems.length).filter(i => i !== index);\n            const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */), index];\n            const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n            const item = this.viewItems[index];\n            size = Math.round(size);\n            size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n            item.size = size;\n            this.relayout(lowPriorityIndexes, highPriorityIndexes);\n        }\n        finally {\n            this.state = State.Idle;\n        }\n    }\n    /**\n     * Distribute the entire {@link SplitView} size among all {@link IView views}.\n     */\n    distributeViewSizes() {\n        const flexibleViewItems = [];\n        let flexibleSize = 0;\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n    /**\n     * Returns the size of a {@link IView view}.\n     */\n    getViewSize(index) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n        return this.viewItems[index].size;\n    }\n    doAddView(view, size, index = this.viewItems.length, skipLayout) {\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        try {\n            // Add view\n            const container = $('.split-view-view');\n            if (index === this.viewItems.length) {\n                this.viewContainer.appendChild(container);\n            }\n            else {\n                this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n            }\n            const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n            const containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n            const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n            let viewSize;\n            if (typeof size === 'number') {\n                viewSize = size;\n            }\n            else {\n                if (size.type === 'auto') {\n                    if (this.areViewsDistributed()) {\n                        size = { type: 'distribute' };\n                    }\n                    else {\n                        size = { type: 'split', index: size.index };\n                    }\n                }\n                if (size.type === 'split') {\n                    viewSize = this.getViewSize(size.index) / 2;\n                }\n                else if (size.type === 'invisible') {\n                    viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n                }\n                else {\n                    viewSize = view.minimumSize;\n                }\n            }\n            const item = this.orientation === 0 /* Orientation.VERTICAL */\n                ? new VerticalViewItem(container, view, viewSize, disposable)\n                : new HorizontalViewItem(container, view, viewSize, disposable);\n            this.viewItems.splice(index, 0, item);\n            // Add sash\n            if (this.viewItems.length > 1) {\n                const opts = { orthogonalStartSash: this.orthogonalStartSash, orthogonalEndSash: this.orthogonalEndSash };\n                const sash = this.orientation === 0 /* Orientation.VERTICAL */\n                    ? new Sash(this.sashContainer, { getHorizontalSashTop: s => this.getSashPosition(s), getHorizontalSashWidth: this.getSashOrthogonalSize }, { ...opts, orientation: 1 /* Orientation.HORIZONTAL */ })\n                    : new Sash(this.sashContainer, { getVerticalSashLeft: s => this.getSashPosition(s), getVerticalSashHeight: this.getSashOrthogonalSize }, { ...opts, orientation: 0 /* Orientation.VERTICAL */ });\n                const sashEventMapper = this.orientation === 0 /* Orientation.VERTICAL */\n                    ? (e) => ({ sash, start: e.startY, current: e.currentY, alt: e.altKey })\n                    : (e) => ({ sash, start: e.startX, current: e.currentX, alt: e.altKey });\n                const onStart = Event.map(sash.onDidStart, sashEventMapper);\n                const onStartDisposable = onStart(this.onSashStart, this);\n                const onChange = Event.map(sash.onDidChange, sashEventMapper);\n                const onChangeDisposable = onChange(this.onSashChange, this);\n                const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n                const onEndDisposable = onEnd(this.onSashEnd, this);\n                const onDidResetDisposable = sash.onDidReset(() => {\n                    const index = this.sashItems.findIndex(item => item.sash === sash);\n                    const upIndexes = range(index, -1);\n                    const downIndexes = range(index + 1, this.viewItems.length);\n                    const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                    const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                    if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n                        return;\n                    }\n                    if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n                        return;\n                    }\n                    this._onDidSashReset.fire(index);\n                });\n                const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n                const sashItem = { sash, disposable };\n                this.sashItems.splice(index - 1, 0, sashItem);\n            }\n            container.appendChild(view.element);\n            let highPriorityIndexes;\n            if (typeof size !== 'number' && size.type === 'split') {\n                highPriorityIndexes = [size.index];\n            }\n            if (!skipLayout) {\n                this.relayout([index], highPriorityIndexes);\n            }\n            if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n                this.distributeViewSizes();\n            }\n        }\n        finally {\n            this.state = State.Idle;\n        }\n    }\n    relayout(lowPriorityIndexes, highPriorityIndexes) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n    resize(index, delta, sizes = this.viewItems.map(i => i.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return 0;\n        }\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        if (highPriorityIndexes) {\n            for (const index of highPriorityIndexes) {\n                pushToStart(upIndexes, index);\n                pushToStart(downIndexes, index);\n            }\n        }\n        if (lowPriorityIndexes) {\n            for (const index of lowPriorityIndexes) {\n                pushToEnd(upIndexes, index);\n                pushToEnd(downIndexes, index);\n            }\n        }\n        const upItems = upIndexes.map(i => this.viewItems[i]);\n        const upSizes = upIndexes.map(i => sizes[i]);\n        const downItems = downIndexes.map(i => this.viewItems[i]);\n        const downSizes = downIndexes.map(i => sizes[i]);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n        if (snapped) {\n            return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n        }\n        delta = clamp(delta, minDelta, maxDelta);\n        for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n            const viewDelta = size - upSizes[i];\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n            const viewDelta = size - downSizes[i];\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        return delta;\n    }\n    distributeEmptySpace(lowPriorityIndex) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n            const viewDelta = size - item.size;\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n    layoutViews() {\n        // Save new content size\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        // Layout views\n        let offset = 0;\n        for (const viewItem of this.viewItems) {\n            viewItem.layout(offset, this.layoutContext);\n            offset += viewItem.size;\n        }\n        // Layout sashes\n        this.sashItems.forEach(item => item.sash.layout());\n        this.updateSashEnablement();\n        this.updateScrollableElement();\n    }\n    updateScrollableElement() {\n        if (this.orientation === 0 /* Orientation.VERTICAL */) {\n            this.scrollableElement.setScrollDimensions({\n                height: this.size,\n                scrollHeight: this._contentSize\n            });\n        }\n        else {\n            this.scrollableElement.setScrollDimensions({\n                width: this.size,\n                scrollWidth: this._contentSize\n            });\n        }\n    }\n    updateSashEnablement() {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(i => previous = (i.size - i.minimumSize > 0) || previous);\n        previous = false;\n        const expandsDown = this.viewItems.map(i => previous = (i.maximumSize - i.size > 0) || previous);\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews.map(i => previous = (i.size - i.minimumSize > 0) || previous).reverse();\n        previous = false;\n        const expandsUp = reverseViews.map(i => previous = (i.maximumSize - i.size > 0) || previous).reverse();\n        let position = 0;\n        for (let index = 0; index < this.sashItems.length; index++) {\n            const { sash } = this.sashItems[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n                if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n                    sash.state = 1 /* SashState.AtMinimum */;\n                }\n                else if (snappedAfter && collapsesDown[index] && (position < this._contentSize || this.endSnappingEnabled)) {\n                    sash.state = 2 /* SashState.AtMaximum */;\n                }\n                else {\n                    sash.state = 0 /* SashState.Disabled */;\n                }\n            }\n            else if (min && !max) {\n                sash.state = 1 /* SashState.AtMinimum */;\n            }\n            else if (!min && max) {\n                sash.state = 2 /* SashState.AtMaximum */;\n            }\n            else {\n                sash.state = 3 /* SashState.Enabled */;\n            }\n        }\n    }\n    getSashPosition(sash) {\n        let position = 0;\n        for (let i = 0; i < this.sashItems.length; i++) {\n            position += this.viewItems[i].size;\n            if (this.sashItems[i].sash === sash) {\n                return position;\n            }\n        }\n        return 0;\n    }\n    findFirstSnapIndex(indexes) {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (!viewItem.visible) {\n                continue;\n            }\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n                return undefined;\n            }\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n        return undefined;\n    }\n    areViewsDistributed() {\n        let min = undefined, max = undefined;\n        for (const view of this.viewItems) {\n            min = min === undefined ? view.size : Math.min(min, view.size);\n            max = max === undefined ? view.size : Math.max(max, view.size);\n            if (max - min > 2) {\n                return false;\n            }\n        }\n        return true;\n    }\n    dispose() {\n        var _a;\n        (_a = this.sashDragState) === null || _a === void 0 ? void 0 : _a.disposable.dispose();\n        dispose(this.viewItems);\n        this.viewItems = [];\n        this.sashItems.forEach(i => i.disposable.dispose());\n        this.sashItems = [];\n        super.dispose();\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append, clearNode, createStyleSheet } from '../../dom.js';\nimport { List, unthemedListStyles } from '../list/listWidget.js';\nimport { SplitView } from '../splitview/splitview.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { DisposableStore } from '../../../common/lifecycle.js';\nimport './table.css';\nclass TableListRenderer {\n    constructor(columns, renderers, getColumnSize) {\n        this.columns = columns;\n        this.getColumnSize = getColumnSize;\n        this.templateId = TableListRenderer.TemplateId;\n        this.renderedTemplates = new Set();\n        const rendererMap = new Map(renderers.map(r => [r.templateId, r]));\n        this.renderers = [];\n        for (const column of columns) {\n            const renderer = rendererMap.get(column.templateId);\n            if (!renderer) {\n                throw new Error(`Table cell renderer for template id ${column.templateId} not found.`);\n            }\n            this.renderers.push(renderer);\n        }\n    }\n    renderTemplate(container) {\n        const rowContainer = append(container, $('.monaco-table-tr'));\n        const cellContainers = [];\n        const cellTemplateData = [];\n        for (let i = 0; i < this.columns.length; i++) {\n            const renderer = this.renderers[i];\n            const cellContainer = append(rowContainer, $('.monaco-table-td', { 'data-col-index': i }));\n            cellContainer.style.width = `${this.getColumnSize(i)}px`;\n            cellContainers.push(cellContainer);\n            cellTemplateData.push(renderer.renderTemplate(cellContainer));\n        }\n        const result = { container, cellContainers, cellTemplateData };\n        this.renderedTemplates.add(result);\n        return result;\n    }\n    renderElement(element, index, templateData, height) {\n        for (let i = 0; i < this.columns.length; i++) {\n            const column = this.columns[i];\n            const cell = column.project(element);\n            const renderer = this.renderers[i];\n            renderer.renderElement(cell, index, templateData.cellTemplateData[i], height);\n        }\n    }\n    disposeElement(element, index, templateData, height) {\n        for (let i = 0; i < this.columns.length; i++) {\n            const renderer = this.renderers[i];\n            if (renderer.disposeElement) {\n                const column = this.columns[i];\n                const cell = column.project(element);\n                renderer.disposeElement(cell, index, templateData.cellTemplateData[i], height);\n            }\n        }\n    }\n    disposeTemplate(templateData) {\n        for (let i = 0; i < this.columns.length; i++) {\n            const renderer = this.renderers[i];\n            renderer.disposeTemplate(templateData.cellTemplateData[i]);\n        }\n        clearNode(templateData.container);\n        this.renderedTemplates.delete(templateData);\n    }\n    layoutColumn(index, size) {\n        for (const { cellContainers } of this.renderedTemplates) {\n            cellContainers[index].style.width = `${size}px`;\n        }\n    }\n}\nTableListRenderer.TemplateId = 'row';\nfunction asListVirtualDelegate(delegate) {\n    return {\n        getHeight(row) { return delegate.getHeight(row); },\n        getTemplateId() { return TableListRenderer.TemplateId; },\n    };\n}\nclass ColumnHeader {\n    get minimumSize() { var _a; return (_a = this.column.minimumWidth) !== null && _a !== void 0 ? _a : 120; }\n    get maximumSize() { var _a; return (_a = this.column.maximumWidth) !== null && _a !== void 0 ? _a : Number.POSITIVE_INFINITY; }\n    get onDidChange() { var _a; return (_a = this.column.onDidChangeWidthConstraints) !== null && _a !== void 0 ? _a : Event.None; }\n    constructor(column, index) {\n        this.column = column;\n        this.index = index;\n        this._onDidLayout = new Emitter();\n        this.onDidLayout = this._onDidLayout.event;\n        this.element = $('.monaco-table-th', { 'data-col-index': index, title: column.tooltip }, column.label);\n    }\n    layout(size) {\n        this._onDidLayout.fire([this.index, size]);\n    }\n}\nexport class Table {\n    get onDidChangeFocus() { return this.list.onDidChangeFocus; }\n    get onDidChangeSelection() { return this.list.onDidChangeSelection; }\n    get onDidScroll() { return this.list.onDidScroll; }\n    get onMouseDblClick() { return this.list.onMouseDblClick; }\n    get onPointer() { return this.list.onPointer; }\n    get onDidFocus() { return this.list.onDidFocus; }\n    get scrollTop() { return this.list.scrollTop; }\n    set scrollTop(scrollTop) { this.list.scrollTop = scrollTop; }\n    get scrollHeight() { return this.list.scrollHeight; }\n    get renderHeight() { return this.list.renderHeight; }\n    get onDidDispose() { return this.list.onDidDispose; }\n    constructor(user, container, virtualDelegate, columns, renderers, _options) {\n        this.virtualDelegate = virtualDelegate;\n        this.domId = `table_id_${++Table.InstanceCount}`;\n        this.disposables = new DisposableStore();\n        this.cachedWidth = 0;\n        this.cachedHeight = 0;\n        this.domNode = append(container, $(`.monaco-table.${this.domId}`));\n        const headers = columns.map((c, i) => new ColumnHeader(c, i));\n        const descriptor = {\n            size: headers.reduce((a, b) => a + b.column.weight, 0),\n            views: headers.map(view => ({ size: view.column.weight, view }))\n        };\n        this.splitview = this.disposables.add(new SplitView(this.domNode, {\n            orientation: 1 /* Orientation.HORIZONTAL */,\n            scrollbarVisibility: 2 /* ScrollbarVisibility.Hidden */,\n            getSashOrthogonalSize: () => this.cachedHeight,\n            descriptor\n        }));\n        this.splitview.el.style.height = `${virtualDelegate.headerRowHeight}px`;\n        this.splitview.el.style.lineHeight = `${virtualDelegate.headerRowHeight}px`;\n        const renderer = new TableListRenderer(columns, renderers, i => this.splitview.getViewSize(i));\n        this.list = this.disposables.add(new List(user, this.domNode, asListVirtualDelegate(virtualDelegate), [renderer], _options));\n        Event.any(...headers.map(h => h.onDidLayout))(([index, size]) => renderer.layoutColumn(index, size), null, this.disposables);\n        this.splitview.onDidSashReset(index => {\n            const totalWeight = columns.reduce((r, c) => r + c.weight, 0);\n            const size = columns[index].weight / totalWeight * this.cachedWidth;\n            this.splitview.resizeView(index, size);\n        }, null, this.disposables);\n        this.styleElement = createStyleSheet(this.domNode);\n        this.style(unthemedListStyles);\n    }\n    updateOptions(options) {\n        this.list.updateOptions(options);\n    }\n    splice(start, deleteCount, elements = []) {\n        this.list.splice(start, deleteCount, elements);\n    }\n    getHTMLElement() {\n        return this.domNode;\n    }\n    style(styles) {\n        const content = [];\n        content.push(`.monaco-table.${this.domId} > .monaco-split-view2 .monaco-sash.vertical::before {\n\t\t\ttop: ${this.virtualDelegate.headerRowHeight + 1}px;\n\t\t\theight: calc(100% - ${this.virtualDelegate.headerRowHeight}px);\n\t\t}`);\n        this.styleElement.textContent = content.join('\\n');\n        this.list.style(styles);\n    }\n    getSelectedElements() {\n        return this.list.getSelectedElements();\n    }\n    getSelection() {\n        return this.list.getSelection();\n    }\n    getFocus() {\n        return this.list.getFocus();\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n}\nTable.InstanceCount = 0;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var ObjectTreeElementCollapseState;\n(function (ObjectTreeElementCollapseState) {\n    ObjectTreeElementCollapseState[ObjectTreeElementCollapseState[\"Expanded\"] = 0] = \"Expanded\";\n    ObjectTreeElementCollapseState[ObjectTreeElementCollapseState[\"Collapsed\"] = 1] = \"Collapsed\";\n    /**\n     * If the element is already in the tree, preserve its current state. Else, expand it.\n     */\n    ObjectTreeElementCollapseState[ObjectTreeElementCollapseState[\"PreserveOrExpanded\"] = 2] = \"PreserveOrExpanded\";\n    /**\n     * If the element is already in the tree, preserve its current state. Else, collapse it.\n     */\n    ObjectTreeElementCollapseState[ObjectTreeElementCollapseState[\"PreserveOrCollapsed\"] = 3] = \"PreserveOrCollapsed\";\n})(ObjectTreeElementCollapseState || (ObjectTreeElementCollapseState = {}));\nexport var TreeMouseEventTarget;\n(function (TreeMouseEventTarget) {\n    TreeMouseEventTarget[TreeMouseEventTarget[\"Unknown\"] = 0] = \"Unknown\";\n    TreeMouseEventTarget[TreeMouseEventTarget[\"Twistie\"] = 1] = \"Twistie\";\n    TreeMouseEventTarget[TreeMouseEventTarget[\"Element\"] = 2] = \"Element\";\n    TreeMouseEventTarget[TreeMouseEventTarget[\"Filter\"] = 3] = \"Filter\";\n})(TreeMouseEventTarget || (TreeMouseEventTarget = {}));\nexport class TreeError extends Error {\n    constructor(user, message) {\n        super(`TreeError [${user}] ${message}`);\n    }\n}\nexport class WeakMapper {\n    constructor(fn) {\n        this.fn = fn;\n        this._map = new WeakMap();\n    }\n    map(key) {\n        let result = this._map.get(key);\n        if (!result) {\n            result = this.fn(key);\n            this._map.set(key, result);\n        }\n        return result;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TreeError } from './tree.js';\nimport { splice, tail2 } from '../../../common/arrays.js';\nimport { Delayer } from '../../../common/async.js';\nimport { MicrotaskDelay } from '../../../common/symbols.js';\nimport { LcsDiff } from '../../../common/diff/diff.js';\nimport { Emitter, EventBufferer } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nexport function isFilterResult(obj) {\n    return typeof obj === 'object' && 'visibility' in obj && 'data' in obj;\n}\nexport function getVisibleState(visibility) {\n    switch (visibility) {\n        case true: return 1 /* TreeVisibility.Visible */;\n        case false: return 0 /* TreeVisibility.Hidden */;\n        default: return visibility;\n    }\n}\nfunction isCollapsibleStateUpdate(update) {\n    return typeof update.collapsible === 'boolean';\n}\nexport class IndexTreeModel {\n    constructor(user, list, rootElement, options = {}) {\n        this.user = user;\n        this.list = list;\n        this.rootRef = [];\n        this.eventBufferer = new EventBufferer();\n        this._onDidChangeCollapseState = new Emitter();\n        this.onDidChangeCollapseState = this.eventBufferer.wrapEvent(this._onDidChangeCollapseState.event);\n        this._onDidChangeRenderNodeCount = new Emitter();\n        this.onDidChangeRenderNodeCount = this.eventBufferer.wrapEvent(this._onDidChangeRenderNodeCount.event);\n        this._onDidSplice = new Emitter();\n        this.onDidSplice = this._onDidSplice.event;\n        this.refilterDelayer = new Delayer(MicrotaskDelay);\n        this.collapseByDefault = typeof options.collapseByDefault === 'undefined' ? false : options.collapseByDefault;\n        this.filter = options.filter;\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n        this.root = {\n            parent: undefined,\n            element: rootElement,\n            children: [],\n            depth: 0,\n            visibleChildrenCount: 0,\n            visibleChildIndex: -1,\n            collapsible: false,\n            collapsed: false,\n            renderNodeCount: 0,\n            visibility: 1 /* TreeVisibility.Visible */,\n            visible: true,\n            filterData: undefined\n        };\n    }\n    splice(location, deleteCount, toInsert = Iterable.empty(), options = {}) {\n        if (location.length === 0) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        if (options.diffIdentityProvider) {\n            this.spliceSmart(options.diffIdentityProvider, location, deleteCount, toInsert, options);\n        }\n        else {\n            this.spliceSimple(location, deleteCount, toInsert, options);\n        }\n    }\n    spliceSmart(identity, location, deleteCount, toInsertIterable, options, recurseLevels) {\n        var _a;\n        if (toInsertIterable === void 0) { toInsertIterable = Iterable.empty(); }\n        if (recurseLevels === void 0) { recurseLevels = (_a = options.diffDepth) !== null && _a !== void 0 ? _a : 0; }\n        const { parentNode } = this.getParentNodeWithListIndex(location);\n        if (!parentNode.lastDiffIds) {\n            return this.spliceSimple(location, deleteCount, toInsertIterable, options);\n        }\n        const toInsert = [...toInsertIterable];\n        const index = location[location.length - 1];\n        const diff = new LcsDiff({ getElements: () => parentNode.lastDiffIds }, {\n            getElements: () => [\n                ...parentNode.children.slice(0, index),\n                ...toInsert,\n                ...parentNode.children.slice(index + deleteCount),\n            ].map(e => identity.getId(e.element).toString())\n        }).ComputeDiff(false);\n        // if we were given a 'best effort' diff, use default behavior\n        if (diff.quitEarly) {\n            parentNode.lastDiffIds = undefined;\n            return this.spliceSimple(location, deleteCount, toInsert, options);\n        }\n        const locationPrefix = location.slice(0, -1);\n        const recurseSplice = (fromOriginal, fromModified, count) => {\n            if (recurseLevels > 0) {\n                for (let i = 0; i < count; i++) {\n                    fromOriginal--;\n                    fromModified--;\n                    this.spliceSmart(identity, [...locationPrefix, fromOriginal, 0], Number.MAX_SAFE_INTEGER, toInsert[fromModified].children, options, recurseLevels - 1);\n                }\n            }\n        };\n        let lastStartO = Math.min(parentNode.children.length, index + deleteCount);\n        let lastStartM = toInsert.length;\n        for (const change of diff.changes.sort((a, b) => b.originalStart - a.originalStart)) {\n            recurseSplice(lastStartO, lastStartM, lastStartO - (change.originalStart + change.originalLength));\n            lastStartO = change.originalStart;\n            lastStartM = change.modifiedStart - index;\n            this.spliceSimple([...locationPrefix, lastStartO], change.originalLength, Iterable.slice(toInsert, lastStartM, lastStartM + change.modifiedLength), options);\n        }\n        // at this point, startO === startM === count since any remaining prefix should match\n        recurseSplice(lastStartO, lastStartM, lastStartO);\n    }\n    spliceSimple(location, deleteCount, toInsert = Iterable.empty(), { onDidCreateNode, onDidDeleteNode, diffIdentityProvider }) {\n        const { parentNode, listIndex, revealed, visible } = this.getParentNodeWithListIndex(location);\n        const treeListElementsToInsert = [];\n        const nodesToInsertIterator = Iterable.map(toInsert, el => this.createTreeNode(el, parentNode, parentNode.visible ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */, revealed, treeListElementsToInsert, onDidCreateNode));\n        const lastIndex = location[location.length - 1];\n        const lastHadChildren = parentNode.children.length > 0;\n        // figure out what's the visible child start index right before the\n        // splice point\n        let visibleChildStartIndex = 0;\n        for (let i = lastIndex; i >= 0 && i < parentNode.children.length; i--) {\n            const child = parentNode.children[i];\n            if (child.visible) {\n                visibleChildStartIndex = child.visibleChildIndex;\n                break;\n            }\n        }\n        const nodesToInsert = [];\n        let insertedVisibleChildrenCount = 0;\n        let renderNodeCount = 0;\n        for (const child of nodesToInsertIterator) {\n            nodesToInsert.push(child);\n            renderNodeCount += child.renderNodeCount;\n            if (child.visible) {\n                child.visibleChildIndex = visibleChildStartIndex + insertedVisibleChildrenCount++;\n            }\n        }\n        const deletedNodes = splice(parentNode.children, lastIndex, deleteCount, nodesToInsert);\n        if (!diffIdentityProvider) {\n            parentNode.lastDiffIds = undefined;\n        }\n        else if (parentNode.lastDiffIds) {\n            splice(parentNode.lastDiffIds, lastIndex, deleteCount, nodesToInsert.map(n => diffIdentityProvider.getId(n.element).toString()));\n        }\n        else {\n            parentNode.lastDiffIds = parentNode.children.map(n => diffIdentityProvider.getId(n.element).toString());\n        }\n        // figure out what is the count of deleted visible children\n        let deletedVisibleChildrenCount = 0;\n        for (const child of deletedNodes) {\n            if (child.visible) {\n                deletedVisibleChildrenCount++;\n            }\n        }\n        // and adjust for all visible children after the splice point\n        if (deletedVisibleChildrenCount !== 0) {\n            for (let i = lastIndex + nodesToInsert.length; i < parentNode.children.length; i++) {\n                const child = parentNode.children[i];\n                if (child.visible) {\n                    child.visibleChildIndex -= deletedVisibleChildrenCount;\n                }\n            }\n        }\n        // update parent's visible children count\n        parentNode.visibleChildrenCount += insertedVisibleChildrenCount - deletedVisibleChildrenCount;\n        if (revealed && visible) {\n            const visibleDeleteCount = deletedNodes.reduce((r, node) => r + (node.visible ? node.renderNodeCount : 0), 0);\n            this._updateAncestorsRenderNodeCount(parentNode, renderNodeCount - visibleDeleteCount);\n            this.list.splice(listIndex, visibleDeleteCount, treeListElementsToInsert);\n        }\n        if (deletedNodes.length > 0 && onDidDeleteNode) {\n            const visit = (node) => {\n                onDidDeleteNode(node);\n                node.children.forEach(visit);\n            };\n            deletedNodes.forEach(visit);\n        }\n        this._onDidSplice.fire({ insertedNodes: nodesToInsert, deletedNodes });\n        const currentlyHasChildren = parentNode.children.length > 0;\n        if (lastHadChildren !== currentlyHasChildren) {\n            this.setCollapsible(location.slice(0, -1), currentlyHasChildren);\n        }\n        let node = parentNode;\n        while (node) {\n            if (node.visibility === 2 /* TreeVisibility.Recurse */) {\n                // delayed to avoid excessive refiltering, see #135941\n                this.refilterDelayer.trigger(() => this.refilter());\n                break;\n            }\n            node = node.parent;\n        }\n    }\n    rerender(location) {\n        if (location.length === 0) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        const { node, listIndex, revealed } = this.getTreeNodeWithListIndex(location);\n        if (node.visible && revealed) {\n            this.list.splice(listIndex, 1, [node]);\n        }\n    }\n    has(location) {\n        return this.hasTreeNode(location);\n    }\n    getListIndex(location) {\n        const { listIndex, visible, revealed } = this.getTreeNodeWithListIndex(location);\n        return visible && revealed ? listIndex : -1;\n    }\n    getListRenderCount(location) {\n        return this.getTreeNode(location).renderNodeCount;\n    }\n    isCollapsible(location) {\n        return this.getTreeNode(location).collapsible;\n    }\n    setCollapsible(location, collapsible) {\n        const node = this.getTreeNode(location);\n        if (typeof collapsible === 'undefined') {\n            collapsible = !node.collapsible;\n        }\n        const update = { collapsible };\n        return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n    }\n    isCollapsed(location) {\n        return this.getTreeNode(location).collapsed;\n    }\n    setCollapsed(location, collapsed, recursive) {\n        const node = this.getTreeNode(location);\n        if (typeof collapsed === 'undefined') {\n            collapsed = !node.collapsed;\n        }\n        const update = { collapsed, recursive: recursive || false };\n        return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n    }\n    _setCollapseState(location, update) {\n        const { node, listIndex, revealed } = this.getTreeNodeWithListIndex(location);\n        const result = this._setListNodeCollapseState(node, listIndex, revealed, update);\n        if (node !== this.root && this.autoExpandSingleChildren && result && !isCollapsibleStateUpdate(update) && node.collapsible && !node.collapsed && !update.recursive) {\n            let onlyVisibleChildIndex = -1;\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                if (child.visible) {\n                    if (onlyVisibleChildIndex > -1) {\n                        onlyVisibleChildIndex = -1;\n                        break;\n                    }\n                    else {\n                        onlyVisibleChildIndex = i;\n                    }\n                }\n            }\n            if (onlyVisibleChildIndex > -1) {\n                this._setCollapseState([...location, onlyVisibleChildIndex], update);\n            }\n        }\n        return result;\n    }\n    _setListNodeCollapseState(node, listIndex, revealed, update) {\n        const result = this._setNodeCollapseState(node, update, false);\n        if (!revealed || !node.visible || !result) {\n            return result;\n        }\n        const previousRenderNodeCount = node.renderNodeCount;\n        const toInsert = this.updateNodeAfterCollapseChange(node);\n        const deleteCount = previousRenderNodeCount - (listIndex === -1 ? 0 : 1);\n        this.list.splice(listIndex + 1, deleteCount, toInsert.slice(1));\n        return result;\n    }\n    _setNodeCollapseState(node, update, deep) {\n        let result;\n        if (node === this.root) {\n            result = false;\n        }\n        else {\n            if (isCollapsibleStateUpdate(update)) {\n                result = node.collapsible !== update.collapsible;\n                node.collapsible = update.collapsible;\n            }\n            else if (!node.collapsible) {\n                result = false;\n            }\n            else {\n                result = node.collapsed !== update.collapsed;\n                node.collapsed = update.collapsed;\n            }\n            if (result) {\n                this._onDidChangeCollapseState.fire({ node, deep });\n            }\n        }\n        if (!isCollapsibleStateUpdate(update) && update.recursive) {\n            for (const child of node.children) {\n                result = this._setNodeCollapseState(child, update, true) || result;\n            }\n        }\n        return result;\n    }\n    expandTo(location) {\n        this.eventBufferer.bufferEvents(() => {\n            let node = this.getTreeNode(location);\n            while (node.parent) {\n                node = node.parent;\n                location = location.slice(0, location.length - 1);\n                if (node.collapsed) {\n                    this._setCollapseState(location, { collapsed: false, recursive: false });\n                }\n            }\n        });\n    }\n    refilter() {\n        const previousRenderNodeCount = this.root.renderNodeCount;\n        const toInsert = this.updateNodeAfterFilterChange(this.root);\n        this.list.splice(0, previousRenderNodeCount, toInsert);\n        this.refilterDelayer.cancel();\n    }\n    createTreeNode(treeElement, parent, parentVisibility, revealed, treeListElements, onDidCreateNode) {\n        const node = {\n            parent,\n            element: treeElement.element,\n            children: [],\n            depth: parent.depth + 1,\n            visibleChildrenCount: 0,\n            visibleChildIndex: -1,\n            collapsible: typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : (typeof treeElement.collapsed !== 'undefined'),\n            collapsed: typeof treeElement.collapsed === 'undefined' ? this.collapseByDefault : treeElement.collapsed,\n            renderNodeCount: 1,\n            visibility: 1 /* TreeVisibility.Visible */,\n            visible: true,\n            filterData: undefined\n        };\n        const visibility = this._filterNode(node, parentVisibility);\n        node.visibility = visibility;\n        if (revealed) {\n            treeListElements.push(node);\n        }\n        const childElements = treeElement.children || Iterable.empty();\n        const childRevealed = revealed && visibility !== 0 /* TreeVisibility.Hidden */ && !node.collapsed;\n        let visibleChildrenCount = 0;\n        let renderNodeCount = 1;\n        for (const el of childElements) {\n            const child = this.createTreeNode(el, node, visibility, childRevealed, treeListElements, onDidCreateNode);\n            node.children.push(child);\n            renderNodeCount += child.renderNodeCount;\n            if (child.visible) {\n                child.visibleChildIndex = visibleChildrenCount++;\n            }\n        }\n        node.collapsible = node.collapsible || node.children.length > 0;\n        node.visibleChildrenCount = visibleChildrenCount;\n        node.visible = visibility === 2 /* TreeVisibility.Recurse */ ? visibleChildrenCount > 0 : (visibility === 1 /* TreeVisibility.Visible */);\n        if (!node.visible) {\n            node.renderNodeCount = 0;\n            if (revealed) {\n                treeListElements.pop();\n            }\n        }\n        else if (!node.collapsed) {\n            node.renderNodeCount = renderNodeCount;\n        }\n        onDidCreateNode === null || onDidCreateNode === void 0 ? void 0 : onDidCreateNode(node);\n        return node;\n    }\n    updateNodeAfterCollapseChange(node) {\n        const previousRenderNodeCount = node.renderNodeCount;\n        const result = [];\n        this._updateNodeAfterCollapseChange(node, result);\n        this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n        return result;\n    }\n    _updateNodeAfterCollapseChange(node, result) {\n        if (node.visible === false) {\n            return 0;\n        }\n        result.push(node);\n        node.renderNodeCount = 1;\n        if (!node.collapsed) {\n            for (const child of node.children) {\n                node.renderNodeCount += this._updateNodeAfterCollapseChange(child, result);\n            }\n        }\n        this._onDidChangeRenderNodeCount.fire(node);\n        return node.renderNodeCount;\n    }\n    updateNodeAfterFilterChange(node) {\n        const previousRenderNodeCount = node.renderNodeCount;\n        const result = [];\n        this._updateNodeAfterFilterChange(node, node.visible ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */, result);\n        this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n        return result;\n    }\n    _updateNodeAfterFilterChange(node, parentVisibility, result, revealed = true) {\n        let visibility;\n        if (node !== this.root) {\n            visibility = this._filterNode(node, parentVisibility);\n            if (visibility === 0 /* TreeVisibility.Hidden */) {\n                node.visible = false;\n                node.renderNodeCount = 0;\n                return false;\n            }\n            if (revealed) {\n                result.push(node);\n            }\n        }\n        const resultStartLength = result.length;\n        node.renderNodeCount = node === this.root ? 0 : 1;\n        let hasVisibleDescendants = false;\n        if (!node.collapsed || visibility !== 0 /* TreeVisibility.Hidden */) {\n            let visibleChildIndex = 0;\n            for (const child of node.children) {\n                hasVisibleDescendants = this._updateNodeAfterFilterChange(child, visibility, result, revealed && !node.collapsed) || hasVisibleDescendants;\n                if (child.visible) {\n                    child.visibleChildIndex = visibleChildIndex++;\n                }\n            }\n            node.visibleChildrenCount = visibleChildIndex;\n        }\n        else {\n            node.visibleChildrenCount = 0;\n        }\n        if (node !== this.root) {\n            node.visible = visibility === 2 /* TreeVisibility.Recurse */ ? hasVisibleDescendants : (visibility === 1 /* TreeVisibility.Visible */);\n            node.visibility = visibility;\n        }\n        if (!node.visible) {\n            node.renderNodeCount = 0;\n            if (revealed) {\n                result.pop();\n            }\n        }\n        else if (!node.collapsed) {\n            node.renderNodeCount += result.length - resultStartLength;\n        }\n        this._onDidChangeRenderNodeCount.fire(node);\n        return node.visible;\n    }\n    _updateAncestorsRenderNodeCount(node, diff) {\n        if (diff === 0) {\n            return;\n        }\n        while (node) {\n            node.renderNodeCount += diff;\n            this._onDidChangeRenderNodeCount.fire(node);\n            node = node.parent;\n        }\n    }\n    _filterNode(node, parentVisibility) {\n        const result = this.filter ? this.filter.filter(node.element, parentVisibility) : 1 /* TreeVisibility.Visible */;\n        if (typeof result === 'boolean') {\n            node.filterData = undefined;\n            return result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n        }\n        else if (isFilterResult(result)) {\n            node.filterData = result.data;\n            return getVisibleState(result.visibility);\n        }\n        else {\n            node.filterData = undefined;\n            return getVisibleState(result);\n        }\n    }\n    // cheap\n    hasTreeNode(location, node = this.root) {\n        if (!location || location.length === 0) {\n            return true;\n        }\n        const [index, ...rest] = location;\n        if (index < 0 || index > node.children.length) {\n            return false;\n        }\n        return this.hasTreeNode(rest, node.children[index]);\n    }\n    // cheap\n    getTreeNode(location, node = this.root) {\n        if (!location || location.length === 0) {\n            return node;\n        }\n        const [index, ...rest] = location;\n        if (index < 0 || index > node.children.length) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        return this.getTreeNode(rest, node.children[index]);\n    }\n    // expensive\n    getTreeNodeWithListIndex(location) {\n        if (location.length === 0) {\n            return { node: this.root, listIndex: -1, revealed: true, visible: false };\n        }\n        const { parentNode, listIndex, revealed, visible } = this.getParentNodeWithListIndex(location);\n        const index = location[location.length - 1];\n        if (index < 0 || index > parentNode.children.length) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        const node = parentNode.children[index];\n        return { node, listIndex, revealed, visible: visible && node.visible };\n    }\n    getParentNodeWithListIndex(location, node = this.root, listIndex = 0, revealed = true, visible = true) {\n        const [index, ...rest] = location;\n        if (index < 0 || index > node.children.length) {\n            throw new TreeError(this.user, 'Invalid tree location');\n        }\n        // TODO@joao perf!\n        for (let i = 0; i < index; i++) {\n            listIndex += node.children[i].renderNodeCount;\n        }\n        revealed = revealed && !node.collapsed;\n        visible = visible && node.visible;\n        if (rest.length === 0) {\n            return { parentNode: node, listIndex, revealed, visible };\n        }\n        return this.getParentNodeWithListIndex(rest, node.children[index], listIndex + 1, revealed, visible);\n    }\n    getNode(location = []) {\n        return this.getTreeNode(location);\n    }\n    // TODO@joao perf!\n    getNodeLocation(node) {\n        const location = [];\n        let indexTreeNode = node; // typing woes\n        while (indexTreeNode.parent) {\n            location.push(indexTreeNode.parent.children.indexOf(indexTreeNode));\n            indexTreeNode = indexTreeNode.parent;\n        }\n        return location.reverse();\n    }\n    getParentNodeLocation(location) {\n        if (location.length === 0) {\n            return undefined;\n        }\n        else if (location.length === 1) {\n            return [];\n        }\n        else {\n            return tail2(location)[0];\n        }\n    }\n    getFirstElementChild(location) {\n        const node = this.getTreeNode(location);\n        if (node.children.length === 0) {\n            return undefined;\n        }\n        return node.children[0].element;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append, clearNode, createStyleSheet, getWindow, h, hasParentWithClass } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { FindInput } from '../findinput/findInput.js';\nimport { unthemedInboxStyles } from '../inputbox/inputBox.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { isActionItem, isButton, isInputElement, isMonacoCustomToggle, isMonacoEditor, isStickyScrollElement, List, MouseController } from '../list/listWidget.js';\nimport { Toggle, unthemedToggleStyles } from '../toggle/toggle.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { TreeMouseEventTarget } from './tree.js';\nimport { Action } from '../../../common/actions.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { Delayer, disposableTimeout, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { SetMap } from '../../../common/map.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { Disposable, DisposableStore, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { isNumber } from '../../../common/types.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\nclass TreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new TreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass TreeNodeListDragAndDrop {\n    constructor(modelProvider, dnd) {\n        this.modelProvider = modelProvider;\n        this.dnd = dnd;\n        this.autoExpandDisposable = Disposable.None;\n        this.disposables = new DisposableStore();\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n        const result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n        const didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n        if (didChangeAutoExpandNode) {\n            this.autoExpandDisposable.dispose();\n            this.autoExpandNode = targetNode;\n        }\n        if (typeof targetNode === 'undefined') {\n            return result;\n        }\n        if (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n            this.autoExpandDisposable = disposableTimeout(() => {\n                const model = this.modelProvider();\n                const ref = model.getNodeLocation(targetNode);\n                if (model.isCollapsed(ref)) {\n                    model.setCollapsed(ref, false);\n                }\n                this.autoExpandNode = undefined;\n            }, 500, this.disposables);\n        }\n        if (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n            if (!raw) {\n                const accept = typeof result === 'boolean' ? result : result.accept;\n                const effect = typeof result === 'boolean' ? undefined : result.effect;\n                return { accept, effect, feedback: [targetIndex] };\n            }\n            return result;\n        }\n        if (result.bubble === 1 /* TreeDragOverBubble.Up */) {\n            const model = this.modelProvider();\n            const ref = model.getNodeLocation(targetNode);\n            const parentRef = model.getParentNodeLocation(ref);\n            const parentNode = model.getNode(parentRef);\n            const parentIndex = parentRef && model.getListIndex(parentRef);\n            return this.onDragOver(data, parentNode, parentIndex, originalEvent, false);\n        }\n        const model = this.modelProvider();\n        const ref = model.getNodeLocation(targetNode);\n        const start = model.getListIndex(ref);\n        const length = model.getListRenderCount(ref);\n        return { ...result, feedback: range(start, start + length) };\n    }\n    drop(data, targetNode, targetIndex, originalEvent) {\n        this.autoExpandDisposable.dispose();\n        this.autoExpandNode = undefined;\n        this.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n    }\n    dispose() {\n        this.disposables.dispose();\n        this.dnd.dispose();\n    }\n}\nfunction asListOptions(modelProvider, options) {\n    return options && {\n        ...options,\n        identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        },\n        dnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd),\n        multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent({ ...e, element: e.element });\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent({ ...e, element: e.element });\n            }\n        },\n        accessibilityProvider: options.accessibilityProvider && {\n            ...options.accessibilityProvider,\n            getSetSize(node) {\n                const model = modelProvider();\n                const ref = model.getNodeLocation(node);\n                const parentRef = model.getParentNodeLocation(ref);\n                const parentNode = model.getNode(parentRef);\n                return parentNode.visibleChildrenCount;\n            },\n            getPosInSet(node) {\n                return node.visibleChildIndex + 1;\n            },\n            isChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? (node) => {\n                return options.accessibilityProvider.isChecked(node.element);\n            } : undefined,\n            getRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? (node) => {\n                return options.accessibilityProvider.getRole(node.element);\n            } : () => 'treeitem',\n            getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            },\n            getWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n            getAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? (node) => options.accessibilityProvider.getAriaLevel(node.element) : (node) => {\n                return node.depth;\n            },\n            getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            })\n        },\n        keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n            ...options.keyboardNavigationLabelProvider,\n            getKeyboardNavigationLabel(node) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(node.element);\n            }\n        }\n    };\n}\nexport class ComposedTreeDelegate {\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    getHeight(element) {\n        return this.delegate.getHeight(element.element);\n    }\n    getTemplateId(element) {\n        return this.delegate.getTemplateId(element.element);\n    }\n    hasDynamicHeight(element) {\n        return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n    }\n    setDynamicHeight(element, height) {\n        var _a, _b;\n        (_b = (_a = this.delegate).setDynamicHeight) === null || _b === void 0 ? void 0 : _b.call(_a, element.element, height);\n    }\n}\nexport var RenderIndentGuides;\n(function (RenderIndentGuides) {\n    RenderIndentGuides[\"None\"] = \"none\";\n    RenderIndentGuides[\"OnHover\"] = \"onHover\";\n    RenderIndentGuides[\"Always\"] = \"always\";\n})(RenderIndentGuides || (RenderIndentGuides = {}));\nclass EventCollection {\n    get elements() {\n        return this._elements;\n    }\n    constructor(onDidChange, _elements = []) {\n        this._elements = _elements;\n        this.disposables = new DisposableStore();\n        this.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements, this.disposables);\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n}\nexport class TreeRenderer {\n    constructor(renderer, modelProvider, onDidChangeCollapseState, activeNodes, renderedIndentGuides, options = {}) {\n        var _a;\n        this.renderer = renderer;\n        this.modelProvider = modelProvider;\n        this.activeNodes = activeNodes;\n        this.renderedIndentGuides = renderedIndentGuides;\n        this.renderedElements = new Map();\n        this.renderedNodes = new Map();\n        this.indent = TreeRenderer.DefaultIndent;\n        this.hideTwistiesOfChildlessElements = false;\n        this.shouldRenderIndentGuides = false;\n        this.activeIndentNodes = new Set();\n        this.indentGuidesDisposable = Disposable.None;\n        this.disposables = new DisposableStore();\n        this.templateId = renderer.templateId;\n        this.updateOptions(options);\n        Event.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n        (_a = renderer.onDidChangeTwistieState) === null || _a === void 0 ? void 0 : _a.call(renderer, this.onDidChangeTwistieState, this, this.disposables);\n    }\n    updateOptions(options = {}) {\n        if (typeof options.indent !== 'undefined') {\n            const indent = clamp(options.indent, 0, 40);\n            if (indent !== this.indent) {\n                this.indent = indent;\n                for (const [node, templateData] of this.renderedNodes) {\n                    this.renderTreeElement(node, templateData);\n                }\n            }\n        }\n        if (typeof options.renderIndentGuides !== 'undefined') {\n            const shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n            if (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n                this.shouldRenderIndentGuides = shouldRenderIndentGuides;\n                for (const [node, templateData] of this.renderedNodes) {\n                    this._renderIndentGuides(node, templateData);\n                }\n                this.indentGuidesDisposable.dispose();\n                if (shouldRenderIndentGuides) {\n                    const disposables = new DisposableStore();\n                    this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n                    this.indentGuidesDisposable = disposables;\n                    this._onDidChangeActiveNodes(this.activeNodes.elements);\n                }\n            }\n        }\n        if (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n            this.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n        }\n    }\n    renderTemplate(container) {\n        const el = append(container, $('.monaco-tl-row'));\n        const indent = append(el, $('.monaco-tl-indent'));\n        const twistie = append(el, $('.monaco-tl-twistie'));\n        const contents = append(el, $('.monaco-tl-contents'));\n        const templateData = this.renderer.renderTemplate(contents);\n        return { container, indent, twistie, indentGuidesDisposable: Disposable.None, templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderedNodes.set(node, templateData);\n        this.renderedElements.set(node.element, node);\n        this.renderTreeElement(node, templateData);\n        this.renderer.renderElement(node, index, templateData.templateData, height);\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        templateData.indentGuidesDisposable.dispose();\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, node, index, templateData.templateData, height);\n        if (typeof height === 'number') {\n            this.renderedNodes.delete(node);\n            this.renderedElements.delete(node.element);\n        }\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    onDidChangeTwistieState(element) {\n        const node = this.renderedElements.get(element);\n        if (!node) {\n            return;\n        }\n        this.onDidChangeNodeTwistieState(node);\n    }\n    onDidChangeNodeTwistieState(node) {\n        const templateData = this.renderedNodes.get(node);\n        if (!templateData) {\n            return;\n        }\n        this._onDidChangeActiveNodes(this.activeNodes.elements);\n        this.renderTreeElement(node, templateData);\n    }\n    renderTreeElement(node, templateData) {\n        const indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n        templateData.twistie.style.paddingLeft = `${indent}px`;\n        templateData.indent.style.width = `${indent + this.indent - 16}px`;\n        if (node.collapsible) {\n            templateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n        }\n        else {\n            templateData.container.removeAttribute('aria-expanded');\n        }\n        templateData.twistie.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n        let twistieRendered = false;\n        if (this.renderer.renderTwistie) {\n            twistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n        }\n        if (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n            if (!twistieRendered) {\n                templateData.twistie.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n            }\n            templateData.twistie.classList.add('collapsible');\n            templateData.twistie.classList.toggle('collapsed', node.collapsed);\n        }\n        else {\n            templateData.twistie.classList.remove('collapsible', 'collapsed');\n        }\n        this._renderIndentGuides(node, templateData);\n    }\n    _renderIndentGuides(node, templateData) {\n        clearNode(templateData.indent);\n        templateData.indentGuidesDisposable.dispose();\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const disposableStore = new DisposableStore();\n        const model = this.modelProvider();\n        while (true) {\n            const ref = model.getNodeLocation(node);\n            const parentRef = model.getParentNodeLocation(ref);\n            if (!parentRef) {\n                break;\n            }\n            const parent = model.getNode(parentRef);\n            const guide = $('.indent-guide', { style: `width: ${this.indent}px` });\n            if (this.activeIndentNodes.has(parent)) {\n                guide.classList.add('active');\n            }\n            if (templateData.indent.childElementCount === 0) {\n                templateData.indent.appendChild(guide);\n            }\n            else {\n                templateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n            }\n            this.renderedIndentGuides.add(parent, guide);\n            disposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n            node = parent;\n        }\n        templateData.indentGuidesDisposable = disposableStore;\n    }\n    _onDidChangeActiveNodes(nodes) {\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const set = new Set();\n        const model = this.modelProvider();\n        nodes.forEach(node => {\n            const ref = model.getNodeLocation(node);\n            try {\n                const parentRef = model.getParentNodeLocation(ref);\n                if (node.collapsible && node.children.length > 0 && !node.collapsed) {\n                    set.add(node);\n                }\n                else if (parentRef) {\n                    set.add(model.getNode(parentRef));\n                }\n            }\n            catch (_a) {\n                // noop\n            }\n        });\n        this.activeIndentNodes.forEach(node => {\n            if (!set.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n            }\n        });\n        set.forEach(node => {\n            if (!this.activeIndentNodes.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n            }\n        });\n        this.activeIndentNodes = set;\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.renderedElements.clear();\n        this.indentGuidesDisposable.dispose();\n        dispose(this.disposables);\n    }\n}\nTreeRenderer.DefaultIndent = 8;\nclass FindFilter {\n    get totalCount() { return this._totalCount; }\n    get matchCount() { return this._matchCount; }\n    constructor(tree, keyboardNavigationLabelProvider, _filter) {\n        this.tree = tree;\n        this.keyboardNavigationLabelProvider = keyboardNavigationLabelProvider;\n        this._filter = _filter;\n        this._totalCount = 0;\n        this._matchCount = 0;\n        this._pattern = '';\n        this._lowercasePattern = '';\n        this.disposables = new DisposableStore();\n        tree.onWillRefilter(this.reset, this, this.disposables);\n    }\n    filter(element, parentVisibility) {\n        let visibility = 1 /* TreeVisibility.Visible */;\n        if (this._filter) {\n            const result = this._filter.filter(element, parentVisibility);\n            if (typeof result === 'boolean') {\n                visibility = result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n            }\n            else if (isFilterResult(result)) {\n                visibility = getVisibleState(result.visibility);\n            }\n            else {\n                visibility = result;\n            }\n            if (visibility === 0 /* TreeVisibility.Hidden */) {\n                return false;\n            }\n        }\n        this._totalCount++;\n        if (!this._pattern) {\n            this._matchCount++;\n            return { data: FuzzyScore.Default, visibility };\n        }\n        const label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n        const labels = Array.isArray(label) ? label : [label];\n        for (const l of labels) {\n            const labelStr = l && l.toString();\n            if (typeof labelStr === 'undefined') {\n                return { data: FuzzyScore.Default, visibility };\n            }\n            let score;\n            if (this.tree.findMatchType === TreeFindMatchType.Contiguous) {\n                const index = labelStr.toLowerCase().indexOf(this._lowercasePattern);\n                if (index > -1) {\n                    score = [Number.MAX_SAFE_INTEGER, 0];\n                    for (let i = this._lowercasePattern.length; i > 0; i--) {\n                        score.push(index + i - 1);\n                    }\n                }\n            }\n            else {\n                score = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, { firstMatchCanBeWeak: true, boostFullMatch: true });\n            }\n            if (score) {\n                this._matchCount++;\n                return labels.length === 1 ?\n                    { data: score, visibility } :\n                    { data: { label: labelStr, score: score }, visibility };\n            }\n        }\n        if (this.tree.findMode === TreeFindMode.Filter) {\n            if (typeof this.tree.options.defaultFindVisibility === 'number') {\n                return this.tree.options.defaultFindVisibility;\n            }\n            else if (this.tree.options.defaultFindVisibility) {\n                return this.tree.options.defaultFindVisibility(element);\n            }\n            else {\n                return 2 /* TreeVisibility.Recurse */;\n            }\n        }\n        else {\n            return { data: FuzzyScore.Default, visibility };\n        }\n    }\n    reset() {\n        this._totalCount = 0;\n        this._matchCount = 0;\n    }\n    dispose() {\n        dispose(this.disposables);\n    }\n}\nexport class ModeToggle extends Toggle {\n    constructor(opts) {\n        var _a;\n        super({\n            icon: Codicon.listFilter,\n            title: localize('filter', \"Filter\"),\n            isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n            inputActiveOptionBorder: opts.inputActiveOptionBorder,\n            inputActiveOptionForeground: opts.inputActiveOptionForeground,\n            inputActiveOptionBackground: opts.inputActiveOptionBackground\n        });\n    }\n}\nexport class FuzzyToggle extends Toggle {\n    constructor(opts) {\n        var _a;\n        super({\n            icon: Codicon.searchFuzzy,\n            title: localize('fuzzySearch', \"Fuzzy Match\"),\n            isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n            inputActiveOptionBorder: opts.inputActiveOptionBorder,\n            inputActiveOptionForeground: opts.inputActiveOptionForeground,\n            inputActiveOptionBackground: opts.inputActiveOptionBackground\n        });\n    }\n}\nconst unthemedFindWidgetStyles = {\n    inputBoxStyles: unthemedInboxStyles,\n    toggleStyles: unthemedToggleStyles,\n    listFilterWidgetBackground: undefined,\n    listFilterWidgetNoMatchesOutline: undefined,\n    listFilterWidgetOutline: undefined,\n    listFilterWidgetShadow: undefined\n};\nexport var TreeFindMode;\n(function (TreeFindMode) {\n    TreeFindMode[TreeFindMode[\"Highlight\"] = 0] = \"Highlight\";\n    TreeFindMode[TreeFindMode[\"Filter\"] = 1] = \"Filter\";\n})(TreeFindMode || (TreeFindMode = {}));\nexport var TreeFindMatchType;\n(function (TreeFindMatchType) {\n    TreeFindMatchType[TreeFindMatchType[\"Fuzzy\"] = 0] = \"Fuzzy\";\n    TreeFindMatchType[TreeFindMatchType[\"Contiguous\"] = 1] = \"Contiguous\";\n})(TreeFindMatchType || (TreeFindMatchType = {}));\nclass FindWidget extends Disposable {\n    set mode(mode) {\n        this.modeToggle.checked = mode === TreeFindMode.Filter;\n        this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', \"Type to filter\") : localize('type to search', \"Type to search\"));\n    }\n    set matchType(matchType) {\n        this.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;\n    }\n    constructor(container, tree, contextViewProvider, mode, matchType, options) {\n        var _a;\n        super();\n        this.tree = tree;\n        this.elements = h('.monaco-tree-type-filter', [\n            h('.monaco-tree-type-filter-grab.codicon.codicon-debug-gripper@grab', { tabIndex: 0 }),\n            h('.monaco-tree-type-filter-input@findInput'),\n            h('.monaco-tree-type-filter-actionbar@actionbar'),\n        ]);\n        this.width = 0;\n        this.right = 0;\n        this.top = 0;\n        this._onDidDisable = new Emitter();\n        container.appendChild(this.elements.root);\n        this._register(toDisposable(() => container.removeChild(this.elements.root)));\n        const styles = (_a = options === null || options === void 0 ? void 0 : options.styles) !== null && _a !== void 0 ? _a : unthemedFindWidgetStyles;\n        if (styles.listFilterWidgetBackground) {\n            this.elements.root.style.backgroundColor = styles.listFilterWidgetBackground;\n        }\n        if (styles.listFilterWidgetShadow) {\n            this.elements.root.style.boxShadow = `0 0 8px 2px ${styles.listFilterWidgetShadow}`;\n        }\n        this.modeToggle = this._register(new ModeToggle({ ...styles.toggleStyles, isChecked: mode === TreeFindMode.Filter }));\n        this.matchTypeToggle = this._register(new FuzzyToggle({ ...styles.toggleStyles, isChecked: matchType === TreeFindMatchType.Fuzzy }));\n        this.onDidChangeMode = Event.map(this.modeToggle.onChange, () => this.modeToggle.checked ? TreeFindMode.Filter : TreeFindMode.Highlight, this._store);\n        this.onDidChangeMatchType = Event.map(this.matchTypeToggle.onChange, () => this.matchTypeToggle.checked ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous, this._store);\n        this.findInput = this._register(new FindInput(this.elements.findInput, contextViewProvider, {\n            label: localize('type to search', \"Type to search\"),\n            additionalToggles: [this.modeToggle, this.matchTypeToggle],\n            showCommonFindToggles: false,\n            inputBoxStyles: styles.inputBoxStyles,\n            toggleStyles: styles.toggleStyles,\n            history: options === null || options === void 0 ? void 0 : options.history\n        }));\n        this.actionbar = this._register(new ActionBar(this.elements.actionbar));\n        this.mode = mode;\n        const emitter = this._register(new DomEmitter(this.findInput.inputBox.inputElement, 'keydown'));\n        const onKeyDown = Event.chain(emitter.event, $ => $.map(e => new StandardKeyboardEvent(e)));\n        this._register(onKeyDown((e) => {\n            // Using equals() so we reserve modified keys for future use\n            if (e.equals(3 /* KeyCode.Enter */)) {\n                // This is the only keyboard way to return to the tree from a history item that isn't the last one\n                e.preventDefault();\n                e.stopPropagation();\n                this.findInput.inputBox.addToHistory();\n                this.tree.domFocus();\n                return;\n            }\n            if (e.equals(18 /* KeyCode.DownArrow */)) {\n                e.preventDefault();\n                e.stopPropagation();\n                if (this.findInput.inputBox.isAtLastInHistory() || this.findInput.inputBox.isNowhereInHistory()) {\n                    // Retain original pre-history DownArrow behavior\n                    this.findInput.inputBox.addToHistory();\n                    this.tree.domFocus();\n                }\n                else {\n                    // Downward through history\n                    this.findInput.inputBox.showNextValue();\n                }\n                return;\n            }\n            if (e.equals(16 /* KeyCode.UpArrow */)) {\n                e.preventDefault();\n                e.stopPropagation();\n                // Upward through history\n                this.findInput.inputBox.showPreviousValue();\n                return;\n            }\n        }));\n        const closeAction = this._register(new Action('close', localize('close', \"Close\"), 'codicon codicon-close', true, () => this.dispose()));\n        this.actionbar.push(closeAction, { icon: true, label: false });\n        const onGrabMouseDown = this._register(new DomEmitter(this.elements.grab, 'mousedown'));\n        this._register(onGrabMouseDown.event(e => {\n            const disposables = new DisposableStore();\n            const onWindowMouseMove = disposables.add(new DomEmitter(getWindow(e), 'mousemove'));\n            const onWindowMouseUp = disposables.add(new DomEmitter(getWindow(e), 'mouseup'));\n            const startRight = this.right;\n            const startX = e.pageX;\n            const startTop = this.top;\n            const startY = e.pageY;\n            this.elements.grab.classList.add('grabbing');\n            const transition = this.elements.root.style.transition;\n            this.elements.root.style.transition = 'unset';\n            const update = (e) => {\n                const deltaX = e.pageX - startX;\n                this.right = startRight - deltaX;\n                const deltaY = e.pageY - startY;\n                this.top = startTop + deltaY;\n                this.layout();\n            };\n            disposables.add(onWindowMouseMove.event(update));\n            disposables.add(onWindowMouseUp.event(e => {\n                update(e);\n                this.elements.grab.classList.remove('grabbing');\n                this.elements.root.style.transition = transition;\n                disposables.dispose();\n            }));\n        }));\n        const onGrabKeyDown = Event.chain(this._register(new DomEmitter(this.elements.grab, 'keydown')).event, $ => $.map(e => new StandardKeyboardEvent(e)));\n        this._register(onGrabKeyDown((e) => {\n            let right;\n            let top;\n            if (e.keyCode === 15 /* KeyCode.LeftArrow */) {\n                right = Number.POSITIVE_INFINITY;\n            }\n            else if (e.keyCode === 17 /* KeyCode.RightArrow */) {\n                right = 0;\n            }\n            else if (e.keyCode === 10 /* KeyCode.Space */) {\n                right = this.right === 0 ? Number.POSITIVE_INFINITY : 0;\n            }\n            if (e.keyCode === 16 /* KeyCode.UpArrow */) {\n                top = 0;\n            }\n            else if (e.keyCode === 18 /* KeyCode.DownArrow */) {\n                top = Number.POSITIVE_INFINITY;\n            }\n            if (right !== undefined) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.right = right;\n                this.layout();\n            }\n            if (top !== undefined) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.top = top;\n                const transition = this.elements.root.style.transition;\n                this.elements.root.style.transition = 'unset';\n                this.layout();\n                setTimeout(() => {\n                    this.elements.root.style.transition = transition;\n                }, 0);\n            }\n        }));\n        this.onDidChangeValue = this.findInput.onDidChange;\n    }\n    layout(width = this.width) {\n        this.width = width;\n        this.right = clamp(this.right, 0, Math.max(0, width - 212));\n        this.elements.root.style.right = `${this.right}px`;\n        this.top = clamp(this.top, 0, 24);\n        this.elements.root.style.top = `${this.top}px`;\n    }\n    showMessage(message) {\n        this.findInput.showMessage(message);\n    }\n    clearMessage() {\n        this.findInput.clearMessage();\n    }\n    async dispose() {\n        this._onDidDisable.fire();\n        this.elements.root.classList.add('disabled');\n        await timeout(300);\n        super.dispose();\n    }\n}\nclass FindController {\n    get pattern() { return this._pattern; }\n    get mode() { return this._mode; }\n    set mode(mode) {\n        if (mode === this._mode) {\n            return;\n        }\n        this._mode = mode;\n        if (this.widget) {\n            this.widget.mode = this._mode;\n        }\n        this.tree.refilter();\n        this.render();\n        this._onDidChangeMode.fire(mode);\n    }\n    get matchType() { return this._matchType; }\n    set matchType(matchType) {\n        if (matchType === this._matchType) {\n            return;\n        }\n        this._matchType = matchType;\n        if (this.widget) {\n            this.widget.matchType = this._matchType;\n        }\n        this.tree.refilter();\n        this.render();\n        this._onDidChangeMatchType.fire(matchType);\n    }\n    constructor(tree, model, view, filter, contextViewProvider, options = {}) {\n        var _a, _b;\n        this.tree = tree;\n        this.view = view;\n        this.filter = filter;\n        this.contextViewProvider = contextViewProvider;\n        this.options = options;\n        this._pattern = '';\n        this.width = 0;\n        this._onDidChangeMode = new Emitter();\n        this.onDidChangeMode = this._onDidChangeMode.event;\n        this._onDidChangeMatchType = new Emitter();\n        this.onDidChangeMatchType = this._onDidChangeMatchType.event;\n        this._onDidChangePattern = new Emitter();\n        this._onDidChangeOpenState = new Emitter();\n        this.onDidChangeOpenState = this._onDidChangeOpenState.event;\n        this.enabledDisposables = new DisposableStore();\n        this.disposables = new DisposableStore();\n        this._mode = (_a = tree.options.defaultFindMode) !== null && _a !== void 0 ? _a : TreeFindMode.Highlight;\n        this._matchType = (_b = tree.options.defaultFindMatchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n        model.onDidSplice(this.onDidSpliceModel, this, this.disposables);\n    }\n    updateOptions(optionsUpdate = {}) {\n        if (optionsUpdate.defaultFindMode !== undefined) {\n            this.mode = optionsUpdate.defaultFindMode;\n        }\n        if (optionsUpdate.defaultFindMatchType !== undefined) {\n            this.matchType = optionsUpdate.defaultFindMatchType;\n        }\n    }\n    onDidSpliceModel() {\n        if (!this.widget || this.pattern.length === 0) {\n            return;\n        }\n        this.tree.refilter();\n        this.render();\n    }\n    render() {\n        var _a, _b, _c, _d;\n        const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n        if (this.pattern && noMatches) {\n            if ((_a = this.tree.options.showNotFoundMessage) !== null && _a !== void 0 ? _a : true) {\n                (_b = this.widget) === null || _b === void 0 ? void 0 : _b.showMessage({ type: 2 /* MessageType.WARNING */, content: localize('not found', \"No elements found.\") });\n            }\n            else {\n                (_c = this.widget) === null || _c === void 0 ? void 0 : _c.showMessage({ type: 2 /* MessageType.WARNING */ });\n            }\n        }\n        else {\n            (_d = this.widget) === null || _d === void 0 ? void 0 : _d.clearMessage();\n        }\n    }\n    shouldAllowFocus(node) {\n        if (!this.widget || !this.pattern || this._mode === TreeFindMode.Filter) {\n            return true;\n        }\n        if (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n            return true;\n        }\n        return !FuzzyScore.isDefault(node.filterData);\n    }\n    layout(width) {\n        var _a;\n        this.width = width;\n        (_a = this.widget) === null || _a === void 0 ? void 0 : _a.layout(width);\n    }\n    dispose() {\n        this._history = undefined;\n        this._onDidChangePattern.dispose();\n        this.enabledDisposables.dispose();\n        this.disposables.dispose();\n    }\n}\nfunction stickyScrollNodeEquals(node1, node2) {\n    return node1.position === node2.position &&\n        node1.node.element === node2.node.element &&\n        node1.startIndex === node2.startIndex &&\n        node1.height === node2.height &&\n        node1.endIndex === node2.endIndex;\n}\nclass StickyScrollState extends Disposable {\n    constructor(stickyNodes = []) {\n        super();\n        this.stickyNodes = stickyNodes;\n    }\n    get count() { return this.stickyNodes.length; }\n    equal(state) {\n        return equals(this.stickyNodes, state.stickyNodes, stickyScrollNodeEquals);\n    }\n    addDisposable(disposable) {\n        this._register(disposable);\n    }\n}\nclass StickyScrollController extends Disposable {\n    get firstVisibleNode() {\n        const index = this.view.firstVisibleIndex;\n        if (index < 0 || index >= this.view.length) {\n            return undefined;\n        }\n        return this.view.element(index);\n    }\n    constructor(tree, model, view, renderers, treeDelegate, options = {}) {\n        super();\n        this.tree = tree;\n        this.model = model;\n        this.view = view;\n        this.treeDelegate = treeDelegate;\n        this.maxWidgetViewRatio = 0.4;\n        const stickyScrollOptions = this.validateStickySettings(options);\n        this.stickyScrollMaxItemCount = stickyScrollOptions.stickyScrollMaxItemCount;\n        this._widget = this._register(new StickyScrollWidget(view.getScrollableElement(), view, model, renderers, treeDelegate));\n        this._register(view.onDidScroll(() => this.update()));\n        this._register(view.onDidChangeContentHeight(() => this.update()));\n        this._register(tree.onDidChangeCollapseState(() => this.update()));\n        this.update();\n    }\n    update() {\n        const firstVisibleNode = this.firstVisibleNode;\n        // Don't render anything if there are no elements\n        if (!firstVisibleNode || this.tree.scrollTop === 0) {\n            this._widget.setState(undefined);\n            return;\n        }\n        const stickyState = this.findStickyState(firstVisibleNode);\n        this._widget.setState(stickyState);\n    }\n    findStickyState(firstVisibleNode) {\n        const stickyNodes = [];\n        const maximumStickyWidgetHeight = this.view.renderHeight * this.maxWidgetViewRatio;\n        let firstVisibleNodeUnderWidget = firstVisibleNode;\n        let stickyNodesHeight = 0;\n        let nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, undefined, stickyNodesHeight);\n        while (nextStickyNode && stickyNodesHeight + nextStickyNode.height < maximumStickyWidgetHeight) {\n            stickyNodes.push(nextStickyNode);\n            stickyNodesHeight += nextStickyNode.height;\n            if (stickyNodes.length >= this.stickyScrollMaxItemCount) {\n                break;\n            }\n            firstVisibleNodeUnderWidget = this.getNextVisibleNode(firstVisibleNodeUnderWidget);\n            if (!firstVisibleNodeUnderWidget) {\n                break;\n            }\n            nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, nextStickyNode.node, stickyNodesHeight);\n        }\n        return stickyNodes.length ? new StickyScrollState(stickyNodes) : undefined;\n    }\n    getNextVisibleNode(node) {\n        const nodeIndex = this.getNodeIndex(node);\n        if (nodeIndex === -1 || nodeIndex === this.view.length - 1) {\n            return undefined;\n        }\n        const nextNode = this.view.element(nodeIndex + 1);\n        return nextNode;\n    }\n    getNextStickyNode(firstVisibleNodeUnderWidget, previousStickyNode, stickyNodesHeight) {\n        const nextStickyNode = this.getAncestorUnderPrevious(firstVisibleNodeUnderWidget, previousStickyNode);\n        if (!nextStickyNode) {\n            return undefined;\n        }\n        if (nextStickyNode === firstVisibleNodeUnderWidget) {\n            if (!this.nodeIsUncollapsedParent(firstVisibleNodeUnderWidget)) {\n                return undefined;\n            }\n            if (this.nodeTopAlignsWithStickyNodesBottom(firstVisibleNodeUnderWidget, stickyNodesHeight)) {\n                return undefined;\n            }\n        }\n        return this.createStickyScrollNode(nextStickyNode, stickyNodesHeight);\n    }\n    nodeTopAlignsWithStickyNodesBottom(node, stickyNodesHeight) {\n        const nodeIndex = this.getNodeIndex(node);\n        const elementTop = this.view.getElementTop(nodeIndex);\n        const stickyPosition = stickyNodesHeight;\n        return this.view.scrollTop === elementTop - stickyPosition;\n    }\n    createStickyScrollNode(node, currentStickyNodesHeight) {\n        const height = this.treeDelegate.getHeight(node);\n        const { startIndex, endIndex } = this.getNodeRange(node);\n        const position = this.calculateStickyNodePosition(endIndex, currentStickyNodesHeight);\n        return { node, position, height, startIndex, endIndex };\n    }\n    getAncestorUnderPrevious(node, previousAncestor = undefined) {\n        let currentAncestor = node;\n        let parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n        while (parentOfcurrentAncestor) {\n            if (parentOfcurrentAncestor === previousAncestor) {\n                return currentAncestor;\n            }\n            currentAncestor = parentOfcurrentAncestor;\n            parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n        }\n        if (previousAncestor === undefined) {\n            return currentAncestor;\n        }\n        return undefined;\n    }\n    calculateStickyNodePosition(lastDescendantIndex, stickyRowPositionTop) {\n        let lastChildRelativeTop = this.view.getRelativeTop(lastDescendantIndex);\n        // If the last descendant is only partially visible at the top of the view, getRelativeTop() returns null\n        // In that case, utilize the next node's relative top to calculate the sticky node's position\n        if (lastChildRelativeTop === null && this.view.firstVisibleIndex === lastDescendantIndex && lastDescendantIndex + 1 < this.view.length) {\n            const nodeHeight = this.treeDelegate.getHeight(this.view.element(lastDescendantIndex));\n            const nextNodeRelativeTop = this.view.getRelativeTop(lastDescendantIndex + 1);\n            lastChildRelativeTop = nextNodeRelativeTop ? nextNodeRelativeTop - nodeHeight / this.view.renderHeight : null;\n        }\n        if (lastChildRelativeTop === null) {\n            return stickyRowPositionTop;\n        }\n        const lastChildNode = this.view.element(lastDescendantIndex);\n        const lastChildHeight = this.treeDelegate.getHeight(lastChildNode);\n        const topOfLastChild = lastChildRelativeTop * this.view.renderHeight;\n        const bottomOfLastChild = topOfLastChild + lastChildHeight;\n        if (stickyRowPositionTop > topOfLastChild && stickyRowPositionTop <= bottomOfLastChild) {\n            return topOfLastChild;\n        }\n        return stickyRowPositionTop;\n    }\n    getParentNode(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const parentLocation = this.model.getParentNodeLocation(nodeLocation);\n        return parentLocation ? this.model.getNode(parentLocation) : undefined;\n    }\n    nodeIsUncollapsedParent(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        return this.model.getListRenderCount(nodeLocation) > 1;\n    }\n    getNodeIndex(node, nodeLocation) {\n        if (nodeLocation === undefined) {\n            nodeLocation = this.model.getNodeLocation(node);\n        }\n        const nodeIndex = this.model.getListIndex(nodeLocation);\n        return nodeIndex;\n    }\n    getNodeRange(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const startIndex = this.model.getListIndex(nodeLocation);\n        if (startIndex < 0) {\n            throw new Error('Node not found in tree');\n        }\n        const renderCount = this.model.getListRenderCount(nodeLocation);\n        const endIndex = startIndex + renderCount - 1;\n        return { startIndex, endIndex };\n    }\n    nodePositionTopBelowWidget(node) {\n        const ancestors = [];\n        let currentAncestor = this.getParentNode(node);\n        while (currentAncestor) {\n            ancestors.push(currentAncestor);\n            currentAncestor = this.getParentNode(currentAncestor);\n        }\n        let widgetHeight = 0;\n        for (let i = 0; i < ancestors.length && i < this.stickyScrollMaxItemCount; i++) {\n            widgetHeight += this.treeDelegate.getHeight(ancestors[i]);\n        }\n        return widgetHeight;\n    }\n    updateOptions(optionsUpdate = {}) {\n        const validatedOptions = this.validateStickySettings(optionsUpdate);\n        if (this.stickyScrollMaxItemCount !== validatedOptions.stickyScrollMaxItemCount) {\n            this.stickyScrollMaxItemCount = validatedOptions.stickyScrollMaxItemCount;\n            this.update();\n        }\n    }\n    validateStickySettings(options) {\n        let stickyScrollMaxItemCount = 5;\n        if (typeof options.stickyScrollMaxItemCount === 'number') {\n            stickyScrollMaxItemCount = Math.max(options.stickyScrollMaxItemCount, 1);\n        }\n        return { stickyScrollMaxItemCount };\n    }\n}\nclass StickyScrollWidget {\n    constructor(container, view, model, treeRenderers, treeDelegate) {\n        this.view = view;\n        this.model = model;\n        this.treeRenderers = treeRenderers;\n        this.treeDelegate = treeDelegate;\n        this._rootDomNode = document.createElement('div');\n        this._rootDomNode.classList.add('monaco-tree-sticky-container');\n        container.appendChild(this._rootDomNode);\n    }\n    setState(state) {\n        var _a;\n        const wasVisible = !!this._previousState && this._previousState.count > 0;\n        const isVisible = !!state && state.count > 0;\n        // If state has not changed, do nothing\n        if ((!wasVisible && !isVisible) || (wasVisible && isVisible && this._previousState.equal(state))) {\n            return;\n        }\n        // Update visibility of the widget if changed\n        if (wasVisible !== isVisible) {\n            this.setVisible(isVisible);\n        }\n        // Remove previous state\n        (_a = this._previousState) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._previousState = state;\n        if (!isVisible) {\n            return;\n        }\n        for (let stickyIndex = state.count - 1; stickyIndex >= 0; stickyIndex--) {\n            const stickyNode = state.stickyNodes[stickyIndex];\n            const previousStickyNode = stickyIndex ? state.stickyNodes[stickyIndex - 1] : undefined;\n            const currentWidgetHieght = previousStickyNode ? previousStickyNode.position + previousStickyNode.height : 0;\n            const { element, disposable } = this.createElement(stickyNode, currentWidgetHieght);\n            this._rootDomNode.appendChild(element);\n            state.addDisposable(disposable);\n        }\n        // Add shadow element to the end of the widget\n        const shadow = $('.monaco-tree-sticky-container-shadow');\n        this._rootDomNode.appendChild(shadow);\n        state.addDisposable(toDisposable(() => shadow.remove()));\n        // Set the height of the widget to the bottom of the last sticky node\n        const lastStickyNode = state.stickyNodes[state.count - 1];\n        this._rootDomNode.style.height = `${lastStickyNode.position + lastStickyNode.height}px`;\n    }\n    createElement(stickyNode, currentWidgetHeight) {\n        const nodeLocation = this.model.getNodeLocation(stickyNode.node);\n        const nodeIndex = this.model.getListIndex(nodeLocation);\n        // Sticky element container\n        const stickyElement = document.createElement('div');\n        stickyElement.style.top = `${stickyNode.position}px`;\n        stickyElement.style.height = `${stickyNode.height}px`;\n        stickyElement.style.lineHeight = `${stickyNode.height}px`;\n        stickyElement.classList.add('monaco-tree-sticky-row');\n        stickyElement.classList.add('monaco-list-row');\n        stickyElement.setAttribute('data-index', `${nodeIndex}`);\n        stickyElement.setAttribute('data-parity', nodeIndex % 2 === 0 ? 'even' : 'odd');\n        stickyElement.setAttribute('id', this.view.getElementID(nodeIndex));\n        // Get the renderer for the node\n        const nodeTemplateId = this.treeDelegate.getTemplateId(stickyNode.node);\n        const renderer = this.treeRenderers.find((renderer) => renderer.templateId === nodeTemplateId);\n        if (!renderer) {\n            throw new Error(`No renderer found for template id ${nodeTemplateId}`);\n        }\n        const nodeCopy = new Proxy(stickyNode.node, {});\n        // Render the element\n        const templateData = renderer.renderTemplate(stickyElement);\n        renderer.renderElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n        // Remove the element from the DOM when state is disposed\n        const disposable = toDisposable(() => {\n            renderer.disposeElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n            renderer.disposeTemplate(templateData);\n            stickyElement.remove();\n        });\n        return { element: stickyElement, disposable };\n    }\n    setVisible(visible) {\n        this._rootDomNode.style.display = visible ? 'block' : 'none';\n    }\n    dispose() {\n        var _a;\n        (_a = this._previousState) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._rootDomNode.remove();\n    }\n}\nfunction asTreeMouseEvent(event) {\n    let target = TreeMouseEventTarget.Unknown;\n    if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-twistie', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Twistie;\n    }\n    else if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-contents', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Element;\n    }\n    else if (hasParentWithClass(event.browserEvent.target, 'monaco-tree-type-filter', 'monaco-list')) {\n        target = TreeMouseEventTarget.Filter;\n    }\n    return {\n        browserEvent: event.browserEvent,\n        element: event.element ? event.element.element : null,\n        target\n    };\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait {\n    get nodeSet() {\n        if (!this._nodeSet) {\n            this._nodeSet = this.createNodeSet();\n        }\n        return this._nodeSet;\n    }\n    constructor(getFirstViewElementWithTrait, identityProvider) {\n        this.getFirstViewElementWithTrait = getFirstViewElementWithTrait;\n        this.identityProvider = identityProvider;\n        this.nodes = [];\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n    }\n    set(nodes, browserEvent) {\n        if (!(browserEvent === null || browserEvent === void 0 ? void 0 : browserEvent.__forceEvent) && equals(this.nodes, nodes)) {\n            return;\n        }\n        this._set(nodes, false, browserEvent);\n    }\n    _set(nodes, silent, browserEvent) {\n        this.nodes = [...nodes];\n        this.elements = undefined;\n        this._nodeSet = undefined;\n        if (!silent) {\n            const that = this;\n            this._onDidChange.fire({ get elements() { return that.get(); }, browserEvent });\n        }\n    }\n    get() {\n        if (!this.elements) {\n            this.elements = this.nodes.map(node => node.element);\n        }\n        return [...this.elements];\n    }\n    getNodes() {\n        return this.nodes;\n    }\n    has(node) {\n        return this.nodeSet.has(node);\n    }\n    onDidModelSplice({ insertedNodes, deletedNodes }) {\n        if (!this.identityProvider) {\n            const set = this.createNodeSet();\n            const visit = (node) => set.delete(node);\n            deletedNodes.forEach(node => dfs(node, visit));\n            this.set([...set.values()]);\n            return;\n        }\n        const deletedNodesIdSet = new Set();\n        const deletedNodesVisitor = (node) => deletedNodesIdSet.add(this.identityProvider.getId(node.element).toString());\n        deletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n        const insertedNodesMap = new Map();\n        const insertedNodesVisitor = (node) => insertedNodesMap.set(this.identityProvider.getId(node.element).toString(), node);\n        insertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n        const nodes = [];\n        for (const node of this.nodes) {\n            const id = this.identityProvider.getId(node.element).toString();\n            const wasDeleted = deletedNodesIdSet.has(id);\n            if (!wasDeleted) {\n                nodes.push(node);\n            }\n            else {\n                const insertedNode = insertedNodesMap.get(id);\n                if (insertedNode && insertedNode.visible) {\n                    nodes.push(insertedNode);\n                }\n            }\n        }\n        if (this.nodes.length > 0 && nodes.length === 0) {\n            const node = this.getFirstViewElementWithTrait();\n            if (node) {\n                nodes.push(node);\n            }\n        }\n        this._set(nodes, true);\n    }\n    createNodeSet() {\n        const set = new Set();\n        for (const node of this.nodes) {\n            set.add(node);\n        }\n        return set;\n    }\n}\nclass TreeNodeListMouseController extends MouseController {\n    constructor(list, tree, stickyScrollProvider) {\n        super(list);\n        this.tree = tree;\n        this.stickyScrollProvider = stickyScrollProvider;\n    }\n    onViewPointer(e) {\n        if (isButton(e.browserEvent.target) ||\n            isInputElement(e.browserEvent.target) ||\n            isMonacoEditor(e.browserEvent.target)) {\n            return;\n        }\n        if (e.browserEvent.isHandledByList) {\n            return;\n        }\n        const node = e.element;\n        if (!node) {\n            return super.onViewPointer(e);\n        }\n        if (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n            return super.onViewPointer(e);\n        }\n        const target = e.browserEvent.target;\n        const onTwistie = target.classList.contains('monaco-tl-twistie')\n            || (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16);\n        const isStickyElement = isStickyScrollElement(e.browserEvent.target);\n        let expandOnlyOnTwistieClick = false;\n        if (isStickyElement) {\n            expandOnlyOnTwistieClick = true;\n        }\n        else if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n            expandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n        }\n        else {\n            expandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n        }\n        if (!isStickyElement) {\n            if (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n                return super.onViewPointer(e);\n            }\n            if (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n                return super.onViewPointer(e);\n            }\n        }\n        else {\n            this.handleStickyScrollMouseEvent(e, node);\n        }\n        if (node.collapsible && (!isStickyElement || onTwistie)) {\n            const location = this.tree.getNodeLocation(node);\n            const recursive = e.browserEvent.altKey;\n            this.tree.setFocus([location]);\n            this.tree.toggleCollapsed(location, recursive);\n            if (expandOnlyOnTwistieClick && onTwistie) {\n                // Do not set this before calling a handler on the super class, because it will reject it as handled\n                e.browserEvent.isHandledByList = true;\n                return;\n            }\n        }\n        if (!isStickyElement) {\n            super.onViewPointer(e);\n        }\n    }\n    handleStickyScrollMouseEvent(e, node) {\n        if (isMonacoCustomToggle(e.browserEvent.target) || isActionItem(e.browserEvent.target)) {\n            return;\n        }\n        const stickyScrollController = this.stickyScrollProvider();\n        if (!stickyScrollController) {\n            throw new Error('Sticky scroll controller not found');\n        }\n        const nodeIndex = this.list.indexOf(node);\n        const elementScrollTop = this.list.getElementTop(nodeIndex);\n        const elementTargetViewTop = stickyScrollController.nodePositionTopBelowWidget(node);\n        this.tree.scrollTop = elementScrollTop - elementTargetViewTop;\n        this.list.setFocus([nodeIndex]);\n        this.list.setSelection([nodeIndex]);\n    }\n    onDoubleClick(e) {\n        const onTwistie = e.browserEvent.target.classList.contains('monaco-tl-twistie');\n        if (onTwistie || !this.tree.expandOnDoubleClick) {\n            return;\n        }\n        if (e.browserEvent.isHandledByList) {\n            return;\n        }\n        super.onDoubleClick(e);\n    }\n}\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList extends List {\n    constructor(user, container, virtualDelegate, renderers, focusTrait, selectionTrait, anchorTrait, options) {\n        super(user, container, virtualDelegate, renderers, options);\n        this.focusTrait = focusTrait;\n        this.selectionTrait = selectionTrait;\n        this.anchorTrait = anchorTrait;\n    }\n    createMouseController(options) {\n        return new TreeNodeListMouseController(this, options.tree, options.stickyScrollProvider);\n    }\n    splice(start, deleteCount, elements = []) {\n        super.splice(start, deleteCount, elements);\n        if (elements.length === 0) {\n            return;\n        }\n        const additionalFocus = [];\n        const additionalSelection = [];\n        let anchor;\n        elements.forEach((node, index) => {\n            if (this.focusTrait.has(node)) {\n                additionalFocus.push(start + index);\n            }\n            if (this.selectionTrait.has(node)) {\n                additionalSelection.push(start + index);\n            }\n            if (this.anchorTrait.has(node)) {\n                anchor = start + index;\n            }\n        });\n        if (additionalFocus.length > 0) {\n            super.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n        }\n        if (additionalSelection.length > 0) {\n            super.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n        }\n        if (typeof anchor === 'number') {\n            super.setAnchor(anchor);\n        }\n    }\n    setFocus(indexes, browserEvent, fromAPI = false) {\n        super.setFocus(indexes, browserEvent);\n        if (!fromAPI) {\n            this.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setSelection(indexes, browserEvent, fromAPI = false) {\n        super.setSelection(indexes, browserEvent);\n        if (!fromAPI) {\n            this.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setAnchor(index, fromAPI = false) {\n        super.setAnchor(index);\n        if (!fromAPI) {\n            if (typeof index === 'undefined') {\n                this.anchorTrait.set([]);\n            }\n            else {\n                this.anchorTrait.set([this.element(index)]);\n            }\n        }\n    }\n}\nexport class AbstractTree {\n    get onDidScroll() { return this.view.onDidScroll; }\n    get onDidChangeFocus() { return this.eventBufferer.wrapEvent(this.focus.onDidChange); }\n    get onDidChangeSelection() { return this.eventBufferer.wrapEvent(this.selection.onDidChange); }\n    get onMouseDblClick() { return Event.filter(Event.map(this.view.onMouseDblClick, asTreeMouseEvent), e => e.target !== TreeMouseEventTarget.Filter); }\n    get onPointer() { return Event.map(this.view.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.view.onDidFocus; }\n    get onDidChangeModel() { return Event.signal(this.model.onDidSplice); }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get findMode() { var _a, _b; return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : TreeFindMode.Highlight; }\n    set findMode(findMode) { if (this.findController) {\n        this.findController.mode = findMode;\n    } }\n    get findMatchType() { var _a, _b; return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.matchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy; }\n    set findMatchType(findFuzzy) { if (this.findController) {\n        this.findController.matchType = findFuzzy;\n    } }\n    get expandOnDoubleClick() { return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick; }\n    get expandOnlyOnTwistieClick() { return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick; }\n    get onDidDispose() { return this.view.onDidDispose; }\n    constructor(_user, container, delegate, renderers, _options = {}) {\n        var _a;\n        this._user = _user;\n        this._options = _options;\n        this.eventBufferer = new EventBufferer();\n        this.onDidChangeFindOpenState = Event.None;\n        this.disposables = new DisposableStore();\n        this._onWillRefilter = new Emitter();\n        this.onWillRefilter = this._onWillRefilter.event;\n        this._onDidUpdateOptions = new Emitter();\n        this.treeDelegate = new ComposedTreeDelegate(delegate);\n        const onDidChangeCollapseStateRelay = new Relay();\n        const onDidChangeActiveNodes = new Relay();\n        const activeNodes = this.disposables.add(new EventCollection(onDidChangeActiveNodes.event));\n        const renderedIndentGuides = new SetMap();\n        this.renderers = renderers.map(r => new TreeRenderer(r, () => this.model, onDidChangeCollapseStateRelay.event, activeNodes, renderedIndentGuides, _options));\n        for (const r of this.renderers) {\n            this.disposables.add(r);\n        }\n        let filter;\n        if (_options.keyboardNavigationLabelProvider) {\n            filter = new FindFilter(this, _options.keyboardNavigationLabelProvider, _options.filter);\n            _options = { ..._options, filter: filter }; // TODO need typescript help here\n            this.disposables.add(filter);\n        }\n        this.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n        this.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n        this.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n        this.view = new TreeNodeList(_user, container, this.treeDelegate, this.renderers, this.focus, this.selection, this.anchor, { ...asListOptions(() => this.model, _options), tree: this, stickyScrollProvider: () => this.stickyScrollController });\n        this.model = this.createModel(_user, this.view, _options);\n        onDidChangeCollapseStateRelay.input = this.model.onDidChangeCollapseState;\n        const onDidModelSplice = Event.forEach(this.model.onDidSplice, e => {\n            this.eventBufferer.bufferEvents(() => {\n                this.focus.onDidModelSplice(e);\n                this.selection.onDidModelSplice(e);\n            });\n        }, this.disposables);\n        // Make sure the `forEach` always runs\n        onDidModelSplice(() => null, null, this.disposables);\n        // Active nodes can change when the model changes or when focus or selection change.\n        // We debounce it with 0 delay since these events may fire in the same stack and we only\n        // want to run this once. It also doesn't matter if it runs on the next tick since it's only\n        // a nice to have UI feature.\n        const activeNodesEmitter = this.disposables.add(new Emitter());\n        const activeNodesDebounce = this.disposables.add(new Delayer(0));\n        this.disposables.add(Event.any(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange)(() => {\n            activeNodesDebounce.trigger(() => {\n                const set = new Set();\n                for (const node of this.focus.getNodes()) {\n                    set.add(node);\n                }\n                for (const node of this.selection.getNodes()) {\n                    set.add(node);\n                }\n                activeNodesEmitter.fire([...set.values()]);\n            });\n        }));\n        onDidChangeActiveNodes.input = activeNodesEmitter.event;\n        if (_options.keyboardSupport !== false) {\n            const onKeyDown = Event.chain(this.view.onKeyDown, $ => $.filter(e => !isInputElement(e.target))\n                .map(e => new StandardKeyboardEvent(e)));\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 15 /* KeyCode.LeftArrow */))(this.onLeftArrow, this, this.disposables);\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 17 /* KeyCode.RightArrow */))(this.onRightArrow, this, this.disposables);\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 10 /* KeyCode.Space */))(this.onSpace, this, this.disposables);\n        }\n        if (((_a = _options.findWidgetEnabled) !== null && _a !== void 0 ? _a : true) && _options.keyboardNavigationLabelProvider && _options.contextViewProvider) {\n            const opts = this.options.findWidgetStyles ? { styles: this.options.findWidgetStyles } : undefined;\n            this.findController = new FindController(this, this.model, this.view, filter, _options.contextViewProvider, opts);\n            this.focusNavigationFilter = node => this.findController.shouldAllowFocus(node);\n            this.onDidChangeFindOpenState = this.findController.onDidChangeOpenState;\n            this.disposables.add(this.findController);\n            this.onDidChangeFindMode = this.findController.onDidChangeMode;\n            this.onDidChangeFindMatchType = this.findController.onDidChangeMatchType;\n        }\n        else {\n            this.onDidChangeFindMode = Event.None;\n            this.onDidChangeFindMatchType = Event.None;\n        }\n        if (_options.enableStickyScroll) {\n            this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, _options);\n        }\n        this.styleElement = createStyleSheet(this.view.getHTMLElement());\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    updateOptions(optionsUpdate = {}) {\n        var _a;\n        this._options = { ...this._options, ...optionsUpdate };\n        for (const renderer of this.renderers) {\n            renderer.updateOptions(optionsUpdate);\n        }\n        this.view.updateOptions(this._options);\n        (_a = this.findController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n        this.updateStickyScroll(optionsUpdate);\n        this._onDidUpdateOptions.fire(this._options);\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    get options() {\n        return this._options;\n    }\n    updateStickyScroll(optionsUpdate) {\n        var _a;\n        if (!this.stickyScrollController && this._options.enableStickyScroll) {\n            this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, this._options);\n        }\n        else if (this.stickyScrollController && !this._options.enableStickyScroll) {\n            this.stickyScrollController.dispose();\n            this.stickyScrollController = undefined;\n        }\n        (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.view.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.view.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.view.scrollTop = scrollTop;\n    }\n    get scrollHeight() {\n        return this.view.scrollHeight;\n    }\n    get renderHeight() {\n        return this.view.renderHeight;\n    }\n    domFocus() {\n        this.view.domFocus();\n    }\n    layout(height, width) {\n        var _a;\n        this.view.layout(height, width);\n        if (isNumber(width)) {\n            (_a = this.findController) === null || _a === void 0 ? void 0 : _a.layout(width);\n        }\n    }\n    style(styles) {\n        const suffix = `.${this.view.domId}`;\n        const content = [];\n        if (styles.treeIndentGuidesStroke) {\n            content.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeInactiveIndentGuidesStroke}; }`);\n            content.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n        }\n        if (styles.listBackground) {\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${styles.listBackground}; }`);\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${styles.listBackground}; }`);\n        }\n        this.styleElement.textContent = content.join('\\n');\n        this.view.style(styles);\n    }\n    // Tree navigation\n    getParentElement(location) {\n        const parentRef = this.model.getParentNodeLocation(location);\n        const parentNode = this.model.getNode(parentRef);\n        return parentNode.element;\n    }\n    getFirstElementChild(location) {\n        return this.model.getFirstElementChild(location);\n    }\n    // Tree\n    getNode(location) {\n        return this.model.getNode(location);\n    }\n    getNodeLocation(node) {\n        return this.model.getNodeLocation(node);\n    }\n    collapse(location, recursive = false) {\n        return this.model.setCollapsed(location, true, recursive);\n    }\n    expand(location, recursive = false) {\n        return this.model.setCollapsed(location, false, recursive);\n    }\n    toggleCollapsed(location, recursive = false) {\n        return this.model.setCollapsed(location, undefined, recursive);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsible) {\n        return this.model.setCollapsible(location, collapsible);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    refilter() {\n        this._onWillRefilter.fire(undefined);\n        this.model.refilter();\n    }\n    setSelection(elements, browserEvent) {\n        const nodes = elements.map(e => this.model.getNode(e));\n        this.selection.set(nodes, browserEvent);\n        const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n        this.view.setSelection(indexes, browserEvent, true);\n    }\n    getSelection() {\n        return this.selection.get();\n    }\n    setFocus(elements, browserEvent) {\n        const nodes = elements.map(e => this.model.getNode(e));\n        this.focus.set(nodes, browserEvent);\n        const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n        this.view.setFocus(indexes, browserEvent, true);\n    }\n    getFocus() {\n        return this.focus.get();\n    }\n    reveal(location, relativeTop) {\n        this.model.expandTo(location);\n        const index = this.model.getListIndex(location);\n        if (index === -1) {\n            return;\n        }\n        if (!this.stickyScrollController) {\n            this.view.reveal(index, relativeTop);\n        }\n        else {\n            const paddingTop = this.stickyScrollController.nodePositionTopBelowWidget(this.getNode(location));\n            this.view.reveal(index, relativeTop, paddingTop);\n        }\n    }\n    // List\n    onLeftArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, true);\n        if (!didChange) {\n            const parentLocation = this.model.getParentNodeLocation(location);\n            if (!parentLocation) {\n                return;\n            }\n            const parentListIndex = this.model.getListIndex(parentLocation);\n            this.view.reveal(parentListIndex);\n            this.view.setFocus([parentListIndex]);\n        }\n    }\n    onRightArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, false);\n        if (!didChange) {\n            if (!node.children.some(child => child.visible)) {\n                return;\n            }\n            const [focusedIndex] = this.view.getFocus();\n            const firstChildIndex = focusedIndex + 1;\n            this.view.reveal(firstChildIndex);\n            this.view.setFocus([firstChildIndex]);\n        }\n    }\n    onSpace(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const recursive = e.browserEvent.altKey;\n        this.model.setCollapsed(location, undefined, recursive);\n    }\n    dispose() {\n        var _a;\n        dispose(this.disposables);\n        (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.view.dispose();\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IndexTreeModel } from './indexTreeModel.js';\nimport { ObjectTreeElementCollapseState, TreeError } from './tree.js';\nimport { Iterable } from '../../../common/iterator.js';\nexport class ObjectTreeModel {\n    constructor(user, list, options = {}) {\n        this.user = user;\n        this.rootRef = null;\n        this.nodes = new Map();\n        this.nodesByIdentity = new Map();\n        this.model = new IndexTreeModel(user, list, null, options);\n        this.onDidSplice = this.model.onDidSplice;\n        this.onDidChangeCollapseState = this.model.onDidChangeCollapseState;\n        this.onDidChangeRenderNodeCount = this.model.onDidChangeRenderNodeCount;\n        if (options.sorter) {\n            this.sorter = {\n                compare(a, b) {\n                    return options.sorter.compare(a.element, b.element);\n                }\n            };\n        }\n        this.identityProvider = options.identityProvider;\n    }\n    setChildren(element, children = Iterable.empty(), options = {}) {\n        const location = this.getElementLocation(element);\n        this._setChildren(location, this.preserveCollapseState(children), options);\n    }\n    _setChildren(location, children = Iterable.empty(), options) {\n        const insertedElements = new Set();\n        const insertedElementIds = new Set();\n        const onDidCreateNode = (node) => {\n            var _a;\n            if (node.element === null) {\n                return;\n            }\n            const tnode = node;\n            insertedElements.add(tnode.element);\n            this.nodes.set(tnode.element, tnode);\n            if (this.identityProvider) {\n                const id = this.identityProvider.getId(tnode.element).toString();\n                insertedElementIds.add(id);\n                this.nodesByIdentity.set(id, tnode);\n            }\n            (_a = options.onDidCreateNode) === null || _a === void 0 ? void 0 : _a.call(options, tnode);\n        };\n        const onDidDeleteNode = (node) => {\n            var _a;\n            if (node.element === null) {\n                return;\n            }\n            const tnode = node;\n            if (!insertedElements.has(tnode.element)) {\n                this.nodes.delete(tnode.element);\n            }\n            if (this.identityProvider) {\n                const id = this.identityProvider.getId(tnode.element).toString();\n                if (!insertedElementIds.has(id)) {\n                    this.nodesByIdentity.delete(id);\n                }\n            }\n            (_a = options.onDidDeleteNode) === null || _a === void 0 ? void 0 : _a.call(options, tnode);\n        };\n        this.model.splice([...location, 0], Number.MAX_VALUE, children, { ...options, onDidCreateNode, onDidDeleteNode });\n    }\n    preserveCollapseState(elements = Iterable.empty()) {\n        if (this.sorter) {\n            elements = [...elements].sort(this.sorter.compare.bind(this.sorter));\n        }\n        return Iterable.map(elements, treeElement => {\n            let node = this.nodes.get(treeElement.element);\n            if (!node && this.identityProvider) {\n                const id = this.identityProvider.getId(treeElement.element).toString();\n                node = this.nodesByIdentity.get(id);\n            }\n            if (!node) {\n                let collapsed;\n                if (typeof treeElement.collapsed === 'undefined') {\n                    collapsed = undefined;\n                }\n                else if (treeElement.collapsed === ObjectTreeElementCollapseState.Collapsed || treeElement.collapsed === ObjectTreeElementCollapseState.PreserveOrCollapsed) {\n                    collapsed = true;\n                }\n                else if (treeElement.collapsed === ObjectTreeElementCollapseState.Expanded || treeElement.collapsed === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n                    collapsed = false;\n                }\n                else {\n                    collapsed = Boolean(treeElement.collapsed);\n                }\n                return {\n                    ...treeElement,\n                    children: this.preserveCollapseState(treeElement.children),\n                    collapsed\n                };\n            }\n            const collapsible = typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : node.collapsible;\n            let collapsed;\n            if (typeof treeElement.collapsed === 'undefined' || treeElement.collapsed === ObjectTreeElementCollapseState.PreserveOrCollapsed || treeElement.collapsed === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n                collapsed = node.collapsed;\n            }\n            else if (treeElement.collapsed === ObjectTreeElementCollapseState.Collapsed) {\n                collapsed = true;\n            }\n            else if (treeElement.collapsed === ObjectTreeElementCollapseState.Expanded) {\n                collapsed = false;\n            }\n            else {\n                collapsed = Boolean(treeElement.collapsed);\n            }\n            return {\n                ...treeElement,\n                collapsible,\n                collapsed,\n                children: this.preserveCollapseState(treeElement.children)\n            };\n        });\n    }\n    rerender(element) {\n        const location = this.getElementLocation(element);\n        this.model.rerender(location);\n    }\n    getFirstElementChild(ref = null) {\n        const location = this.getElementLocation(ref);\n        return this.model.getFirstElementChild(location);\n    }\n    has(element) {\n        return this.nodes.has(element);\n    }\n    getListIndex(element) {\n        const location = this.getElementLocation(element);\n        return this.model.getListIndex(location);\n    }\n    getListRenderCount(element) {\n        const location = this.getElementLocation(element);\n        return this.model.getListRenderCount(location);\n    }\n    isCollapsible(element) {\n        const location = this.getElementLocation(element);\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(element, collapsible) {\n        const location = this.getElementLocation(element);\n        return this.model.setCollapsible(location, collapsible);\n    }\n    isCollapsed(element) {\n        const location = this.getElementLocation(element);\n        return this.model.isCollapsed(location);\n    }\n    setCollapsed(element, collapsed, recursive) {\n        const location = this.getElementLocation(element);\n        return this.model.setCollapsed(location, collapsed, recursive);\n    }\n    expandTo(element) {\n        const location = this.getElementLocation(element);\n        this.model.expandTo(location);\n    }\n    refilter() {\n        this.model.refilter();\n    }\n    getNode(element = null) {\n        if (element === null) {\n            return this.model.getNode(this.model.rootRef);\n        }\n        const node = this.nodes.get(element);\n        if (!node) {\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\n        }\n        return node;\n    }\n    getNodeLocation(node) {\n        return node.element;\n    }\n    getParentNodeLocation(element) {\n        if (element === null) {\n            throw new TreeError(this.user, `Invalid getParentNodeLocation call`);\n        }\n        const node = this.nodes.get(element);\n        if (!node) {\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\n        }\n        const location = this.model.getNodeLocation(node);\n        const parentLocation = this.model.getParentNodeLocation(location);\n        const parent = this.model.getNode(parentLocation);\n        return parent.element;\n    }\n    getElementLocation(element) {\n        if (element === null) {\n            return [];\n        }\n        const node = this.nodes.get(element);\n        if (!node) {\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\n        }\n        return this.model.getNodeLocation(node);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { equals } from '../../../common/arrays.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nfunction noCompress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.from(element.children), noCompress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    let childrenIterator;\n    let children;\n    while (true) {\n        [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n        if (children.length !== 1) {\n            break;\n        }\n        if (children[0].incompressible) {\n            break;\n        }\n        element = children[0];\n        elements.push(element.element);\n    }\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\nfunction _decompress(element, index = 0) {\n    let children;\n    if (index < element.element.elements.length - 1) {\n        children = [_decompress(element, index + 1)];\n    }\n    else {\n        children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n    }\n    if (index === 0 && element.element.incompressible) {\n        return {\n            element: element.element.elements[index],\n            children,\n            incompressible: true,\n            collapsible: element.collapsible,\n            collapsed: element.collapsed\n        };\n    }\n    return {\n        element: element.element.elements[index],\n        children,\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n    return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n    if (treeElement.element === element) {\n        return { ...treeElement, children };\n    }\n    return { ...treeElement, children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children)) };\n}\nconst wrapIdentityProvider = (base) => ({\n    getId(node) {\n        return node.elements.map(e => base.getId(e).toString()).join('\\0');\n    }\n});\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel {\n    get onDidSplice() { return this.model.onDidSplice; }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get onDidChangeRenderNodeCount() { return this.model.onDidChangeRenderNodeCount; }\n    constructor(user, list, options = {}) {\n        this.user = user;\n        this.rootRef = null;\n        this.nodes = new Map();\n        this.model = new ObjectTreeModel(user, list, options);\n        this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n        this.identityProvider = options.identityProvider;\n    }\n    setChildren(element, children = Iterable.empty(), options) {\n        // Diffs must be deep, since the compression can affect nested elements.\n        // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n        const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n        if (element === null) {\n            const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n            this._setChildren(null, compressedChildren, { diffIdentityProvider, diffDepth: Infinity });\n            return;\n        }\n        const compressedNode = this.nodes.get(element);\n        if (!compressedNode) {\n            throw new TreeError(this.user, 'Unknown compressed tree node');\n        }\n        const node = this.model.getNode(compressedNode);\n        const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n        const parent = this.model.getNode(compressedParentNode);\n        const decompressedElement = decompress(node);\n        const splicedElement = splice(decompressedElement, element, children);\n        const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n        // If the recompressed node is identical to the original, just set its children.\n        // Saves work and churn diffing the parent element.\n        const elementComparator = options.diffIdentityProvider\n            ? ((a, b) => options.diffIdentityProvider.getId(a) === options.diffIdentityProvider.getId(b))\n            : undefined;\n        if (equals(recompressedElement.element.elements, node.element.elements, elementComparator)) {\n            this._setChildren(compressedNode, recompressedElement.children || Iterable.empty(), { diffIdentityProvider, diffDepth: 1 });\n            return;\n        }\n        const parentChildren = parent.children\n            .map(child => child === node ? recompressedElement : child);\n        this._setChildren(parent.element, parentChildren, {\n            diffIdentityProvider,\n            diffDepth: node.depth - parent.depth,\n        });\n    }\n    setCompressionEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n        this.enabled = enabled;\n        const root = this.model.getNode();\n        const rootChildren = root.children;\n        const decompressedRootChildren = Iterable.map(rootChildren, decompress);\n        const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n        // it should be safe to always use deep diff mode here if an identity\n        // provider is available, since we know the raw nodes are unchanged.\n        this._setChildren(null, recompressedRootChildren, {\n            diffIdentityProvider: this.identityProvider,\n            diffDepth: Infinity,\n        });\n    }\n    _setChildren(node, children, options) {\n        const insertedElements = new Set();\n        const onDidCreateNode = (node) => {\n            for (const element of node.element.elements) {\n                insertedElements.add(element);\n                this.nodes.set(element, node.element);\n            }\n        };\n        const onDidDeleteNode = (node) => {\n            for (const element of node.element.elements) {\n                if (!insertedElements.has(element)) {\n                    this.nodes.delete(element);\n                }\n            }\n        };\n        this.model.setChildren(node, children, { ...options, onDidCreateNode, onDidDeleteNode });\n    }\n    has(element) {\n        return this.nodes.has(element);\n    }\n    getListIndex(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListIndex(node);\n    }\n    getListRenderCount(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListRenderCount(node);\n    }\n    getNode(location) {\n        if (typeof location === 'undefined') {\n            return this.model.getNode();\n        }\n        const node = this.getCompressedNode(location);\n        return this.model.getNode(node);\n    }\n    // TODO: review this\n    getNodeLocation(node) {\n        const compressedNode = this.model.getNodeLocation(node);\n        if (compressedNode === null) {\n            return null;\n        }\n        return compressedNode.elements[compressedNode.elements.length - 1];\n    }\n    // TODO: review this\n    getParentNodeLocation(location) {\n        const compressedNode = this.getCompressedNode(location);\n        const parentNode = this.model.getParentNodeLocation(compressedNode);\n        if (parentNode === null) {\n            return null;\n        }\n        return parentNode.elements[parentNode.elements.length - 1];\n    }\n    getFirstElementChild(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.getFirstElementChild(compressedNode);\n    }\n    isCollapsible(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsible(compressedNode);\n    }\n    setCollapsible(location, collapsible) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsible(compressedNode, collapsible);\n    }\n    isCollapsed(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsed(compressedNode);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsed(compressedNode, collapsed, recursive);\n    }\n    expandTo(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.expandTo(compressedNode);\n    }\n    rerender(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.rerender(compressedNode);\n    }\n    refilter() {\n        this.model.refilter();\n    }\n    getCompressedNode(element) {\n        if (element === null) {\n            return null;\n        }\n        const node = this.nodes.get(element);\n        if (!node) {\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\n        }\n        return node;\n    }\n}\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\nclass CompressedTreeNodeWrapper {\n    get element() { return this.node.element === null ? null : this.unwrapper(this.node.element); }\n    get children() { return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(unwrapper, node) {\n        this.unwrapper = unwrapper;\n        this.node = node;\n    }\n}\nfunction mapList(nodeMapper, list) {\n    return {\n        splice(start, deleteCount, toInsert) {\n            list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\n        },\n        updateElementHeight(index, height) {\n            list.updateElementHeight(index, height);\n        }\n    };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n    return {\n        ...options,\n        identityProvider: options.identityProvider && {\n            getId(node) {\n                return options.identityProvider.getId(compressedNodeUnwrapper(node));\n            }\n        },\n        sorter: options.sorter && {\n            compare(node, otherNode) {\n                return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n            }\n        },\n        filter: options.filter && {\n            filter(node, parentVisibility) {\n                return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n            }\n        }\n    };\n}\nexport class CompressibleObjectTreeModel {\n    get onDidSplice() {\n        return Event.map(this.model.onDidSplice, ({ insertedNodes, deletedNodes }) => ({\n            insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n            deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node)),\n        }));\n    }\n    get onDidChangeCollapseState() {\n        return Event.map(this.model.onDidChangeCollapseState, ({ node, deep }) => ({\n            node: this.nodeMapper.map(node),\n            deep\n        }));\n    }\n    get onDidChangeRenderNodeCount() {\n        return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n    }\n    constructor(user, list, options = {}) {\n        this.rootRef = null;\n        this.elementMapper = options.elementMapper || DefaultElementMapper;\n        const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\n        this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n        this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n    }\n    setChildren(element, children = Iterable.empty(), options = {}) {\n        this.model.setChildren(element, children, options);\n    }\n    setCompressionEnabled(enabled) {\n        this.model.setCompressionEnabled(enabled);\n    }\n    has(location) {\n        return this.model.has(location);\n    }\n    getListIndex(location) {\n        return this.model.getListIndex(location);\n    }\n    getListRenderCount(location) {\n        return this.model.getListRenderCount(location);\n    }\n    getNode(location) {\n        return this.nodeMapper.map(this.model.getNode(location));\n    }\n    getNodeLocation(node) {\n        return node.element;\n    }\n    getParentNodeLocation(location) {\n        return this.model.getParentNodeLocation(location);\n    }\n    getFirstElementChild(location) {\n        const result = this.model.getFirstElementChild(location);\n        if (result === null || typeof result === 'undefined') {\n            return result;\n        }\n        return this.elementMapper(result.elements);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsed) {\n        return this.model.setCollapsible(location, collapsed);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        return this.model.setCollapsed(location, collapsed, recursive);\n    }\n    expandTo(location) {\n        return this.model.expandTo(location);\n    }\n    rerender(location) {\n        return this.model.rerender(location);\n    }\n    refilter() {\n        return this.model.refilter();\n    }\n    getCompressedTreeNode(location = null) {\n        return this.model.getNode(location);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AbstractTree } from './abstractTree.js';\nimport { CompressibleObjectTreeModel } from './compressedObjectTreeModel.js';\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { memoize } from '../../../common/decorators.js';\nimport { Iterable } from '../../../common/iterator.js';\nexport class ObjectTree extends AbstractTree {\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    constructor(user, container, delegate, renderers, options = {}) {\n        super(user, container, delegate, renderers, options);\n        this.user = user;\n    }\n    setChildren(element, children = Iterable.empty(), options) {\n        this.model.setChildren(element, children, options);\n    }\n    rerender(element) {\n        if (element === undefined) {\n            this.view.rerender();\n            return;\n        }\n        this.model.rerender(element);\n    }\n    hasElement(element) {\n        return this.model.has(element);\n    }\n    createModel(user, view, options) {\n        return new ObjectTreeModel(user, view, options);\n    }\n}\nclass CompressibleRenderer {\n    get compressedTreeNodeProvider() {\n        return this._compressedTreeNodeProvider();\n    }\n    constructor(_compressedTreeNodeProvider, renderer) {\n        this._compressedTreeNodeProvider = _compressedTreeNodeProvider;\n        this.renderer = renderer;\n        this.templateId = renderer.templateId;\n        if (renderer.onDidChangeTwistieState) {\n            this.onDidChangeTwistieState = renderer.onDidChangeTwistieState;\n        }\n    }\n    renderTemplate(container) {\n        const data = this.renderer.renderTemplate(container);\n        return { compressedTreeNode: undefined, data };\n    }\n    renderElement(node, index, templateData, height) {\n        const compressedTreeNode = this.compressedTreeNodeProvider.getCompressedTreeNode(node.element);\n        if (compressedTreeNode.element.elements.length === 1) {\n            templateData.compressedTreeNode = undefined;\n            this.renderer.renderElement(node, index, templateData.data, height);\n        }\n        else {\n            templateData.compressedTreeNode = compressedTreeNode;\n            this.renderer.renderCompressedElements(compressedTreeNode, index, templateData.data, height);\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b, _c, _d;\n        if (templateData.compressedTreeNode) {\n            (_b = (_a = this.renderer).disposeCompressedElements) === null || _b === void 0 ? void 0 : _b.call(_a, templateData.compressedTreeNode, index, templateData.data, height);\n        }\n        else {\n            (_d = (_c = this.renderer).disposeElement) === null || _d === void 0 ? void 0 : _d.call(_c, node, index, templateData.data, height);\n        }\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.data);\n    }\n    renderTwistie(element, twistieElement) {\n        if (this.renderer.renderTwistie) {\n            return this.renderer.renderTwistie(element, twistieElement);\n        }\n        return false;\n    }\n}\n__decorate([\n    memoize\n], CompressibleRenderer.prototype, \"compressedTreeNodeProvider\", null);\nfunction asObjectTreeOptions(compressedTreeNodeProvider, options) {\n    return options && {\n        ...options,\n        keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n            getKeyboardNavigationLabel(e) {\n                let compressedTreeNode;\n                try {\n                    compressedTreeNode = compressedTreeNodeProvider().getCompressedTreeNode(e);\n                }\n                catch (_a) {\n                    return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e);\n                }\n                if (compressedTreeNode.element.elements.length === 1) {\n                    return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e);\n                }\n                else {\n                    return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(compressedTreeNode.element.elements);\n                }\n            }\n        }\n    };\n}\nexport class CompressibleObjectTree extends ObjectTree {\n    constructor(user, container, delegate, renderers, options = {}) {\n        const compressedTreeNodeProvider = () => this;\n        const compressibleRenderers = renderers.map(r => new CompressibleRenderer(compressedTreeNodeProvider, r));\n        super(user, container, delegate, compressibleRenderers, asObjectTreeOptions(compressedTreeNodeProvider, options));\n    }\n    setChildren(element, children = Iterable.empty(), options) {\n        this.model.setChildren(element, children, options);\n    }\n    createModel(user, view, options) {\n        return new CompressibleObjectTreeModel(user, view, options);\n    }\n    updateOptions(optionsUpdate = {}) {\n        super.updateOptions(optionsUpdate);\n        if (typeof optionsUpdate.compressionEnabled !== 'undefined') {\n            this.model.setCompressionEnabled(optionsUpdate.compressionEnabled);\n        }\n    }\n    getCompressedTreeNode(element = null) {\n        return this.model.getCompressedTreeNode(element);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { ObjectTreeElementCollapseState, TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n    return {\n        ...props,\n        children: [],\n        refreshPromise: undefined,\n        stale: true,\n        slow: false,\n        forceExpanded: false\n    };\n}\nfunction isAncestor(ancestor, descendant) {\n    if (!descendant.parent) {\n        return false;\n    }\n    else if (descendant.parent === ancestor) {\n        return true;\n    }\n    else {\n        return isAncestor(ancestor, descendant.parent);\n    }\n}\nfunction intersects(node, other) {\n    return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n    get element() { return this.node.element.element; }\n    get children() { return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(node) {\n        this.node = node;\n    }\n}\nclass AsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n    }\n}\nfunction asTreeEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        elements: e.elements.map(e => e.element)\n    };\n}\nfunction asTreeMouseEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        element: e.element && e.element.element,\n        target: e.target\n    };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new AsyncDataTreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n    constructor(dnd) {\n        this.dnd = dnd;\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asAsyncDataTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n        return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    drop(data, targetNode, targetIndex, originalEvent) {\n        this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n    }\n    dispose() {\n        this.dnd.dispose();\n    }\n}\nfunction asObjectTreeOptions(options) {\n    return options && {\n        ...options,\n        collapseByDefault: true,\n        identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        },\n        dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd),\n        multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent({ ...e, element: e.element });\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent({ ...e, element: e.element });\n            }\n        },\n        accessibilityProvider: options.accessibilityProvider && {\n            ...options.accessibilityProvider,\n            getPosInSet: undefined,\n            getSetSize: undefined,\n            getRole: options.accessibilityProvider.getRole ? (el) => {\n                return options.accessibilityProvider.getRole(el.element);\n            } : () => 'treeitem',\n            isChecked: options.accessibilityProvider.isChecked ? (e) => {\n                var _a;\n                return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\n            } : undefined,\n            getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            },\n            getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n            getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n                return options.accessibilityProvider.getAriaLevel(node.element);\n            }),\n            getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            })\n        },\n        filter: options.filter && {\n            filter(e, parentVisibility) {\n                return options.filter.filter(e.element, parentVisibility);\n            }\n        },\n        keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n            ...options.keyboardNavigationLabelProvider,\n            getKeyboardNavigationLabel(e) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n            }\n        },\n        sorter: undefined,\n        expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : (typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : (e => options.expandOnlyOnTwistieClick(e.element))),\n        defaultFindVisibility: e => {\n            if (e.hasChildren && e.stale) {\n                return 1 /* TreeVisibility.Visible */;\n            }\n            else if (typeof options.defaultFindVisibility === 'number') {\n                return options.defaultFindVisibility;\n            }\n            else if (typeof options.defaultFindVisibility === 'undefined') {\n                return 2 /* TreeVisibility.Recurse */;\n            }\n            else {\n                return options.defaultFindVisibility(e.element);\n            }\n        }\n    };\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n    get onDidScroll() { return this.tree.onDidScroll; }\n    get onDidChangeFocus() { return Event.map(this.tree.onDidChangeFocus, asTreeEvent); }\n    get onDidChangeSelection() { return Event.map(this.tree.onDidChangeSelection, asTreeEvent); }\n    get onMouseDblClick() { return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent); }\n    get onPointer() { return Event.map(this.tree.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.tree.onDidFocus; }\n    /**\n     * To be used internally only!\n     * @deprecated\n     */\n    get onDidChangeModel() { return this.tree.onDidChangeModel; }\n    get onDidChangeCollapseState() { return this.tree.onDidChangeCollapseState; }\n    get onDidChangeFindOpenState() { return this.tree.onDidChangeFindOpenState; }\n    get onDidDispose() { return this.tree.onDidDispose; }\n    constructor(user, container, delegate, renderers, dataSource, options = {}) {\n        this.user = user;\n        this.dataSource = dataSource;\n        this.nodes = new Map();\n        this.subTreeRefreshPromises = new Map();\n        this.refreshPromises = new Map();\n        this._onDidRender = new Emitter();\n        this._onDidChangeNodeSlowState = new Emitter();\n        this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n        this.disposables = new DisposableStore();\n        this.identityProvider = options.identityProvider;\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n        this.sorter = options.sorter;\n        this.getDefaultCollapseState = e => options.collapseByDefault ? (options.collapseByDefault(e) ? ObjectTreeElementCollapseState.PreserveOrCollapsed : ObjectTreeElementCollapseState.PreserveOrExpanded) : undefined;\n        this.tree = this.createTree(user, container, delegate, renderers, options);\n        this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n        this.root = createAsyncDataTreeNode({\n            element: undefined,\n            parent: null,\n            hasChildren: true,\n            defaultCollapseState: undefined\n        });\n        if (this.identityProvider) {\n            this.root = {\n                ...this.root,\n                id: null\n            };\n        }\n        this.nodes.set(null, this.root);\n        this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asObjectTreeOptions(options) || {};\n        return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.tree.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.tree.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.tree.scrollTop = scrollTop;\n    }\n    get scrollHeight() {\n        return this.tree.scrollHeight;\n    }\n    get renderHeight() {\n        return this.tree.renderHeight;\n    }\n    domFocus() {\n        this.tree.domFocus();\n    }\n    layout(height, width) {\n        this.tree.layout(height, width);\n    }\n    style(styles) {\n        this.tree.style(styles);\n    }\n    // Model\n    getInput() {\n        return this.root.element;\n    }\n    async setInput(input, viewState) {\n        this.refreshPromises.forEach(promise => promise.cancel());\n        this.refreshPromises.clear();\n        this.root.element = input;\n        const viewStateContext = viewState && { viewState, focus: [], selection: [] };\n        await this._updateChildren(input, true, false, viewStateContext);\n        if (viewStateContext) {\n            this.tree.setFocus(viewStateContext.focus);\n            this.tree.setSelection(viewStateContext.selection);\n        }\n        if (viewState && typeof viewState.scrollTop === 'number') {\n            this.scrollTop = viewState.scrollTop;\n        }\n    }\n    async _updateChildren(element = this.root.element, recursive = true, rerender = false, viewStateContext, options) {\n        if (typeof this.root.element === 'undefined') {\n            throw new TreeError(this.user, 'Tree input not set');\n        }\n        if (this.root.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        const node = this.getDataNode(element);\n        await this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n        if (rerender) {\n            try {\n                this.tree.rerender(node);\n            }\n            catch (_a) {\n                // missing nodes are fine, this could've resulted from\n                // parallel refresh calls, removing `node` altogether\n            }\n        }\n    }\n    // View\n    rerender(element) {\n        if (element === undefined || element === this.root.element) {\n            this.tree.rerender();\n            return;\n        }\n        const node = this.getDataNode(element);\n        this.tree.rerender(node);\n    }\n    // Tree\n    getNode(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n        return this.nodeMapper.map(node);\n    }\n    collapse(element, recursive = false) {\n        const node = this.getDataNode(element);\n        return this.tree.collapse(node === this.root ? null : node, recursive);\n    }\n    async expand(element, recursive = false) {\n        if (typeof this.root.element === 'undefined') {\n            throw new TreeError(this.user, 'Tree input not set');\n        }\n        if (this.root.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        const node = this.getDataNode(element);\n        if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n            return false;\n        }\n        if (node.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\n            return false;\n        }\n        const result = this.tree.expand(node === this.root ? null : node, recursive);\n        if (node.refreshPromise) {\n            await this.root.refreshPromise;\n            await Event.toPromise(this._onDidRender.event);\n        }\n        return result;\n    }\n    setSelection(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setSelection(nodes, browserEvent);\n    }\n    getSelection() {\n        const nodes = this.tree.getSelection();\n        return nodes.map(n => n.element);\n    }\n    setFocus(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setFocus(nodes, browserEvent);\n    }\n    getFocus() {\n        const nodes = this.tree.getFocus();\n        return nodes.map(n => n.element);\n    }\n    reveal(element, relativeTop) {\n        this.tree.reveal(this.getDataNode(element), relativeTop);\n    }\n    // Tree navigation\n    getParentElement(element) {\n        const node = this.tree.getParentElement(this.getDataNode(element));\n        return (node && node.element);\n    }\n    getFirstElementChild(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n        return (node && node.element);\n    }\n    // Implementation\n    getDataNode(element) {\n        const node = this.nodes.get((element === this.root.element ? null : element));\n        if (!node) {\n            throw new TreeError(this.user, `Data tree node not found: ${element}`);\n        }\n        return node;\n    }\n    async refreshAndRenderNode(node, recursive, viewStateContext, options) {\n        await this.refreshNode(node, recursive, viewStateContext);\n        this.render(node, viewStateContext, options);\n    }\n    async refreshNode(node, recursive, viewStateContext) {\n        let result;\n        this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n            if (!result && intersects(refreshNode, node)) {\n                result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\n            }\n        });\n        if (result) {\n            return result;\n        }\n        if (node !== this.root) {\n            const treeNode = this.tree.getNode(node);\n            if (treeNode.collapsed) {\n                node.hasChildren = !!this.dataSource.hasChildren(node.element);\n                node.stale = true;\n                return;\n            }\n        }\n        return this.doRefreshSubTree(node, recursive, viewStateContext);\n    }\n    async doRefreshSubTree(node, recursive, viewStateContext) {\n        let done;\n        node.refreshPromise = new Promise(c => done = c);\n        this.subTreeRefreshPromises.set(node, node.refreshPromise);\n        node.refreshPromise.finally(() => {\n            node.refreshPromise = undefined;\n            this.subTreeRefreshPromises.delete(node);\n        });\n        try {\n            const childrenToRefresh = await this.doRefreshNode(node, recursive, viewStateContext);\n            node.stale = false;\n            await Promises.settled(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\n        }\n        finally {\n            done();\n        }\n    }\n    async doRefreshNode(node, recursive, viewStateContext) {\n        node.hasChildren = !!this.dataSource.hasChildren(node.element);\n        let childrenPromise;\n        if (!node.hasChildren) {\n            childrenPromise = Promise.resolve(Iterable.empty());\n        }\n        else {\n            const children = this.doGetChildren(node);\n            if (isIterable(children)) {\n                childrenPromise = Promise.resolve(children);\n            }\n            else {\n                const slowTimeout = timeout(800);\n                slowTimeout.then(() => {\n                    node.slow = true;\n                    this._onDidChangeNodeSlowState.fire(node);\n                }, _ => null);\n                childrenPromise = children.finally(() => slowTimeout.cancel());\n            }\n        }\n        try {\n            const children = await childrenPromise;\n            return this.setChildren(node, children, recursive, viewStateContext);\n        }\n        catch (err) {\n            if (node !== this.root && this.tree.hasElement(node)) {\n                this.tree.collapse(node);\n            }\n            if (isCancellationError(err)) {\n                return [];\n            }\n            throw err;\n        }\n        finally {\n            if (node.slow) {\n                node.slow = false;\n                this._onDidChangeNodeSlowState.fire(node);\n            }\n        }\n    }\n    doGetChildren(node) {\n        let result = this.refreshPromises.get(node);\n        if (result) {\n            return result;\n        }\n        const children = this.dataSource.getChildren(node.element);\n        if (isIterable(children)) {\n            return this.processChildren(children);\n        }\n        else {\n            result = createCancelablePromise(async () => this.processChildren(await children));\n            this.refreshPromises.set(node, result);\n            return result.finally(() => { this.refreshPromises.delete(node); });\n        }\n    }\n    _onDidChangeCollapseState({ node, deep }) {\n        if (node.element === null) {\n            return;\n        }\n        if (!node.collapsed && node.element.stale) {\n            if (deep) {\n                this.collapse(node.element.element);\n            }\n            else {\n                this.refreshAndRenderNode(node.element, false)\n                    .catch(onUnexpectedError);\n            }\n        }\n    }\n    setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n        const childrenElements = [...childrenElementsIterable];\n        // perf: if the node was and still is a leaf, avoid all this hassle\n        if (node.children.length === 0 && childrenElements.length === 0) {\n            return [];\n        }\n        const nodesToForget = new Map();\n        const childrenTreeNodesById = new Map();\n        for (const child of node.children) {\n            nodesToForget.set(child.element, child);\n            if (this.identityProvider) {\n                childrenTreeNodesById.set(child.id, { node: child, collapsed: this.tree.hasElement(child) && this.tree.isCollapsed(child) });\n            }\n        }\n        const childrenToRefresh = [];\n        const children = childrenElements.map(element => {\n            const hasChildren = !!this.dataSource.hasChildren(element);\n            if (!this.identityProvider) {\n                const asyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, hasChildren, defaultCollapseState: this.getDefaultCollapseState(element) });\n                if (hasChildren && asyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const id = this.identityProvider.getId(element).toString();\n            const result = childrenTreeNodesById.get(id);\n            if (result) {\n                const asyncDataTreeNode = result.node;\n                nodesToForget.delete(asyncDataTreeNode.element);\n                this.nodes.delete(asyncDataTreeNode.element);\n                this.nodes.set(element, asyncDataTreeNode);\n                asyncDataTreeNode.element = element;\n                asyncDataTreeNode.hasChildren = hasChildren;\n                if (recursive) {\n                    if (result.collapsed) {\n                        asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n                        asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n                        asyncDataTreeNode.stale = true;\n                    }\n                    else {\n                        childrenToRefresh.push(asyncDataTreeNode);\n                    }\n                }\n                else if (hasChildren && !result.collapsed) {\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const childAsyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, id, hasChildren, defaultCollapseState: this.getDefaultCollapseState(element) });\n            if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n                viewStateContext.focus.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n                viewStateContext.selection.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            else if (hasChildren && childAsyncDataTreeNode.defaultCollapseState === ObjectTreeElementCollapseState.PreserveOrExpanded) {\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            return childAsyncDataTreeNode;\n        });\n        for (const node of nodesToForget.values()) {\n            dfs(node, node => this.nodes.delete(node.element));\n        }\n        for (const child of children) {\n            this.nodes.set(child.element, child);\n        }\n        node.children.splice(0, node.children.length, ...children);\n        // TODO@joao this doesn't take filter into account\n        if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n            children[0].forceExpanded = true;\n            childrenToRefresh.push(children[0]);\n        }\n        return childrenToRefresh;\n    }\n    render(node, viewStateContext, options) {\n        const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n        const objectTreeOptions = options && {\n            ...options,\n            diffIdentityProvider: options.diffIdentityProvider && {\n                getId(node) {\n                    return options.diffIdentityProvider.getId(node.element);\n                }\n            }\n        };\n        this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n        if (node !== this.root) {\n            this.tree.setCollapsible(node, node.hasChildren);\n        }\n        this._onDidRender.fire();\n    }\n    asTreeElement(node, viewStateContext) {\n        if (node.stale) {\n            return {\n                element: node,\n                collapsible: node.hasChildren,\n                collapsed: true\n            };\n        }\n        let collapsed;\n        if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n            collapsed = false;\n        }\n        else if (node.forceExpanded) {\n            collapsed = false;\n            node.forceExpanded = false;\n        }\n        else {\n            collapsed = node.defaultCollapseState;\n        }\n        return {\n            element: node,\n            children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n            collapsible: node.hasChildren,\n            collapsed\n        };\n    }\n    processChildren(children) {\n        if (this.sorter) {\n            children = [...children].sort(this.sorter.compare.bind(this.sorter));\n        }\n        return children;\n    }\n    dispose() {\n        this.disposables.dispose();\n        this.tree.dispose();\n    }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n    get element() {\n        return {\n            elements: this.node.element.elements.map(e => e.element),\n            incompressible: this.node.element.incompressible\n        };\n    }\n    get children() { return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(node) {\n        this.node = node;\n    }\n}\nclass CompressibleAsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.disposables = [];\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderCompressedElements(node, index, templateData, height) {\n        this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeCompressedElements(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeCompressedElements) === null || _b === void 0 ? void 0 : _b.call(_a, this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.disposables = dispose(this.disposables);\n    }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n    const objectTreeOptions = options && asObjectTreeOptions(options);\n    return objectTreeOptions && {\n        ...objectTreeOptions,\n        keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && {\n            ...objectTreeOptions.keyboardNavigationLabelProvider,\n            getCompressedNodeKeyboardNavigationLabel(els) {\n                return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n            }\n        }\n    };\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\n        super(user, container, virtualDelegate, renderers, dataSource, options);\n        this.compressionDelegate = compressionDelegate;\n        this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n        this.filter = options.filter;\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n        return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    asTreeElement(node, viewStateContext) {\n        return {\n            incompressible: this.compressionDelegate.isIncompressible(node.element),\n            ...super.asTreeElement(node, viewStateContext)\n        };\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    render(node, viewStateContext) {\n        if (!this.identityProvider) {\n            return super.render(node, viewStateContext);\n        }\n        // Preserve traits across compressions. Hacky but does the trick.\n        // This is hard to fix properly since it requires rewriting the traits\n        // across trees and lists. Let's just keep it this way for now.\n        const getId = (element) => this.identityProvider.getId(element).toString();\n        const getUncompressedIds = (nodes) => {\n            const result = new Set();\n            for (const node of nodes) {\n                const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n                if (!compressedNode.element) {\n                    continue;\n                }\n                for (const node of compressedNode.element.elements) {\n                    result.add(getId(node.element));\n                }\n            }\n            return result;\n        };\n        const oldSelection = getUncompressedIds(this.tree.getSelection());\n        const oldFocus = getUncompressedIds(this.tree.getFocus());\n        super.render(node, viewStateContext);\n        const selection = this.getSelection();\n        let didChangeSelection = false;\n        const focus = this.getFocus();\n        let didChangeFocus = false;\n        const visit = (node) => {\n            const compressedNode = node.element;\n            if (compressedNode) {\n                for (let i = 0; i < compressedNode.elements.length; i++) {\n                    const id = getId(compressedNode.elements[i].element);\n                    const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n                    // github.com/microsoft/vscode/issues/85938\n                    if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n                        selection.push(element);\n                        didChangeSelection = true;\n                    }\n                    if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n                        focus.push(element);\n                        didChangeFocus = true;\n                    }\n                }\n            }\n            node.children.forEach(visit);\n        };\n        visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n        if (didChangeSelection) {\n            this.setSelection(selection);\n        }\n        if (didChangeFocus) {\n            this.setFocus(focus);\n        }\n    }\n    // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n    // and we have to filter everything beforehand\n    // Related to #85193 and #85835\n    processChildren(children) {\n        if (this.filter) {\n            children = Iterable.filter(children, e => {\n                const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n                const visibility = getVisibility(result);\n                if (visibility === 2 /* TreeVisibility.Recurse */) {\n                    throw new Error('Recursive tree visibility not supported in async data compressed trees');\n                }\n                return visibility === 1 /* TreeVisibility.Visible */;\n            });\n        }\n        return super.processChildren(children);\n    }\n}\nfunction getVisibility(filterResult) {\n    if (typeof filterResult === 'boolean') {\n        return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n    }\n    else if (isFilterResult(filterResult)) {\n        return getVisibleState(filterResult.visibility);\n    }\n    else {\n        return getVisibleState(filterResult);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { AbstractTree } from './abstractTree.js';\nimport { ObjectTreeModel } from './objectTreeModel.js';\nexport class DataTree extends AbstractTree {\n    constructor(user, container, delegate, renderers, dataSource, options = {}) {\n        super(user, container, delegate, renderers, options);\n        this.user = user;\n        this.dataSource = dataSource;\n        this.identityProvider = options.identityProvider;\n    }\n    createModel(user, view, options) {\n        return new ObjectTreeModel(user, view, options);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { env } from '../../../base/common/process.js';\n/**\n * @deprecated You MUST use `IProductService` if possible.\n */\nlet product;\n// Native sandbox environment\nconst vscodeGlobal = globalThis.vscode;\nif (typeof vscodeGlobal !== 'undefined' && typeof vscodeGlobal.context !== 'undefined') {\n    const configuration = vscodeGlobal.context.configuration();\n    if (configuration) {\n        product = configuration.product;\n    }\n    else {\n        throw new Error('Sandbox: unable to resolve product configuration from preload script.');\n    }\n}\n// _VSCODE environment\nelse if (globalThis._VSCODE_PRODUCT_JSON && globalThis._VSCODE_PACKAGE_JSON) {\n    // Obtain values from product.json and package.json-data\n    product = globalThis._VSCODE_PRODUCT_JSON;\n    // Running out of sources\n    if (env['VSCODE_DEV']) {\n        Object.assign(product, {\n            nameShort: `${product.nameShort} Dev`,\n            nameLong: `${product.nameLong} Dev`,\n            dataFolderName: `${product.dataFolderName}-dev`,\n            serverDataFolderName: product.serverDataFolderName ? `${product.serverDataFolderName}-dev` : undefined\n        });\n    }\n    // Version is added during built time, but we still\n    // want to have it running out of sources so we\n    // read it from package.json only when we need it.\n    if (!product.version) {\n        const pkg = globalThis._VSCODE_PACKAGE_JSON;\n        Object.assign(product, {\n            version: pkg.version\n        });\n    }\n}\n// Web environment or unknown\nelse {\n    // Built time configuration (do NOT modify)\n    product = { /*BUILD->INSERT_PRODUCT_CONFIGURATION*/};\n    // Running out of sources\n    if (Object.keys(product).length === 0) {\n        Object.assign(product, {\n            version: '1.82.0-dev',\n            nameShort: 'Code - OSS Dev',\n            nameLong: 'Code - OSS Dev',\n            applicationName: 'code-oss',\n            dataFolderName: '.vscode-oss',\n            urlProtocol: 'code-oss',\n            reportIssueUrl: 'https://github.com/microsoft/vscode/issues/new',\n            licenseName: 'MIT',\n            licenseUrl: 'https://github.com/microsoft/vscode/blob/main/LICENSE.txt',\n            serverLicenseUrl: 'https://github.com/microsoft/vscode/blob/main/LICENSE.txt'\n        });\n    }\n}\n/**\n * @deprecated You MUST use `IProductService` if possible.\n */\nexport default product;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { createStyleSheet, isActiveElement, isKeyboardEvent } from '../../../base/browser/dom.js';\nimport { PagedList } from '../../../base/browser/ui/list/listPaging.js';\nimport { DefaultStyleController, isSelectionRangeChangeEvent, isSelectionSingleChangeEvent, List, TypeNavigationMode } from '../../../base/browser/ui/list/listWidget.js';\nimport { Table } from '../../../base/browser/ui/table/tableWidget.js';\nimport { TreeFindMode, TreeFindMatchType } from '../../../base/browser/ui/tree/abstractTree.js';\nimport { AsyncDataTree, CompressibleAsyncDataTree } from '../../../base/browser/ui/tree/asyncDataTree.js';\nimport { DataTree } from '../../../base/browser/ui/tree/dataTree.js';\nimport { CompressibleObjectTree, ObjectTree } from '../../../base/browser/ui/tree/objectTree.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable, DisposableStore, dispose, toDisposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { Extensions as ConfigurationExtensions } from '../../configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey.js';\nimport { InputFocusedContextKey } from '../../contextkey/common/contextkeys.js';\nimport { IContextViewService } from '../../contextview/browser/contextView.js';\nimport { createDecorator, IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport product from '../../product/common/product.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport { defaultFindWidgetStyles, defaultListStyles, getListStyles } from '../../theme/browser/defaultStyles.js';\nexport const IListService = createDecorator('listService');\nexport class ListService {\n    get lastFocusedList() {\n        return this._lastFocusedWidget;\n    }\n    constructor() {\n        this.disposables = new DisposableStore();\n        this.lists = [];\n        this._lastFocusedWidget = undefined;\n        this._hasCreatedStyleController = false;\n    }\n    setLastFocusedList(widget) {\n        var _a, _b;\n        if (widget === this._lastFocusedWidget) {\n            return;\n        }\n        (_a = this._lastFocusedWidget) === null || _a === void 0 ? void 0 : _a.getHTMLElement().classList.remove('last-focused');\n        this._lastFocusedWidget = widget;\n        (_b = this._lastFocusedWidget) === null || _b === void 0 ? void 0 : _b.getHTMLElement().classList.add('last-focused');\n    }\n    register(widget, extraContextKeys) {\n        if (!this._hasCreatedStyleController) {\n            this._hasCreatedStyleController = true;\n            // create a shared default tree style sheet for performance reasons\n            const styleController = new DefaultStyleController(createStyleSheet(), '');\n            styleController.style(defaultListStyles);\n        }\n        if (this.lists.some(l => l.widget === widget)) {\n            throw new Error('Cannot register the same widget multiple times');\n        }\n        // Keep in our lists list\n        const registeredList = { widget, extraContextKeys };\n        this.lists.push(registeredList);\n        // Check for currently being focused\n        if (isActiveElement(widget.getHTMLElement())) {\n            this.setLastFocusedList(widget);\n        }\n        return combinedDisposable(widget.onDidFocus(() => this.setLastFocusedList(widget)), toDisposable(() => this.lists.splice(this.lists.indexOf(registeredList), 1)), widget.onDidDispose(() => {\n            this.lists = this.lists.filter(l => l !== registeredList);\n            if (this._lastFocusedWidget === widget) {\n                this.setLastFocusedList(undefined);\n            }\n        }));\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n}\nexport const RawWorkbenchListScrollAtBoundaryContextKey = new RawContextKey('listScrollAtBoundary', 'none');\nexport const WorkbenchListScrollAtTopContextKey = ContextKeyExpr.or(RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('top'), RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('both'));\nexport const WorkbenchListScrollAtBottomContextKey = ContextKeyExpr.or(RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('bottom'), RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('both'));\nexport const RawWorkbenchListFocusContextKey = new RawContextKey('listFocus', true);\nexport const WorkbenchListSupportsMultiSelectContextKey = new RawContextKey('listSupportsMultiselect', true);\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(RawWorkbenchListFocusContextKey, ContextKeyExpr.not(InputFocusedContextKey));\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey('listHasSelectionOrFocus', false);\nexport const WorkbenchListDoubleSelection = new RawContextKey('listDoubleSelection', false);\nexport const WorkbenchListMultiSelection = new RawContextKey('listMultiSelection', false);\nexport const WorkbenchListSelectionNavigation = new RawContextKey('listSelectionNavigation', false);\nexport const WorkbenchListSupportsFind = new RawContextKey('listSupportsFind', true);\nexport const WorkbenchTreeElementCanCollapse = new RawContextKey('treeElementCanCollapse', false);\nexport const WorkbenchTreeElementHasParent = new RawContextKey('treeElementHasParent', false);\nexport const WorkbenchTreeElementCanExpand = new RawContextKey('treeElementCanExpand', false);\nexport const WorkbenchTreeElementHasChild = new RawContextKey('treeElementHasChild', false);\nexport const WorkbenchTreeFindOpen = new RawContextKey('treeFindOpen', false);\nconst WorkbenchListTypeNavigationModeKey = 'listTypeNavigationMode';\n/**\n * @deprecated in favor of WorkbenchListTypeNavigationModeKey\n */\nconst WorkbenchListAutomaticKeyboardNavigationLegacyKey = 'listAutomaticKeyboardNavigation';\nfunction createScopedContextKeyService(contextKeyService, widget) {\n    const result = contextKeyService.createScoped(widget.getHTMLElement());\n    RawWorkbenchListFocusContextKey.bindTo(result);\n    return result;\n}\nfunction createScrollObserver(contextKeyService, widget) {\n    const listScrollAt = RawWorkbenchListScrollAtBoundaryContextKey.bindTo(contextKeyService);\n    const update = () => {\n        const atTop = widget.scrollTop === 0;\n        // We need a threshold `1` since scrollHeight is rounded.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#determine_if_an_element_has_been_totally_scrolled\n        const atBottom = widget.scrollHeight - widget.renderHeight - widget.scrollTop < 1;\n        if (atTop && atBottom) {\n            listScrollAt.set('both');\n        }\n        else if (atTop) {\n            listScrollAt.set('top');\n        }\n        else if (atBottom) {\n            listScrollAt.set('bottom');\n        }\n        else {\n            listScrollAt.set('none');\n        }\n    };\n    update();\n    return widget.onDidScroll(update);\n}\nconst multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\nconst openModeSettingKey = 'workbench.list.openMode';\nconst horizontalScrollingKey = 'workbench.list.horizontalScrolling';\nconst defaultFindModeSettingKey = 'workbench.list.defaultFindMode';\nconst typeNavigationModeSettingKey = 'workbench.list.typeNavigationMode';\n/** @deprecated in favor of `workbench.list.defaultFindMode` and `workbench.list.typeNavigationMode` */\nconst keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\nconst scrollByPageKey = 'workbench.list.scrollByPage';\nconst defaultFindMatchTypeSettingKey = 'workbench.list.defaultFindMatchType';\nconst treeIndentKey = 'workbench.tree.indent';\nconst treeRenderIndentGuidesKey = 'workbench.tree.renderIndentGuides';\nconst listSmoothScrolling = 'workbench.list.smoothScrolling';\nconst mouseWheelScrollSensitivityKey = 'workbench.list.mouseWheelScrollSensitivity';\nconst fastScrollSensitivityKey = 'workbench.list.fastScrollSensitivity';\nconst treeExpandMode = 'workbench.tree.expandMode';\nconst treeStickyScroll = 'workbench.tree.enableStickyScroll';\nconst treeStickyScrollMaxElements = 'workbench.tree.stickyScrollMaxItemCount';\nfunction useAltAsMultipleSelectionModifier(configurationService) {\n    return configurationService.getValue(multiSelectModifierSettingKey) === 'alt';\n}\nclass MultipleSelectionController extends Disposable {\n    constructor(configurationService) {\n        super();\n        this.configurationService = configurationService;\n        this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n            }\n        }));\n    }\n    isSelectionSingleChangeEvent(event) {\n        if (this.useAltAsMultipleSelectionModifier) {\n            return event.browserEvent.altKey;\n        }\n        return isSelectionSingleChangeEvent(event);\n    }\n    isSelectionRangeChangeEvent(event) {\n        return isSelectionRangeChangeEvent(event);\n    }\n}\nfunction toWorkbenchListOptions(accessor, options) {\n    var _a;\n    const configurationService = accessor.get(IConfigurationService);\n    const keybindingService = accessor.get(IKeybindingService);\n    const disposables = new DisposableStore();\n    const result = {\n        ...options,\n        keyboardNavigationDelegate: { mightProducePrintableCharacter(e) { return keybindingService.mightProducePrintableCharacter(e); } },\n        smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)),\n        mouseWheelScrollSensitivity: configurationService.getValue(mouseWheelScrollSensitivityKey),\n        fastScrollSensitivity: configurationService.getValue(fastScrollSensitivityKey),\n        multipleSelectionController: (_a = options.multipleSelectionController) !== null && _a !== void 0 ? _a : disposables.add(new MultipleSelectionController(configurationService)),\n        keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(keybindingService),\n        scrollByPage: Boolean(configurationService.getValue(scrollByPageKey))\n    };\n    return [result, disposables];\n}\nlet WorkbenchList = class WorkbenchList extends List {\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, configurationService, instantiationService) {\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n        const [workbenchListOptions, workbenchListOptionsDisposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n        super(user, container, delegate, renderers, {\n            keyboardSupport: false,\n            ...workbenchListOptions,\n            horizontalScrolling,\n        });\n        this.disposables.add(workbenchListOptionsDisposable);\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n        this.disposables.add(createScrollObserver(this.contextKeyService, this));\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n        this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n        this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n        this.horizontalScrolling = options.horizontalScrolling;\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.disposables.add(this.contextKeyService);\n        this.disposables.add(listService.register(this));\n        this.updateStyles(options.overrideStyles);\n        this.disposables.add(this.onDidChangeSelection(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.contextKeyService.bufferChangeEvents(() => {\n                this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                this.listMultiSelection.set(selection.length > 1);\n                this.listDoubleSelection.set(selection.length === 2);\n            });\n        }));\n        this.disposables.add(this.onDidChangeFocus(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        }));\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            let options = {};\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                options = { ...options, horizontalScrolling };\n            }\n            if (e.affectsConfiguration(scrollByPageKey)) {\n                const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n                options = { ...options, scrollByPage };\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                options = { ...options, smoothScrolling };\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                options = { ...options, mouseWheelScrollSensitivity };\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                options = { ...options, fastScrollSensitivity };\n            }\n            if (Object.keys(options).length > 0) {\n                this.updateOptions(options);\n            }\n        }));\n        this.navigator = new ListResourceNavigator(this, { configurationService, ...options });\n        this.disposables.add(this.navigator);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        if (options.overrideStyles !== undefined) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyles(styles) {\n        this.style(styles ? getListStyles(styles) : defaultListStyles);\n    }\n};\nWorkbenchList = __decorate([\n    __param(5, IContextKeyService),\n    __param(6, IListService),\n    __param(7, IConfigurationService),\n    __param(8, IInstantiationService)\n], WorkbenchList);\nexport { WorkbenchList };\nlet WorkbenchPagedList = class WorkbenchPagedList extends PagedList {\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, configurationService, instantiationService) {\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n        const [workbenchListOptions, workbenchListOptionsDisposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n        super(user, container, delegate, renderers, {\n            keyboardSupport: false,\n            ...workbenchListOptions,\n            horizontalScrolling,\n        });\n        this.disposables = new DisposableStore();\n        this.disposables.add(workbenchListOptionsDisposable);\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n        this.disposables.add(createScrollObserver(this.contextKeyService, this.widget));\n        this.horizontalScrolling = options.horizontalScrolling;\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.disposables.add(this.contextKeyService);\n        this.disposables.add(listService.register(this));\n        this.updateStyles(options.overrideStyles);\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            let options = {};\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                options = { ...options, horizontalScrolling };\n            }\n            if (e.affectsConfiguration(scrollByPageKey)) {\n                const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n                options = { ...options, scrollByPage };\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                options = { ...options, smoothScrolling };\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                options = { ...options, mouseWheelScrollSensitivity };\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                options = { ...options, fastScrollSensitivity };\n            }\n            if (Object.keys(options).length > 0) {\n                this.updateOptions(options);\n            }\n        }));\n        this.navigator = new ListResourceNavigator(this, { configurationService, ...options });\n        this.disposables.add(this.navigator);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        if (options.overrideStyles !== undefined) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyles(styles) {\n        this.style(styles ? getListStyles(styles) : defaultListStyles);\n    }\n    dispose() {\n        this.disposables.dispose();\n        super.dispose();\n    }\n};\nWorkbenchPagedList = __decorate([\n    __param(5, IContextKeyService),\n    __param(6, IListService),\n    __param(7, IConfigurationService),\n    __param(8, IInstantiationService)\n], WorkbenchPagedList);\nexport { WorkbenchPagedList };\nlet WorkbenchTable = class WorkbenchTable extends Table {\n    constructor(user, container, delegate, columns, renderers, options, contextKeyService, listService, configurationService, instantiationService) {\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n        const [workbenchListOptions, workbenchListOptionsDisposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n        super(user, container, delegate, columns, renderers, {\n            keyboardSupport: false,\n            ...workbenchListOptions,\n            horizontalScrolling,\n        });\n        this.disposables.add(workbenchListOptionsDisposable);\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n        this.disposables.add(createScrollObserver(this.contextKeyService, this));\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n        this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n        this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n        this.horizontalScrolling = options.horizontalScrolling;\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.disposables.add(this.contextKeyService);\n        this.disposables.add(listService.register(this));\n        this.updateStyles(options.overrideStyles);\n        this.disposables.add(this.onDidChangeSelection(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.contextKeyService.bufferChangeEvents(() => {\n                this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                this.listMultiSelection.set(selection.length > 1);\n                this.listDoubleSelection.set(selection.length === 2);\n            });\n        }));\n        this.disposables.add(this.onDidChangeFocus(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        }));\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            let options = {};\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                options = { ...options, horizontalScrolling };\n            }\n            if (e.affectsConfiguration(scrollByPageKey)) {\n                const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n                options = { ...options, scrollByPage };\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                options = { ...options, smoothScrolling };\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                options = { ...options, mouseWheelScrollSensitivity };\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                options = { ...options, fastScrollSensitivity };\n            }\n            if (Object.keys(options).length > 0) {\n                this.updateOptions(options);\n            }\n        }));\n        this.navigator = new TableResourceNavigator(this, { configurationService, ...options });\n        this.disposables.add(this.navigator);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        if (options.overrideStyles !== undefined) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyles(styles) {\n        this.style(styles ? getListStyles(styles) : defaultListStyles);\n    }\n    dispose() {\n        this.disposables.dispose();\n        super.dispose();\n    }\n};\nWorkbenchTable = __decorate([\n    __param(6, IContextKeyService),\n    __param(7, IListService),\n    __param(8, IConfigurationService),\n    __param(9, IInstantiationService)\n], WorkbenchTable);\nexport { WorkbenchTable };\nclass ResourceNavigator extends Disposable {\n    constructor(widget, options) {\n        var _a;\n        super();\n        this.widget = widget;\n        this._onDidOpen = this._register(new Emitter());\n        this.onDidOpen = this._onDidOpen.event;\n        this._register(Event.filter(this.widget.onDidChangeSelection, e => isKeyboardEvent(e.browserEvent))(e => this.onSelectionFromKeyboard(e)));\n        this._register(this.widget.onPointer((e) => this.onPointer(e.element, e.browserEvent)));\n        this._register(this.widget.onMouseDblClick((e) => this.onMouseDblClick(e.element, e.browserEvent)));\n        if (typeof (options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== 'boolean' && (options === null || options === void 0 ? void 0 : options.configurationService)) {\n            this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n            this._register(options === null || options === void 0 ? void 0 : options.configurationService.onDidChangeConfiguration(e => {\n                if (e.affectsConfiguration(openModeSettingKey)) {\n                    this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n                }\n            }));\n        }\n        else {\n            this.openOnSingleClick = (_a = options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== null && _a !== void 0 ? _a : true;\n        }\n    }\n    onSelectionFromKeyboard(event) {\n        if (event.elements.length !== 1) {\n            return;\n        }\n        const selectionKeyboardEvent = event.browserEvent;\n        const preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus : true;\n        const pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned : !preserveFocus;\n        const sideBySide = false;\n        this._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\n    }\n    onPointer(element, browserEvent) {\n        if (!this.openOnSingleClick) {\n            return;\n        }\n        const isDoubleClick = browserEvent.detail === 2;\n        if (isDoubleClick) {\n            return;\n        }\n        const isMiddleClick = browserEvent.button === 1;\n        const preserveFocus = true;\n        const pinned = isMiddleClick;\n        const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n        this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n    }\n    onMouseDblClick(element, browserEvent) {\n        if (!browserEvent) {\n            return;\n        }\n        // copied from AbstractTree\n        const target = browserEvent.target;\n        const onTwistie = target.classList.contains('monaco-tl-twistie')\n            || (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && browserEvent.offsetX < 16);\n        if (onTwistie) {\n            return;\n        }\n        const preserveFocus = false;\n        const pinned = true;\n        const sideBySide = (browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey);\n        this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n    }\n    _open(element, preserveFocus, pinned, sideBySide, browserEvent) {\n        if (!element) {\n            return;\n        }\n        this._onDidOpen.fire({\n            editorOptions: {\n                preserveFocus,\n                pinned,\n                revealIfVisible: true\n            },\n            sideBySide,\n            element,\n            browserEvent\n        });\n    }\n}\nclass ListResourceNavigator extends ResourceNavigator {\n    constructor(widget, options) {\n        super(widget, options);\n        this.widget = widget;\n    }\n    getSelectedElement() {\n        return this.widget.getSelectedElements()[0];\n    }\n}\nclass TableResourceNavigator extends ResourceNavigator {\n    constructor(widget, options) {\n        super(widget, options);\n    }\n    getSelectedElement() {\n        return this.widget.getSelectedElements()[0];\n    }\n}\nclass TreeResourceNavigator extends ResourceNavigator {\n    constructor(widget, options) {\n        super(widget, options);\n    }\n    getSelectedElement() {\n        var _a;\n        return (_a = this.widget.getSelection()[0]) !== null && _a !== void 0 ? _a : undefined;\n    }\n}\nfunction createKeyboardNavigationEventFilter(keybindingService) {\n    let inMultiChord = false;\n    return event => {\n        if (event.toKeyCodeChord().isModifierKey()) {\n            return false;\n        }\n        if (inMultiChord) {\n            inMultiChord = false;\n            return false;\n        }\n        const result = keybindingService.softDispatch(event, event.target);\n        if (result.kind === 1 /* ResultKind.MoreChordsNeeded */) {\n            inMultiChord = true;\n            return false;\n        }\n        inMultiChord = false;\n        return result.kind === 0 /* ResultKind.NoMatchingKb */;\n    };\n}\nlet WorkbenchObjectTree = class WorkbenchObjectTree extends ObjectTree {\n    constructor(user, container, delegate, renderers, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, delegate, renderers, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchObjectTree = __decorate([\n    __param(5, IInstantiationService),\n    __param(6, IContextKeyService),\n    __param(7, IListService),\n    __param(8, IConfigurationService)\n], WorkbenchObjectTree);\nexport { WorkbenchObjectTree };\nlet WorkbenchCompressibleObjectTree = class WorkbenchCompressibleObjectTree extends CompressibleObjectTree {\n    constructor(user, container, delegate, renderers, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, delegate, renderers, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options = {}) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.internals.updateStyleOverrides(options.overrideStyles);\n        }\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchCompressibleObjectTree = __decorate([\n    __param(5, IInstantiationService),\n    __param(6, IContextKeyService),\n    __param(7, IListService),\n    __param(8, IConfigurationService)\n], WorkbenchCompressibleObjectTree);\nexport { WorkbenchCompressibleObjectTree };\nlet WorkbenchDataTree = class WorkbenchDataTree extends DataTree {\n    constructor(user, container, delegate, renderers, dataSource, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, delegate, renderers, dataSource, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options = {}) {\n        super.updateOptions(options);\n        if (options.overrideStyles !== undefined) {\n            this.internals.updateStyleOverrides(options.overrideStyles);\n        }\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchDataTree = __decorate([\n    __param(6, IInstantiationService),\n    __param(7, IContextKeyService),\n    __param(8, IListService),\n    __param(9, IConfigurationService)\n], WorkbenchDataTree);\nexport { WorkbenchDataTree };\nlet WorkbenchAsyncDataTree = class WorkbenchAsyncDataTree extends AsyncDataTree {\n    get onDidOpen() { return this.internals.onDidOpen; }\n    constructor(user, container, delegate, renderers, dataSource, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, delegate, renderers, dataSource, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options = {}) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.internals.updateStyleOverrides(options.overrideStyles);\n        }\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchAsyncDataTree = __decorate([\n    __param(6, IInstantiationService),\n    __param(7, IContextKeyService),\n    __param(8, IListService),\n    __param(9, IConfigurationService)\n], WorkbenchAsyncDataTree);\nexport { WorkbenchAsyncDataTree };\nlet WorkbenchCompressibleAsyncDataTree = class WorkbenchCompressibleAsyncDataTree extends CompressibleAsyncDataTree {\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchCompressibleAsyncDataTree = __decorate([\n    __param(7, IInstantiationService),\n    __param(8, IContextKeyService),\n    __param(9, IListService),\n    __param(10, IConfigurationService)\n], WorkbenchCompressibleAsyncDataTree);\nexport { WorkbenchCompressibleAsyncDataTree };\nfunction getDefaultTreeFindMode(configurationService) {\n    const value = configurationService.getValue(defaultFindModeSettingKey);\n    if (value === 'highlight') {\n        return TreeFindMode.Highlight;\n    }\n    else if (value === 'filter') {\n        return TreeFindMode.Filter;\n    }\n    const deprecatedValue = configurationService.getValue(keyboardNavigationSettingKey);\n    if (deprecatedValue === 'simple' || deprecatedValue === 'highlight') {\n        return TreeFindMode.Highlight;\n    }\n    else if (deprecatedValue === 'filter') {\n        return TreeFindMode.Filter;\n    }\n    return undefined;\n}\nfunction getDefaultTreeFindMatchType(configurationService) {\n    const value = configurationService.getValue(defaultFindMatchTypeSettingKey);\n    if (value === 'fuzzy') {\n        return TreeFindMatchType.Fuzzy;\n    }\n    else if (value === 'contiguous') {\n        return TreeFindMatchType.Contiguous;\n    }\n    return undefined;\n}\nfunction workbenchTreeDataPreamble(accessor, options) {\n    var _a;\n    const configurationService = accessor.get(IConfigurationService);\n    const contextViewService = accessor.get(IContextViewService);\n    const contextKeyService = accessor.get(IContextKeyService);\n    const instantiationService = accessor.get(IInstantiationService);\n    const getTypeNavigationMode = () => {\n        // give priority to the context key value to specify a value\n        const modeString = contextKeyService.getContextKeyValue(WorkbenchListTypeNavigationModeKey);\n        if (modeString === 'automatic') {\n            return TypeNavigationMode.Automatic;\n        }\n        else if (modeString === 'trigger') {\n            return TypeNavigationMode.Trigger;\n        }\n        // also check the deprecated context key to set the mode to 'trigger'\n        const modeBoolean = contextKeyService.getContextKeyValue(WorkbenchListAutomaticKeyboardNavigationLegacyKey);\n        if (modeBoolean === false) {\n            return TypeNavigationMode.Trigger;\n        }\n        // finally, check the setting\n        const configString = configurationService.getValue(typeNavigationModeSettingKey);\n        if (configString === 'automatic') {\n            return TypeNavigationMode.Automatic;\n        }\n        else if (configString === 'trigger') {\n            return TypeNavigationMode.Trigger;\n        }\n        return undefined;\n    };\n    const horizontalScrolling = options.horizontalScrolling !== undefined ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n    const [workbenchListOptions, disposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n    const paddingBottom = options.paddingBottom;\n    const renderIndentGuides = options.renderIndentGuides !== undefined ? options.renderIndentGuides : configurationService.getValue(treeRenderIndentGuidesKey);\n    return {\n        getTypeNavigationMode,\n        disposable,\n        options: {\n            // ...options, // TODO@Joao why is this not splatted here?\n            keyboardSupport: false,\n            ...workbenchListOptions,\n            indent: typeof configurationService.getValue(treeIndentKey) === 'number' ? configurationService.getValue(treeIndentKey) : undefined,\n            renderIndentGuides,\n            smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)),\n            defaultFindMode: getDefaultTreeFindMode(configurationService),\n            defaultFindMatchType: getDefaultTreeFindMatchType(configurationService),\n            horizontalScrolling,\n            scrollByPage: Boolean(configurationService.getValue(scrollByPageKey)),\n            paddingBottom: paddingBottom,\n            hideTwistiesOfChildlessElements: options.hideTwistiesOfChildlessElements,\n            expandOnlyOnTwistieClick: (_a = options.expandOnlyOnTwistieClick) !== null && _a !== void 0 ? _a : (configurationService.getValue(treeExpandMode) === 'doubleClick'),\n            contextViewProvider: contextViewService,\n            findWidgetStyles: defaultFindWidgetStyles,\n            enableStickyScroll: Boolean(configurationService.getValue(treeStickyScroll)),\n            stickyScrollMaxItemCount: Number(configurationService.getValue(treeStickyScrollMaxElements)),\n        }\n    };\n}\nlet WorkbenchTreeInternals = class WorkbenchTreeInternals {\n    get onDidOpen() { return this.navigator.onDidOpen; }\n    constructor(tree, options, getTypeNavigationMode, overrideStyles, contextKeyService, listService, configurationService) {\n        var _a;\n        this.tree = tree;\n        this.disposables = [];\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, tree);\n        this.disposables.push(createScrollObserver(this.contextKeyService, tree));\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this.listSupportFindWidget = WorkbenchListSupportsFind.bindTo(this.contextKeyService);\n        this.listSupportFindWidget.set((_a = options.findWidgetEnabled) !== null && _a !== void 0 ? _a : true);\n        this.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n        this.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n        this.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n        this.treeElementCanCollapse = WorkbenchTreeElementCanCollapse.bindTo(this.contextKeyService);\n        this.treeElementHasParent = WorkbenchTreeElementHasParent.bindTo(this.contextKeyService);\n        this.treeElementCanExpand = WorkbenchTreeElementCanExpand.bindTo(this.contextKeyService);\n        this.treeElementHasChild = WorkbenchTreeElementHasChild.bindTo(this.contextKeyService);\n        this.treeFindOpen = WorkbenchTreeFindOpen.bindTo(this.contextKeyService);\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.updateStyleOverrides(overrideStyles);\n        const updateCollapseContextKeys = () => {\n            const focus = tree.getFocus()[0];\n            if (!focus) {\n                return;\n            }\n            const node = tree.getNode(focus);\n            this.treeElementCanCollapse.set(node.collapsible && !node.collapsed);\n            this.treeElementHasParent.set(!!tree.getParentElement(focus));\n            this.treeElementCanExpand.set(node.collapsible && node.collapsed);\n            this.treeElementHasChild.set(!!tree.getFirstElementChild(focus));\n        };\n        const interestingContextKeys = new Set();\n        interestingContextKeys.add(WorkbenchListTypeNavigationModeKey);\n        interestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationLegacyKey);\n        this.disposables.push(this.contextKeyService, listService.register(tree), tree.onDidChangeSelection(() => {\n            const selection = tree.getSelection();\n            const focus = tree.getFocus();\n            this.contextKeyService.bufferChangeEvents(() => {\n                this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                this.hasMultiSelection.set(selection.length > 1);\n                this.hasDoubleSelection.set(selection.length === 2);\n            });\n        }), tree.onDidChangeFocus(() => {\n            const selection = tree.getSelection();\n            const focus = tree.getFocus();\n            this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n            updateCollapseContextKeys();\n        }), tree.onDidChangeCollapseState(updateCollapseContextKeys), tree.onDidChangeModel(updateCollapseContextKeys), tree.onDidChangeFindOpenState(enabled => this.treeFindOpen.set(enabled)), configurationService.onDidChangeConfiguration(e => {\n            let newOptions = {};\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            if (e.affectsConfiguration(treeIndentKey)) {\n                const indent = configurationService.getValue(treeIndentKey);\n                newOptions = { ...newOptions, indent };\n            }\n            if (e.affectsConfiguration(treeRenderIndentGuidesKey) && options.renderIndentGuides === undefined) {\n                const renderIndentGuides = configurationService.getValue(treeRenderIndentGuidesKey);\n                newOptions = { ...newOptions, renderIndentGuides };\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                newOptions = { ...newOptions, smoothScrolling };\n            }\n            if (e.affectsConfiguration(defaultFindModeSettingKey) || e.affectsConfiguration(keyboardNavigationSettingKey)) {\n                const defaultFindMode = getDefaultTreeFindMode(configurationService);\n                newOptions = { ...newOptions, defaultFindMode };\n            }\n            if (e.affectsConfiguration(typeNavigationModeSettingKey) || e.affectsConfiguration(keyboardNavigationSettingKey)) {\n                const typeNavigationMode = getTypeNavigationMode();\n                newOptions = { ...newOptions, typeNavigationMode };\n            }\n            if (e.affectsConfiguration(defaultFindMatchTypeSettingKey)) {\n                const defaultFindMatchType = getDefaultTreeFindMatchType(configurationService);\n                newOptions = { ...newOptions, defaultFindMatchType };\n            }\n            if (e.affectsConfiguration(horizontalScrollingKey) && options.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                newOptions = { ...newOptions, horizontalScrolling };\n            }\n            if (e.affectsConfiguration(scrollByPageKey)) {\n                const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n                newOptions = { ...newOptions, scrollByPage };\n            }\n            if (e.affectsConfiguration(treeExpandMode) && options.expandOnlyOnTwistieClick === undefined) {\n                newOptions = { ...newOptions, expandOnlyOnTwistieClick: configurationService.getValue(treeExpandMode) === 'doubleClick' };\n            }\n            if (e.affectsConfiguration(treeStickyScroll)) {\n                const enableStickyScroll = configurationService.getValue(treeStickyScroll);\n                newOptions = { ...newOptions, enableStickyScroll };\n            }\n            if (e.affectsConfiguration(treeStickyScrollMaxElements)) {\n                const stickyScrollMaxItemCount = Math.max(1, configurationService.getValue(treeStickyScrollMaxElements));\n                newOptions = { ...newOptions, stickyScrollMaxItemCount };\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                newOptions = { ...newOptions, mouseWheelScrollSensitivity };\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                newOptions = { ...newOptions, fastScrollSensitivity };\n            }\n            if (Object.keys(newOptions).length > 0) {\n                tree.updateOptions(newOptions);\n            }\n        }), this.contextKeyService.onDidChangeContext(e => {\n            if (e.affectsSome(interestingContextKeys)) {\n                tree.updateOptions({ typeNavigationMode: getTypeNavigationMode() });\n            }\n        }));\n        this.navigator = new TreeResourceNavigator(tree, { configurationService, ...options });\n        this.disposables.push(this.navigator);\n    }\n    updateOptions(options) {\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyleOverrides(overrideStyles) {\n        this.tree.style(overrideStyles ? getListStyles(overrideStyles) : defaultListStyles);\n    }\n    dispose() {\n        this.disposables = dispose(this.disposables);\n    }\n};\nWorkbenchTreeInternals = __decorate([\n    __param(4, IContextKeyService),\n    __param(5, IListService),\n    __param(6, IConfigurationService)\n], WorkbenchTreeInternals);\nconst configurationRegistry = Registry.as(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n    id: 'workbench',\n    order: 7,\n    title: localize('workbenchConfigurationTitle', \"Workbench\"),\n    type: 'object',\n    properties: {\n        [multiSelectModifierSettingKey]: {\n            type: 'string',\n            enum: ['ctrlCmd', 'alt'],\n            markdownEnumDescriptions: [\n                localize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\n                localize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\n            ],\n            default: 'ctrlCmd',\n            description: localize({\n                key: 'multiSelectModifier',\n                comment: [\n                    '- `ctrlCmd` refers to a value the setting can take and should not be localized.',\n                    '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\n                ]\n            }, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\n        },\n        [openModeSettingKey]: {\n            type: 'string',\n            enum: ['singleClick', 'doubleClick'],\n            default: 'singleClick',\n            description: localize({\n                key: 'openModeModifier',\n                comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\n            }, \"Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.\")\n        },\n        [horizontalScrollingKey]: {\n            type: 'boolean',\n            default: false,\n            description: localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.\")\n        },\n        [scrollByPageKey]: {\n            type: 'boolean',\n            default: false,\n            description: localize('list.scrollByPage', \"Controls whether clicks in the scrollbar scroll page by page.\")\n        },\n        [treeIndentKey]: {\n            type: 'number',\n            default: 8,\n            minimum: 4,\n            maximum: 40,\n            description: localize('tree indent setting', \"Controls tree indentation in pixels.\")\n        },\n        [treeRenderIndentGuidesKey]: {\n            type: 'string',\n            enum: ['none', 'onHover', 'always'],\n            default: 'onHover',\n            description: localize('render tree indent guides', \"Controls whether the tree should render indent guides.\")\n        },\n        [listSmoothScrolling]: {\n            type: 'boolean',\n            default: false,\n            description: localize('list smoothScrolling setting', \"Controls whether lists and trees have smooth scrolling.\"),\n        },\n        [mouseWheelScrollSensitivityKey]: {\n            type: 'number',\n            default: 1,\n            markdownDescription: localize('Mouse Wheel Scroll Sensitivity', \"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\")\n        },\n        [fastScrollSensitivityKey]: {\n            type: 'number',\n            default: 5,\n            markdownDescription: localize('Fast Scroll Sensitivity', \"Scrolling speed multiplier when pressing `Alt`.\")\n        },\n        [defaultFindModeSettingKey]: {\n            type: 'string',\n            enum: ['highlight', 'filter'],\n            enumDescriptions: [\n                localize('defaultFindModeSettingKey.highlight', \"Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.\"),\n                localize('defaultFindModeSettingKey.filter', \"Filter elements when searching.\")\n            ],\n            default: 'highlight',\n            description: localize('defaultFindModeSettingKey', \"Controls the default find mode for lists and trees in the workbench.\")\n        },\n        [keyboardNavigationSettingKey]: {\n            type: 'string',\n            enum: ['simple', 'highlight', 'filter'],\n            enumDescriptions: [\n                localize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"),\n                localize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"),\n                localize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")\n            ],\n            default: 'highlight',\n            description: localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\"),\n            deprecated: true,\n            deprecationMessage: localize('keyboardNavigationSettingKeyDeprecated', \"Please use 'workbench.list.defaultFindMode' and\t'workbench.list.typeNavigationMode' instead.\")\n        },\n        [defaultFindMatchTypeSettingKey]: {\n            type: 'string',\n            enum: ['fuzzy', 'contiguous'],\n            enumDescriptions: [\n                localize('defaultFindMatchTypeSettingKey.fuzzy', \"Use fuzzy matching when searching.\"),\n                localize('defaultFindMatchTypeSettingKey.contiguous', \"Use contiguous matching when searching.\")\n            ],\n            default: 'fuzzy',\n            description: localize('defaultFindMatchTypeSettingKey', \"Controls the type of matching used when searching lists and trees in the workbench.\")\n        },\n        [treeExpandMode]: {\n            type: 'string',\n            enum: ['singleClick', 'doubleClick'],\n            default: 'singleClick',\n            description: localize('expand mode', \"Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.\"),\n        },\n        [treeStickyScroll]: {\n            type: 'boolean',\n            default: typeof product.quality === 'string' && product.quality !== 'stable', // only enable as default in insiders\n            description: localize('sticky scroll', \"Controls whether sticky scrolling is enabled in trees.\"),\n        },\n        [treeStickyScrollMaxElements]: {\n            type: 'number',\n            minimum: 1,\n            default: 7,\n            markdownDescription: localize('sticky scroll maximum items', \"Controls the number of sticky elements displayed in the tree when `#workbench.tree.enableStickyScroll#` is enabled.\"),\n        },\n        [typeNavigationModeSettingKey]: {\n            type: 'string',\n            enum: ['automatic', 'trigger'],\n            default: 'automatic',\n            markdownDescription: localize('typeNavigationMode2', \"Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.\"),\n        }\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { isObject } from '../../../base/common/types.js';\nexport const IBulkEditService = createDecorator('IWorkspaceEditService');\nexport class ResourceEdit {\n    constructor(metadata) {\n        this.metadata = metadata;\n    }\n    static convert(edit) {\n        return edit.edits.map(edit => {\n            if (ResourceTextEdit.is(edit)) {\n                return ResourceTextEdit.lift(edit);\n            }\n            if (ResourceFileEdit.is(edit)) {\n                return ResourceFileEdit.lift(edit);\n            }\n            throw new Error('Unsupported edit');\n        });\n    }\n}\nexport class ResourceTextEdit extends ResourceEdit {\n    static is(candidate) {\n        if (candidate instanceof ResourceTextEdit) {\n            return true;\n        }\n        return isObject(candidate)\n            && URI.isUri(candidate.resource)\n            && isObject(candidate.textEdit);\n    }\n    static lift(edit) {\n        if (edit instanceof ResourceTextEdit) {\n            return edit;\n        }\n        else {\n            return new ResourceTextEdit(edit.resource, edit.textEdit, edit.versionId, edit.metadata);\n        }\n    }\n    constructor(resource, textEdit, versionId = undefined, metadata) {\n        super(metadata);\n        this.resource = resource;\n        this.textEdit = textEdit;\n        this.versionId = versionId;\n    }\n}\nexport class ResourceFileEdit extends ResourceEdit {\n    static is(candidate) {\n        if (candidate instanceof ResourceFileEdit) {\n            return true;\n        }\n        else {\n            return isObject(candidate)\n                && (Boolean(candidate.newResource) || Boolean(candidate.oldResource));\n        }\n    }\n    static lift(edit) {\n        if (edit instanceof ResourceFileEdit) {\n            return edit;\n        }\n        else {\n            return new ResourceFileEdit(edit.oldResource, edit.newResource, edit.options, edit.metadata);\n        }\n    }\n    constructor(oldResource, newResource, options = {}, metadata) {\n        super(metadata);\n        this.oldResource = oldResource;\n        this.newResource = newResource;\n        this.options = options;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append } from '../../dom.js';\nimport { format } from '../../../common/strings.js';\nimport './countBadge.css';\nexport class CountBadge {\n    constructor(container, options, styles) {\n        this.options = options;\n        this.styles = styles;\n        this.count = 0;\n        this.element = append(container, $('.monaco-count-badge'));\n        this.countFormat = this.options.countFormat || '{0}';\n        this.titleFormat = this.options.titleFormat || '';\n        this.setCount(this.options.count || 0);\n    }\n    setCount(count) {\n        this.count = count;\n        this.render();\n    }\n    setTitleFormat(titleFormat) {\n        this.titleFormat = titleFormat;\n        this.render();\n    }\n    render() {\n        var _a, _b;\n        this.element.textContent = format(this.countFormat, this.count);\n        this.element.title = format(this.titleFormat, this.count);\n        this.element.style.backgroundColor = (_a = this.styles.badgeBackground) !== null && _a !== void 0 ? _a : '';\n        this.element.style.color = (_b = this.styles.badgeForeground) !== null && _b !== void 0 ? _b : '';\n        if (this.styles.badgeBorder) {\n            this.element.style.border = `1px solid ${this.styles.badgeBorder}`;\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,IAAM,4BAA4B,gBAAgB,sBAAsB;AACxE,IAAM,0BAA0B,IAAI,cAAc,wBAAwB,OAAO,SAAS,wBAAwB,8EAAgF,CAAC;AACnM;AAAA,EAAkB;AAAA,EAA2B,MAAM;AAAA,IAC/C,cAAc;AACV,WAAK,UAAU,oBAAI,QAAQ;AAAA,IAC/B;AAAA,IACA,IAAI,QAAQ,KAAK;AACb,UAAI,OAAO,KAAK,QAAQ,IAAI,MAAM;AAClC,UAAI,CAAC,MAAM;AACP,eAAO,OAAO,oBAAoB,cAAY;AAC1C,gBAAM,MAAM,wBAAwB,OAAO,SAAS,IAAI,kBAAkB,CAAC;AAC3E,gBAAM,SAAS,IAAI,WAAW;AAC9B,iBAAO,EAAE,KAAK,OAAO;AAAA,QACzB,CAAC;AACD,aAAK,QAAQ,IAAI,QAAQ,IAAI;AAAA,MACjC;AACA,UAAI;AACJ,WAAK,IAAI,IAAI,IAAI;AACjB,iBAAW,KAAK,OAAO,KAAK,GAAG;AAC/B,aAAO,MAAM;AAET,YAAI,UAAU;AACV,mBAAS;AACT,eAAK,IAAI,IAAI,CAAC,KAAK,OAAO,QAAQ,CAAC;AACnC,qBAAW;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,OAAO,QAAQ;AACX,YAAM,OAAO,KAAK,QAAQ,IAAI,MAAM;AACpC,UAAI,CAAC,MAAM;AACP;AAAA,MACJ;AAEA,YAAM,MAAM,KAAK,OAAO,IAAI;AAC5B,UAAI,KAAK;AACL,YAAI,OAAO;AACX,aAAK,IAAI,IAAI,CAAC,KAAK,OAAO,QAAQ,CAAC;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AAAA,EAAG;AAAA;AAAiC;AAC7B,IAAM,0CAAN,cAAsD,wBAAwB;AAAA,EACjF,YAAY,QAAQ,QAAQ;AACxB,UAAM,MAAM;AACZ,SAAK,SAAS;AACd,SAAK,cAAc,OAAO,oBAAoB,cAAY,SAAS,IAAI,yBAAyB,EAAE,IAAI,QAAQ,IAAI,CAAC;AAAA,EACvH;AAAA,EACA,UAAU;AACN,SAAK,YAAY;AACjB,UAAM,QAAQ;AAAA,EAClB;AACJ;AACA,sBAAsB,IAAI,cAAc,cAAc;AAAA,EAClD,cAAc;AACV,UAAM;AAAA,MACF,IAAI;AAAA,MACJ,QAAQ;AAAA,QACJ,QAAQ;AAAA,QACR,SAAS;AAAA;AAAA,MACb;AAAA,MACA,cAAc;AAAA,IAClB,CAAC;AAAA,EACL;AAAA,EACA,iBAAiB,UAAU,QAAQ;AAC/B,aAAS,IAAI,yBAAyB,EAAE,OAAO,MAAM;AAAA,EACzD;AACJ,GAAC;;;ACpEM,IAAM,cAAN,MAAM,aAAY;AAAA,EACrB,YAAY,QAAQ,OAAO;AACvB,SAAK,QAAQ;AACb,SAAK,KAAK,QAAQ,OAAuC,GAAG;AACxD,YAAM,QAAQ,OAAO,SAAS;AAC9B,WAAK,iBAAiB,QAAgB,OAAO,WAAW,MAAM,IAAI,SAAS,GAAG,MAAM,aAAa,CAAC,IAAI;AAAA,IAC1G,OACK;AACD,WAAK,iBAAiB;AAAA,IAC1B;AACA,SAAK,KAAK,QAAQ,OAA0C,GAAG;AAC3D,WAAK,WAAW,OAAO,YAAY;AAAA,IACvC,OACK;AACD,WAAK,WAAW;AAAA,IACpB;AACA,SAAK,KAAK,QAAQ,OAA2C,GAAG;AAC5D,WAAK,YAAY,OAAO,aAAa;AAAA,IACzC,OACK;AACD,WAAK,YAAY;AAAA,IACrB;AACA,SAAK,KAAK,QAAQ,OAAwC,GAAG;AACzD,WAAK,aAAa,OAAO,cAAc;AACvC,WAAK,YAAY,OAAO,aAAa;AAAA,IACzC,OACK;AACD,WAAK,aAAa;AAClB,WAAK,YAAY;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,QAAQ,OAAO;AACX,QAAI,EAAE,iBAAiB,eAAc;AACjC,aAAO;AAAA,IACX;AACA,UAAM,QAAQ;AACd,QAAI,KAAK,mBAAmB,MAAM,gBAAgB;AAC9C,aAAO;AAAA,IACX;AACA,QAAI,KAAK,eAAe,MAAM,cAAc,KAAK,cAAc,MAAM,WAAW;AAC5E,aAAO;AAAA,IACX;AACA,QAAI,CAAC,KAAK,YAAY,MAAM,YAAY,KAAK,YAAY,CAAC,MAAM,YAAY,KAAK,YAAY,MAAM,YAAY,CAAC,KAAK,SAAS,OAAO,MAAM,QAAQ,GAAG;AAClJ,aAAO;AAAA,IACX;AACA,QAAI,CAAC,KAAK,aAAa,MAAM,aAAa,KAAK,aAAa,CAAC,MAAM,aAAa,KAAK,aAAa,MAAM,aAAa,CAAC,KAAK,UAAU,YAAY,MAAM,SAAS,GAAG;AAC/J,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS,QAAQ;AACb,WAAO,KAAK,QAAQ,IAAI,aAAY,QAAQ,KAAK,KAAK,CAAC;AAAA,EAC3D;AACJ;AAMO,IAAM,qCAAN,cAAiD,wCAAwC;AAAA,EAC5F,YAAY,QAAQ,OAAOA,QAAO,QAAQ;AACtC,UAAM,QAAQ,MAAM;AACpB,SAAK,YAAY,IAAI,gBAAgB;AACrC,QAAI,QAAQ,GAAsC;AAC9C,WAAK,UAAU,IAAI,OAAO,0BAA0B,OAAK;AACrD,YAAI,CAACA,UAAS,CAAC,MAAM,iBAAiBA,QAAO,EAAE,QAAQ,GAAG;AACtD,eAAK,OAAO;AAAA,QAChB;AAAA,MACJ,CAAC,CAAC;AAAA,IACN;AACA,QAAI,QAAQ,GAAuC;AAC/C,WAAK,UAAU,IAAI,OAAO,2BAA2B,OAAK;AACtD,YAAI,CAACA,UAAS,CAAC,MAAM,cAAcA,QAAO,EAAE,SAAS,GAAG;AACpD,eAAK,OAAO;AAAA,QAChB;AAAA,MACJ,CAAC,CAAC;AAAA,IACN;AACA,QAAI,QAAQ,GAAoC;AAC5C,WAAK,UAAU,IAAI,OAAO,kBAAkB,OAAK,KAAK,OAAO,CAAC,CAAC;AAAA,IACnE;AACA,QAAI,QAAQ,GAAmC;AAC3C,WAAK,UAAU,IAAI,OAAO,iBAAiB,OAAK,KAAK,OAAO,CAAC,CAAC;AAC9D,WAAK,UAAU,IAAI,OAAO,wBAAwB,OAAK,KAAK,OAAO,CAAC,CAAC;AAAA,IACzE;AAAA,EACJ;AAAA,EACA,UAAU;AACN,SAAK,UAAU,QAAQ;AACvB,UAAM,QAAQ;AAAA,EAClB;AACJ;AAIO,IAAM,mCAAN,cAA+C,wBAAwB;AAAA,EAC1E,YAAY,OAAO,QAAQ;AACvB,UAAM,MAAM;AACZ,SAAK,YAAY,MAAM,mBAAmB,MAAM,KAAK,OAAO,CAAC;AAAA,EACjE;AAAA,EACA,UAAU;AACN,SAAK,UAAU,QAAQ;AACvB,UAAM,QAAQ;AAAA,EAClB;AACJ;;;ACvGO,SAAS,aAAa,OAAO;AAChC,MAAI,SAAS,OAAO,MAAM,kBAAkB,YAAY;AACpD,WAAO,MAAM,cAAc,MAAmB,WAAW;AAAA,EAC7D,OACK;AACD,WAAO;AAAA,EACX;AACJ;;;ACdO,IAAM,mBAAmB,gBAAgB,iBAAiB;AAC1D,IAAM,sBAAsB,OAAO,OAAO;AAAA,EAC7C,QAAQ;AAAA,EAAE;AAAA,EACV,SAAS;AAAA,EAAE;AAAA,EACX,OAAO;AAAA,EAAE;AACb,CAAC;AACM,IAAM,WAAN,MAAe;AAAA,EAClB,YAAY,UAAU;AAClB,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,OAAO,MAAM;AACT,SAAK,SAAS;AACd,SAAK,SAAS,KAAK,MAAM;AAAA,EAC7B;AACJ;AACA,SAAS,OAAO,OAAO,OAAO,EAAE,SAAS;AAAE,EAAE,CAAC;AACvC,IAAM,yBAAyB,gBAAgB,uBAAuB;;;ACVtE,IAAI;AAAA,CACV,SAAUC,iBAAgB;AACvB,EAAAA,gBAAeA,gBAAe,MAAM,IAAI,CAAC,IAAI;AAC7C,EAAAA,gBAAeA,gBAAe,MAAM,IAAI,CAAC,IAAI;AAC7C,EAAAA,gBAAeA,gBAAe,SAAS,IAAI,CAAC,IAAI;AAChD,EAAAA,gBAAeA,gBAAe,OAAO,IAAI,CAAC,IAAI;AAClD,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AAAA,CACzC,SAAUA,iBAAgB;AACvB,WAAS,QAAQ,GAAG,GAAG;AACnB,WAAO,IAAI;AAAA,EACf;AACA,EAAAA,gBAAe,UAAU;AACzB,QAAM,kBAAkB,uBAAO,OAAO,IAAI;AAC1C,kBAAgBA,gBAAe,KAAK,IAAI,SAAS,aAAa,OAAO;AACrE,kBAAgBA,gBAAe,OAAO,IAAI,SAAS,eAAe,SAAS;AAC3E,kBAAgBA,gBAAe,IAAI,IAAI,SAAS,YAAY,MAAM;AAClE,WAAS,SAAS,GAAG;AACjB,WAAO,gBAAgB,CAAC,KAAK;AAAA,EACjC;AACA,EAAAA,gBAAe,WAAW;AAC1B,WAAS,aAAa,UAAU;AAC5B,YAAQ,UAAU;AAAA,MACd,KAAK,iBAAS;AAAO,eAAOA,gBAAe;AAAA,MAC3C,KAAK,iBAAS;AAAS,eAAOA,gBAAe;AAAA,MAC7C,KAAK,iBAAS;AAAM,eAAOA,gBAAe;AAAA,MAC1C,KAAK,iBAAS;AAAQ,eAAOA,gBAAe;AAAA,IAChD;AAAA,EACJ;AACA,EAAAA,gBAAe,eAAe;AAC9B,WAAS,WAAW,UAAU;AAC1B,YAAQ,UAAU;AAAA,MACd,KAAKA,gBAAe;AAAO,eAAO,iBAAS;AAAA,MAC3C,KAAKA,gBAAe;AAAS,eAAO,iBAAS;AAAA,MAC7C,KAAKA,gBAAe;AAAM,eAAO,iBAAS;AAAA,MAC1C,KAAKA,gBAAe;AAAM,eAAO,iBAAS;AAAA,IAC9C;AAAA,EACJ;AACA,EAAAA,gBAAe,aAAa;AAChC,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AACnC,IAAI;AAAA,CACV,SAAUC,cAAa;AACpB,QAAM,cAAc;AACpB,WAAS,QAAQ,YAAY;AACzB,WAAO,uBAAuB,YAAY,IAAI;AAAA,EAClD;AACA,EAAAA,aAAY,UAAU;AACtB,WAAS,uBAAuB,YAAY,YAAY;AACpD,UAAM,SAAS,CAAC,WAAW;AAC3B,QAAI,WAAW,QAAQ;AACnB,aAAO,KAAK,WAAW,OAAO,QAAQ,KAAK,KAAK,CAAC;AAAA,IACrD,OACK;AACD,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,QAAI,WAAW,MAAM;AACjB,UAAI,OAAO,WAAW,SAAS,UAAU;AACrC,eAAO,KAAK,WAAW,KAAK,QAAQ,KAAK,KAAK,CAAC;AAAA,MACnD,OACK;AACD,eAAO,KAAK,WAAW,KAAK,MAAM,QAAQ,KAAK,KAAK,CAAC;AAAA,MACzD;AAAA,IACJ,OACK;AACD,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,QAAI,WAAW,aAAa,UAAa,WAAW,aAAa,MAAM;AACnE,aAAO,KAAK,eAAe,SAAS,WAAW,QAAQ,CAAC;AAAA,IAC5D,OACK;AACD,aAAO,KAAK,WAAW;AAAA,IAC3B;AAGA,QAAI,WAAW,WAAW,YAAY;AAClC,aAAO,KAAK,WAAW,QAAQ,QAAQ,KAAK,KAAK,CAAC;AAAA,IACtD,OACK;AACD,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,QAAI,WAAW,oBAAoB,UAAa,WAAW,oBAAoB,MAAM;AACjF,aAAO,KAAK,WAAW,gBAAgB,SAAS,CAAC;AAAA,IACrD,OACK;AACD,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,QAAI,WAAW,gBAAgB,UAAa,WAAW,gBAAgB,MAAM;AACzE,aAAO,KAAK,WAAW,YAAY,SAAS,CAAC;AAAA,IACjD,OACK;AACD,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,QAAI,WAAW,kBAAkB,UAAa,WAAW,kBAAkB,MAAM;AAC7E,aAAO,KAAK,WAAW,cAAc,SAAS,CAAC;AAAA,IACnD,OACK;AACD,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,QAAI,WAAW,cAAc,UAAa,WAAW,cAAc,MAAM;AACrE,aAAO,KAAK,WAAW,UAAU,SAAS,CAAC;AAAA,IAC/C,OACK;AACD,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,WAAO,KAAK,WAAW;AACvB,WAAO,OAAO,KAAK,GAAG;AAAA,EAC1B;AACA,EAAAA,aAAY,yBAAyB;AACzC,GAAG,gBAAgB,cAAc,CAAC,EAAE;AAC7B,IAAM,iBAAiB,gBAAgB,eAAe;;;AC5GtD,IAAM,eAAe,IAAI,cAAc,SAAS,aAAa,SAAS,SAAS,uCAAuC,CAAC;AACvH,IAAM,iBAAiB,IAAI,cAAc,WAAW,SAAS,SAAS,WAAW,uCAAuC,CAAC;AACzH,IAAM,mBAAmB,IAAI,cAAc,aAAa,WAAW,SAAS,aAAa,yCAAyC,CAAC;AACnI,IAAM,eAAe,IAAI,cAAc,SAAS,OAAO,SAAS,SAAS,uCAAuC,CAAC;AACjH,IAAM,qBAAqB,IAAI,cAAc,eAAe,eAAe,CAAC,OAAO,SAAS,eAAe,iEAAiE,CAAC;AAC7K,IAAM,eAAe,IAAI,cAAc,SAAS,OAAO,SAAS,SAAS,qCAAqC,CAAC;AAC/G,IAAM,kBAAkB,IAAI,cAAc,YAAY,UAAU,SAAS,YAAY,8CAA8C,CAAC;AACpI,IAAM,uBAAuB,IAAI,cAAc,iBAAiB,OAAO,IAAI;AAC3E,IAAM,wBAAwB,IAAI,cAAc,sBAAsB,IAAI,SAAS,sBAAsB,yBAAyB,CAAC;AACnI,IAAM,yBAAyB;AAC/B,IAAM,sBAAsB,IAAI,cAAc,wBAAwB,OAAO,SAAS,cAAc,+CAA+C,CAAC;;;ACT3J,OAAO;AAEP,IAAM,gBAAN,MAAoB;AAAA,EAChB,IAAI,aAAa;AAAE,WAAO,KAAK,SAAS;AAAA,EAAY;AAAA,EACpD,YAAY,UAAU,eAAe;AACjC,SAAK,WAAW;AAChB,SAAK,gBAAgB;AAAA,EACzB;AAAA,EACA,eAAe,WAAW;AACtB,UAAM,OAAO,KAAK,SAAS,eAAe,SAAS;AACnD,WAAO,EAAE,MAAM,YAAY,WAAW,KAAK;AAAA,EAC/C;AAAA,EACA,cAAc,OAAO,GAAG,MAAM,QAAQ;AAClC,QAAI;AACJ,KAAC,KAAK,KAAK,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ;AACvE,QAAI,CAAC,KAAK,MAAM;AACZ;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,cAAc;AACjC,QAAI,MAAM,WAAW,KAAK,GAAG;AACzB,aAAO,KAAK,SAAS,cAAc,MAAM,IAAI,KAAK,GAAG,OAAO,KAAK,MAAM,MAAM;AAAA,IACjF;AACA,UAAM,MAAM,IAAI,wBAAwB;AACxC,UAAM,UAAU,MAAM,QAAQ,OAAO,IAAI,KAAK;AAC9C,SAAK,aAAa,EAAE,SAAS,MAAM,IAAI,OAAO,EAAE;AAChD,SAAK,SAAS,kBAAkB,OAAO,KAAK,IAAI;AAChD,YAAQ,KAAK,WAAS,KAAK,SAAS,cAAc,OAAO,OAAO,KAAK,MAAM,MAAM,CAAC;AAAA,EACtF;AAAA,EACA,gBAAgB,MAAM;AAClB,QAAI,KAAK,YAAY;AACjB,WAAK,WAAW,QAAQ;AACxB,WAAK,aAAa;AAAA,IACtB;AACA,QAAI,KAAK,MAAM;AACX,WAAK,SAAS,gBAAgB,KAAK,IAAI;AACvC,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AACJ;AACA,IAAM,6BAAN,MAAiC;AAAA,EAC7B,YAAY,eAAe,uBAAuB;AAC9C,SAAK,gBAAgB;AACrB,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK,sBAAsB,mBAAmB;AAAA,EACzD;AAAA,EACA,aAAa,OAAO;AAChB,UAAM,QAAQ,KAAK,cAAc;AACjC,QAAI,CAAC,MAAM,WAAW,KAAK,GAAG;AAC1B,aAAO;AAAA,IACX;AACA,WAAO,KAAK,sBAAsB,aAAa,MAAM,IAAI,KAAK,CAAC;AAAA,EACnE;AACJ;AACA,SAAS,qBAAqB,eAAe,SAAS;AAClD,SAAO;AAAA,IACH,GAAG;AAAA,IACH,uBAAuB,QAAQ,yBAAyB,IAAI,2BAA2B,eAAe,QAAQ,qBAAqB;AAAA,EACvI;AACJ;AACO,IAAM,YAAN,MAAgB;AAAA,EACnB,YAAY,MAAM,WAAW,iBAAiB,WAAW,UAAU,CAAC,GAAG;AACnE,UAAM,gBAAgB,MAAM,KAAK;AACjC,UAAM,iBAAiB,UAAU,IAAI,OAAK,IAAI,cAAc,GAAG,aAAa,CAAC;AAC7E,SAAK,OAAO,IAAI,KAAK,MAAM,WAAW,iBAAiB,gBAAgB,qBAAqB,eAAe,OAAO,CAAC;AAAA,EACvH;AAAA,EACA,cAAc,SAAS;AACnB,SAAK,KAAK,cAAc,OAAO;AAAA,EACnC;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,KAAK,eAAe;AAAA,EACpC;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,eAAe;AACf,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAO,MAAM,IAAI,KAAK,KAAK,iBAAiB,CAAC,EAAE,SAAS,OAAO,aAAa,OAAO,EAAE,SAAS,YAAY,SAAY,SAAY,KAAK,OAAO,IAAI,OAAO,GAAG,OAAO,aAAa,EAAE;AAAA,EACtL;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,MAAM,IAAI,KAAK,KAAK,WAAW,CAAC,EAAE,SAAS,OAAO,aAAa,OAAO,EAAE,SAAS,YAAY,SAAY,SAAY,KAAK,OAAO,IAAI,OAAO,GAAG,OAAO,aAAa,EAAE;AAAA,EAChL;AAAA,EACA,IAAI,uBAAuB;AACvB,WAAO,MAAM,IAAI,KAAK,KAAK,sBAAsB,CAAC,EAAE,UAAU,SAAS,aAAa,OAAO,EAAE,UAAU,SAAS,IAAI,OAAK,KAAK,OAAO,IAAI,CAAC,CAAC,GAAG,SAAS,aAAa,EAAE;AAAA,EAC1K;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,MAAM,OAAO;AACb,SAAK,SAAS;AACd,SAAK,KAAK,OAAO,GAAG,KAAK,KAAK,QAAQ,MAAM,MAAM,MAAM,CAAC;AAAA,EAC7D;AAAA,EACA,WAAW;AACP,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EACA,eAAe;AACX,WAAO,KAAK,KAAK,aAAa;AAAA,EAClC;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,aAAa,EAAE,IAAI,OAAK,KAAK,MAAM,IAAI,CAAC,CAAC;AAAA,EACzD;AAAA,EACA,MAAM,QAAQ;AACV,SAAK,KAAK,MAAM,MAAM;AAAA,EAC1B;AAAA,EACA,UAAU;AACN,SAAK,KAAK,QAAQ;AAAA,EACtB;AACJ;;;AC1GA,OAAO;AACP,IAAM,gBAAgB;AAAA,EAClB,iBAAiB,MAAM;AAC3B;AACA,IAAM,WAAN,MAAe;AAAA,EACX,IAAI,KAAK,MAAM;AACX,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,UAAU;AACV,WAAO,OAAO,KAAK,uBAAuB;AAAA,EAC9C;AAAA,EACA,WAAW,SAAS,MAAM;AACtB,QAAI,IAAI;AACR,QAAI,YAAY,KAAK,SAAS;AAC1B;AAAA,IACJ;AACA,QAAI,SAAS;AACT,WAAK,OAAO,MAAM,KAAK,oBAAoB,KAAK,iBAAiB,KAAK,eAAe;AACrF,WAAK,qBAAqB;AAAA,IAC9B,OACK;AACD,WAAK,qBAAqB,OAAO,SAAS,WAAW,OAAO,KAAK;AACjE,WAAK,OAAO;AAAA,IAChB;AACA,SAAK,UAAU,UAAU,OAAO,WAAW,OAAO;AAClD,QAAI;AACA,OAAC,MAAM,KAAK,KAAK,MAAM,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,OAAO;AAAA,IAC/F,SACO,GAAG;AACN,cAAQ,MAAM,uCAAuC;AACrD,cAAQ,MAAM,CAAC;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,IAAI,cAAc;AAAE,WAAO,KAAK,UAAU,KAAK,KAAK,cAAc;AAAA,EAAG;AAAA,EACrE,IAAI,kBAAkB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAa;AAAA,EACtD,IAAI,cAAc;AAAE,WAAO,KAAK,UAAU,KAAK,KAAK,cAAc;AAAA,EAAG;AAAA,EACrE,IAAI,kBAAkB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAa;AAAA,EACtD,IAAI,WAAW;AAAE,WAAO,KAAK,KAAK;AAAA,EAAU;AAAA,EAC5C,IAAI,qBAAqB;AAAE,QAAI;AAAI,YAAQ,KAAK,KAAK,KAAK,wBAAwB,QAAQ,OAAO,SAAS,KAAK;AAAA,EAAM;AAAA,EACrH,IAAI,OAAO;AAAE,WAAO,CAAC,CAAC,KAAK,KAAK;AAAA,EAAM;AAAA,EACtC,IAAI,QAAQ,SAAS;AACjB,SAAK,UAAU,MAAM,gBAAgB,UAAU,KAAK;AAAA,EACxD;AAAA,EACA,YAAY,WAAW,MAAM,MAAM,YAAY;AAC3C,SAAK,YAAY;AACjB,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,qBAAqB;AAC1B,QAAI,OAAO,SAAS,UAAU;AAC1B,WAAK,QAAQ;AACb,WAAK,qBAAqB;AAC1B,gBAAU,UAAU,IAAI,SAAS;AAAA,IACrC,OACK;AACD,WAAK,QAAQ;AACb,WAAK,qBAAqB,KAAK;AAAA,IACnC;AAAA,EACJ;AAAA,EACA,OAAO,QAAQ,eAAe;AAC1B,SAAK,gBAAgB,MAAM;AAC3B,QAAI;AACA,WAAK,KAAK,OAAO,KAAK,MAAM,QAAQ,aAAa;AAAA,IACrD,SACO,GAAG;AACN,cAAQ,MAAM,kCAAkC;AAChD,cAAQ,MAAM,CAAC;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,UAAU;AACN,SAAK,WAAW,QAAQ;AAAA,EAC5B;AACJ;AACA,IAAM,mBAAN,cAA+B,SAAS;AAAA,EACpC,gBAAgB,QAAQ;AACpB,SAAK,UAAU,MAAM,MAAM,GAAG,MAAM;AACpC,SAAK,UAAU,MAAM,SAAS,GAAG,KAAK,IAAI;AAAA,EAC9C;AACJ;AACA,IAAM,qBAAN,cAAiC,SAAS;AAAA,EACtC,gBAAgB,QAAQ;AACpB,SAAK,UAAU,MAAM,OAAO,GAAG,MAAM;AACrC,SAAK,UAAU,MAAM,QAAQ,GAAG,KAAK,IAAI;AAAA,EAC7C;AACJ;AACA,IAAI;AAAA,CACH,SAAUC,QAAO;AACd,EAAAA,OAAMA,OAAM,MAAM,IAAI,CAAC,IAAI;AAC3B,EAAAA,OAAMA,OAAM,MAAM,IAAI,CAAC,IAAI;AAC/B,GAAG,UAAU,QAAQ,CAAC,EAAE;AACjB,IAAI;AAAA,CACV,SAAUC,SAAQ;AAKf,EAAAA,QAAO,aAAa,EAAE,MAAM,aAAa;AAKzC,WAAS,MAAM,OAAO;AAAE,WAAO,EAAE,MAAM,SAAS,MAAM;AAAA,EAAG;AACzD,EAAAA,QAAO,QAAQ;AAKf,WAAS,KAAK,OAAO;AAAE,WAAO,EAAE,MAAM,QAAQ,MAAM;AAAA,EAAG;AACvD,EAAAA,QAAO,OAAO;AAId,WAAS,UAAU,mBAAmB;AAAE,WAAO,EAAE,MAAM,aAAa,kBAAkB;AAAA,EAAG;AACzF,EAAAA,QAAO,YAAY;AACvB,GAAG,WAAW,SAAS,CAAC,EAAE;AA6BnB,IAAM,YAAN,cAAwB,WAAW;AAAA,EACtC,IAAI,sBAAsB;AAAE,WAAO,KAAK;AAAA,EAAsB;AAAA,EAC9D,IAAI,oBAAoB;AAAE,WAAO,KAAK;AAAA,EAAoB;AAAA,EAC1D,IAAI,uBAAuB;AAAE,WAAO,KAAK;AAAA,EAAuB;AAAA,EAChE,IAAI,qBAAqB;AAAE,WAAO,KAAK;AAAA,EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM5D,IAAI,oBAAoB,MAAM;AAC1B,eAAW,YAAY,KAAK,WAAW;AACnC,eAAS,KAAK,sBAAsB;AAAA,IACxC;AACA,SAAK,uBAAuB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,kBAAkB,MAAM;AACxB,eAAW,YAAY,KAAK,WAAW;AACnC,eAAS,KAAK,oBAAoB;AAAA,IACtC;AACA,SAAK,qBAAqB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,qBAAqB,sBAAsB;AAC3C,QAAI,KAAK,0BAA0B,sBAAsB;AACrD;AAAA,IACJ;AACA,SAAK,wBAAwB;AAC7B,SAAK,qBAAqB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,mBAAmB,oBAAoB;AACvC,QAAI,KAAK,wBAAwB,oBAAoB;AACjD;AAAA,IACJ;AACA,SAAK,sBAAsB;AAC3B,SAAK,qBAAqB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,WAAW,UAAU,CAAC,GAAG;AACjC,QAAI,IAAI,IAAI,IAAI,IAAI;AACpB,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,eAAe;AACpB,SAAK,cAAc;AACnB,SAAK,YAAY,CAAC;AAClB,SAAK,YAAY,CAAC;AAClB,SAAK,QAAQ,MAAM;AACnB,SAAK,mBAAmB,KAAK,UAAU,IAAI,QAAQ,CAAC;AACpD,SAAK,kBAAkB,KAAK,UAAU,IAAI,QAAQ,CAAC;AACnD,SAAK,wBAAwB;AAC7B,SAAK,sBAAsB;AAI3B,SAAK,kBAAkB,KAAK,iBAAiB;AAI7C,SAAK,iBAAiB,KAAK,gBAAgB;AAC3C,SAAK,eAAe,KAAK,QAAQ,iBAAiB,QAAQ,OAAO,SAAS,KAAK;AAC/E,SAAK,sBAAsB,KAAK,QAAQ,wBAAwB,QAAQ,OAAO,SAAS,KAAK;AAC7F,SAAK,sBAAsB,KAAK,QAAQ,wBAAwB,QAAQ,OAAO,SAAS,KAAK;AAC7F,SAAK,wBAAwB,QAAQ;AACrC,SAAK,KAAK,SAAS,cAAc,KAAK;AACtC,SAAK,GAAG,UAAU,IAAI,oBAAoB;AAC1C,SAAK,GAAG,UAAU,IAAI,KAAK,gBAAgB,IAA+B,aAAa,YAAY;AACnG,cAAU,YAAY,KAAK,EAAE;AAC7B,SAAK,gBAAgB,OAAO,KAAK,IAAI,EAAE,iBAAiB,CAAC;AACzD,SAAK,gBAAgB,EAAE,uBAAuB;AAC9C,SAAK,aAAa,KAAK,UAAU,IAAI,WAAW;AAAA,MAC5C,oBAAoB;AAAA,MACpB,sBAAsB;AAAA,MACtB,8BAA8B,cAAY,6BAA6B,UAAU,KAAK,EAAE,GAAG,QAAQ;AAAA,IACvG,CAAC,CAAC;AACF,SAAK,oBAAoB,KAAK,UAAU,IAAI,wBAAwB,KAAK,eAAe;AAAA,MACpF,UAAU,KAAK,gBAAgB,KAAiC,KAAK,QAAQ,yBAAyB,QAAQ,OAAO,SAAS,KAAK,IAAoC;AAAA,MACvK,YAAY,KAAK,gBAAgB,KAAmC,KAAK,QAAQ,yBAAyB,QAAQ,OAAO,SAAS,KAAK,IAAoC;AAAA;AAAA,IAC/K,GAAG,KAAK,UAAU,CAAC;AAEnB,UAAM,2BAA2B,KAAK,UAAU,IAAI,WAAW,KAAK,eAAe,QAAQ,CAAC,EAAE;AAC9F,SAAK,UAAU,yBAAyB,OAAK;AACzC,YAAM,WAAW,KAAK,kBAAkB,kBAAkB;AAC1D,YAAM,aAAa,KAAK,IAAI,KAAK,cAAc,aAAa,SAAS,UAAU,KAAK,IAAI,SAAY,KAAK,cAAc;AACvH,YAAM,YAAY,KAAK,IAAI,KAAK,cAAc,YAAY,SAAS,SAAS,KAAK,IAAI,SAAY,KAAK,cAAc;AACpH,UAAI,eAAe,UAAa,cAAc,QAAW;AACrD,aAAK,kBAAkB,kBAAkB,EAAE,YAAY,UAAU,CAAC;AAAA,MACtE;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,cAAc,KAAK,kBAAkB;AAC1C,SAAK,UAAU,KAAK,YAAY,OAAK;AACjC,UAAI,EAAE,kBAAkB;AACpB,aAAK,cAAc,YAAY,EAAE;AAAA,MACrC;AACA,UAAI,EAAE,mBAAmB;AACrB,aAAK,cAAc,aAAa,EAAE;AAAA,MACtC;AAAA,IACJ,CAAC,CAAC;AACF,WAAO,KAAK,IAAI,KAAK,kBAAkB,WAAW,CAAC;AACnD,SAAK,MAAM,QAAQ,UAAU,aAAa;AAE1C,QAAI,QAAQ,YAAY;AACpB,WAAK,OAAO,QAAQ,WAAW;AAC/B,cAAQ,WAAW,MAAM,QAAQ,CAAC,gBAAgB,UAAU;AACxD,cAAM,SAAe,YAAY,eAAe,OAAO,KAAK,eAAe,UAAU,eAAe,OAAO,EAAE,MAAM,aAAa,mBAAmB,eAAe,KAAK;AACvK,cAAM,OAAO,eAAe;AAC5B,aAAK,UAAU,MAAM,QAAQ,OAAO,IAAI;AAAA,MAC5C,CAAC;AAED,WAAK,eAAe,KAAK,UAAU,OAAO,CAAC,GAAG,MAAM,IAAI,EAAE,MAAM,CAAC;AACjE,WAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,MAAM,QAAQ;AACV,QAAI,OAAO,gBAAgB,cAAc,GAAG;AACxC,WAAK,GAAG,UAAU,OAAO,kBAAkB;AAC3C,WAAK,GAAG,MAAM,eAAe,oBAAoB;AAAA,IACrD,OACK;AACD,WAAK,GAAG,UAAU,IAAI,kBAAkB;AACxC,WAAK,GAAG,MAAM,YAAY,sBAAsB,OAAO,gBAAgB,SAAS,CAAC;AAAA,IACrF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,MAAM,MAAM,QAAQ,KAAK,UAAU,QAAQ,YAAY;AAC3D,SAAK,UAAU,MAAM,MAAM,OAAO,UAAU;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,MAAM,eAAe;AACxB,UAAM,eAAe,KAAK,IAAI,KAAK,MAAM,KAAK,YAAY;AAC1D,SAAK,OAAO;AACZ,SAAK,gBAAgB;AACrB,QAAI,CAAC,KAAK,aAAa;AACnB,YAAM,UAAU,MAAM,KAAK,UAAU,MAAM;AAC3C,YAAM,qBAAqB,QAAQ;AAAA,QAAO,OAAK,KAAK,UAAU,CAAC,EAAE,aAAa;AAAA;AAAA,MAA0B;AACxG,YAAM,sBAAsB,QAAQ;AAAA,QAAO,OAAK,KAAK,UAAU,CAAC,EAAE,aAAa;AAAA;AAAA,MAA2B;AAC1G,WAAK,OAAO,KAAK,UAAU,SAAS,GAAG,OAAO,cAAc,QAAW,oBAAoB,mBAAmB;AAAA,IAClH,OACK;AACD,UAAI,QAAQ;AACZ,eAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC5C,cAAM,OAAO,KAAK,UAAU,CAAC;AAC7B,cAAM,aAAa,KAAK,YAAY,CAAC;AACrC,YAAI,OAAO,eAAe,UAAU;AAChC,mBAAS;AAAA,QACb,OACK;AACD,kBAAQ,KAAK;AAAA,QACjB;AAAA,MACJ;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC5C,cAAM,OAAO,KAAK,UAAU,CAAC;AAC7B,cAAM,aAAa,KAAK,YAAY,CAAC;AACrC,YAAI,OAAO,eAAe,YAAY,QAAQ,GAAG;AAC7C,eAAK,OAAO,MAAM,KAAK,MAAM,aAAa,OAAO,KAAK,GAAG,KAAK,aAAa,KAAK,WAAW;AAAA,QAC/F;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,qBAAqB;AAC1B,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,kBAAkB;AACd,QAAI,KAAK,sBAAsB,KAAK,eAAe,GAAG;AAClD,WAAK,cAAc,KAAK,UAAU,IAAI,OAAK,EAAE,sBAAsB,EAAE,UAAU,EAAE,OAAO,KAAK,eAAe,MAAS;AAAA,IACzH;AAAA,EACJ;AAAA,EACA,YAAY,EAAE,MAAM,OAAO,IAAI,GAAG;AAC9B,eAAW,QAAQ,KAAK,WAAW;AAC/B,WAAK,UAAU;AAAA,IACnB;AACA,UAAM,QAAQ,KAAK,UAAU,UAAU,UAAQ,KAAK,SAAS,IAAI;AAEjE,UAAM,aAAa,mBAAmB,sBAAsB,KAAK,GAAG,cAAc,MAAM,WAAW,OAAK,mBAAmB,KAAK,cAAc,SAAS,EAAE,MAAM,CAAC,GAAG,sBAAsB,KAAK,GAAG,cAAc,MAAM,SAAS,MAAM,mBAAmB,KAAK,cAAc,SAAS,KAAK,CAAC,CAAC;AAC1R,UAAM,qBAAqB,CAACC,QAAOC,SAAQ;AACvC,YAAM,QAAQ,KAAK,UAAU,IAAI,OAAK,EAAE,IAAI;AAC5C,UAAI,WAAW,OAAO;AACtB,UAAI,WAAW,OAAO;AACtB,UAAI,KAAK,oBAAoB;AACzB,QAAAA,OAAM,CAACA;AAAA,MACX;AACA,UAAIA,MAAK;AAIL,cAAM,aAAa,UAAU,KAAK,UAAU,SAAS;AACrD,YAAI,YAAY;AACZ,gBAAM,WAAW,KAAK,UAAU,KAAK;AACrC,sBAAY,SAAS,cAAc,SAAS,QAAQ;AACpD,sBAAY,SAAS,cAAc,SAAS,QAAQ;AAAA,QACxD,OACK;AACD,gBAAM,WAAW,KAAK,UAAU,QAAQ,CAAC;AACzC,sBAAY,SAAS,OAAO,SAAS,eAAe;AACpD,sBAAY,SAAS,OAAO,SAAS,eAAe;AAAA,QACxD;AAAA,MACJ;AACA,UAAI;AACJ,UAAI;AACJ,UAAI,CAACA,MAAK;AACN,cAAM,YAAY,MAAM,OAAO,EAAE;AACjC,cAAM,cAAc,MAAM,QAAQ,GAAG,KAAK,UAAU,MAAM;AAC1D,cAAM,aAAa,UAAU,OAAO,CAAC,GAAG,MAAM,KAAK,KAAK,UAAU,CAAC,EAAE,cAAc,MAAM,CAAC,IAAI,CAAC;AAC/F,cAAM,aAAa,UAAU,OAAO,CAAC,GAAG,MAAM,KAAK,KAAK,UAAU,CAAC,EAAE,kBAAkB,MAAM,CAAC,IAAI,CAAC;AACnG,cAAM,eAAe,YAAY,WAAW,IAAI,OAAO,oBAAoB,YAAY,OAAO,CAAC,GAAG,MAAM,KAAK,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,EAAE,cAAc,CAAC;AACzJ,cAAM,eAAe,YAAY,WAAW,IAAI,OAAO,oBAAoB,YAAY,OAAO,CAAC,GAAG,MAAM,KAAK,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,EAAE,kBAAkB,CAAC;AAC7J,cAAMC,YAAW,KAAK,IAAI,YAAY,YAAY;AAClD,cAAMC,YAAW,KAAK,IAAI,cAAc,UAAU;AAClD,cAAM,kBAAkB,KAAK,mBAAmB,SAAS;AACzD,cAAM,iBAAiB,KAAK,mBAAmB,WAAW;AAC1D,YAAI,OAAO,oBAAoB,UAAU;AACrC,gBAAM,WAAW,KAAK,UAAU,eAAe;AAC/C,gBAAM,WAAW,KAAK,MAAM,SAAS,kBAAkB,CAAC;AACxD,uBAAa;AAAA,YACT,OAAO;AAAA,YACP,YAAY,SAAS,UAAUD,YAAW,WAAWA,YAAW;AAAA,YAChE,MAAM,SAAS;AAAA,UACnB;AAAA,QACJ;AACA,YAAI,OAAO,mBAAmB,UAAU;AACpC,gBAAM,WAAW,KAAK,UAAU,cAAc;AAC9C,gBAAM,WAAW,KAAK,MAAM,SAAS,kBAAkB,CAAC;AACxD,sBAAY;AAAA,YACR,OAAO;AAAA,YACP,YAAY,SAAS,UAAUC,YAAW,WAAWA,YAAW;AAAA,YAChE,MAAM,SAAS;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,gBAAgB,EAAE,OAAAH,QAAO,SAASA,QAAO,OAAO,OAAO,UAAU,UAAU,KAAAC,MAAK,YAAY,WAAW,WAAW;AAAA,IAC3H;AACA,uBAAmB,OAAO,GAAG;AAAA,EACjC;AAAA,EACA,aAAa,EAAE,QAAQ,GAAG;AACtB,UAAM,EAAE,OAAO,OAAO,OAAO,KAAK,UAAU,UAAU,YAAY,UAAU,IAAI,KAAK;AACrF,SAAK,cAAc,UAAU;AAC7B,UAAM,QAAQ,UAAU;AACxB,UAAM,WAAW,KAAK,OAAO,OAAO,OAAO,OAAO,QAAW,QAAW,UAAU,UAAU,YAAY,SAAS;AACjH,QAAI,KAAK;AACL,YAAM,aAAa,UAAU,KAAK,UAAU,SAAS;AACrD,YAAM,WAAW,KAAK,UAAU,IAAI,OAAK,EAAE,IAAI;AAC/C,YAAM,gBAAgB,aAAa,QAAQ,QAAQ;AACnD,YAAM,WAAW,KAAK,UAAU,aAAa;AAC7C,YAAM,cAAc,SAAS,OAAO,SAAS;AAC7C,YAAM,cAAc,SAAS,OAAO,SAAS;AAC7C,YAAM,cAAc,aAAa,QAAQ,IAAI,QAAQ;AACrD,WAAK,OAAO,aAAa,CAAC,UAAU,UAAU,QAAW,QAAW,aAAa,WAAW;AAAA,IAChG;AACA,SAAK,qBAAqB;AAC1B,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,UAAU,OAAO;AACb,SAAK,iBAAiB,KAAK,KAAK;AAChC,SAAK,cAAc,WAAW,QAAQ;AACtC,SAAK,gBAAgB;AACrB,eAAW,QAAQ,KAAK,WAAW;AAC/B,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,aAAa,MAAM,MAAM;AACrB,UAAM,QAAQ,KAAK,UAAU,QAAQ,IAAI;AACzC,QAAI,QAAQ,KAAK,SAAS,KAAK,UAAU,QAAQ;AAC7C;AAAA,IACJ;AACA,WAAO,OAAO,SAAS,WAAW,OAAO,KAAK;AAC9C,WAAO,MAAM,MAAM,KAAK,aAAa,KAAK,WAAW;AACrD,QAAI,KAAK,sBAAsB,QAAQ,GAAG;AAGtC,WAAK,OAAO,QAAQ,GAAG,KAAK,OAAO,KAAK,OAAO,QAAQ,CAAC,CAAC;AACzD,WAAK,qBAAqB;AAC1B,WAAK,YAAY;AAAA,IACrB,OACK;AACD,WAAK,OAAO;AACZ,WAAK,SAAS,CAAC,KAAK,GAAG,MAAS;AAAA,IACpC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,OAAO,MAAM;AACpB,QAAI,QAAQ,KAAK,SAAS,KAAK,UAAU,QAAQ;AAC7C;AAAA,IACJ;AACA,QAAI,KAAK,UAAU,MAAM,MAAM;AAC3B,YAAM,IAAI,MAAM,uBAAuB;AAAA,IAC3C;AACA,SAAK,QAAQ,MAAM;AACnB,QAAI;AACA,YAAM,UAAU,MAAM,KAAK,UAAU,MAAM,EAAE,OAAO,OAAK,MAAM,KAAK;AACpE,YAAM,qBAAqB,CAAC,GAAG,QAAQ;AAAA,QAAO,OAAK,KAAK,UAAU,CAAC,EAAE,aAAa;AAAA;AAAA,MAA0B,GAAG,KAAK;AACpH,YAAM,sBAAsB,QAAQ;AAAA,QAAO,OAAK,KAAK,UAAU,CAAC,EAAE,aAAa;AAAA;AAAA,MAA2B;AAC1G,YAAM,OAAO,KAAK,UAAU,KAAK;AACjC,aAAO,KAAK,MAAM,IAAI;AACtB,aAAO,MAAM,MAAM,KAAK,aAAa,KAAK,IAAI,KAAK,aAAa,KAAK,IAAI,CAAC;AAC1E,WAAK,OAAO;AACZ,WAAK,SAAS,oBAAoB,mBAAmB;AAAA,IACzD,UACA;AACI,WAAK,QAAQ,MAAM;AAAA,IACvB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,sBAAsB;AAClB,UAAM,oBAAoB,CAAC;AAC3B,QAAI,eAAe;AACnB,eAAW,QAAQ,KAAK,WAAW;AAC/B,UAAI,KAAK,cAAc,KAAK,cAAc,GAAG;AACzC,0BAAkB,KAAK,IAAI;AAC3B,wBAAgB,KAAK;AAAA,MACzB;AAAA,IACJ;AACA,UAAM,OAAO,KAAK,MAAM,eAAe,kBAAkB,MAAM;AAC/D,eAAW,QAAQ,mBAAmB;AAClC,WAAK,OAAO,MAAM,MAAM,KAAK,aAAa,KAAK,WAAW;AAAA,IAC9D;AACA,UAAM,UAAU,MAAM,KAAK,UAAU,MAAM;AAC3C,UAAM,qBAAqB,QAAQ;AAAA,MAAO,OAAK,KAAK,UAAU,CAAC,EAAE,aAAa;AAAA;AAAA,IAA0B;AACxG,UAAM,sBAAsB,QAAQ;AAAA,MAAO,OAAK,KAAK,UAAU,CAAC,EAAE,aAAa;AAAA;AAAA,IAA2B;AAC1G,SAAK,SAAS,oBAAoB,mBAAmB;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,OAAO;AACf,QAAI,QAAQ,KAAK,SAAS,KAAK,UAAU,QAAQ;AAC7C,aAAO;AAAA,IACX;AACA,WAAO,KAAK,UAAU,KAAK,EAAE;AAAA,EACjC;AAAA,EACA,UAAU,MAAM,MAAM,QAAQ,KAAK,UAAU,QAAQ,YAAY;AAC7D,QAAI,KAAK,UAAU,MAAM,MAAM;AAC3B,YAAM,IAAI,MAAM,uBAAuB;AAAA,IAC3C;AACA,SAAK,QAAQ,MAAM;AACnB,QAAI;AAEA,YAAM,YAAY,EAAE,kBAAkB;AACtC,UAAI,UAAU,KAAK,UAAU,QAAQ;AACjC,aAAK,cAAc,YAAY,SAAS;AAAA,MAC5C,OACK;AACD,aAAK,cAAc,aAAa,WAAW,KAAK,cAAc,SAAS,KAAK,KAAK,CAAC;AAAA,MACtF;AACA,YAAM,qBAAqB,KAAK,YAAY,CAAAG,UAAQ,KAAK,aAAa,MAAMA,KAAI,CAAC;AACjF,YAAM,sBAAsB,aAAa,MAAM,KAAK,cAAc,YAAY,SAAS,CAAC;AACxF,YAAM,aAAa,mBAAmB,oBAAoB,mBAAmB;AAC7E,UAAI;AACJ,UAAI,OAAO,SAAS,UAAU;AAC1B,mBAAW;AAAA,MACf,OACK;AACD,YAAI,KAAK,SAAS,QAAQ;AACtB,cAAI,KAAK,oBAAoB,GAAG;AAC5B,mBAAO,EAAE,MAAM,aAAa;AAAA,UAChC,OACK;AACD,mBAAO,EAAE,MAAM,SAAS,OAAO,KAAK,MAAM;AAAA,UAC9C;AAAA,QACJ;AACA,YAAI,KAAK,SAAS,SAAS;AACvB,qBAAW,KAAK,YAAY,KAAK,KAAK,IAAI;AAAA,QAC9C,WACS,KAAK,SAAS,aAAa;AAChC,qBAAW,EAAE,mBAAmB,KAAK,kBAAkB;AAAA,QAC3D,OACK;AACD,qBAAW,KAAK;AAAA,QACpB;AAAA,MACJ;AACA,YAAM,OAAO,KAAK,gBAAgB,IAC5B,IAAI,iBAAiB,WAAW,MAAM,UAAU,UAAU,IAC1D,IAAI,mBAAmB,WAAW,MAAM,UAAU,UAAU;AAClE,WAAK,UAAU,OAAO,OAAO,GAAG,IAAI;AAEpC,UAAI,KAAK,UAAU,SAAS,GAAG;AAC3B,cAAM,OAAO,EAAE,qBAAqB,KAAK,qBAAqB,mBAAmB,KAAK,kBAAkB;AACxG,cAAM,OAAO,KAAK,gBAAgB,IAC5B,IAAI,KAAK,KAAK,eAAe,EAAE,sBAAsB,OAAK,KAAK,gBAAgB,CAAC,GAAG,wBAAwB,KAAK,sBAAsB,GAAG;AAAA,UAAE,GAAG;AAAA,UAAM,aAAa;AAAA;AAAA,QAA+B,CAAC,IACjM,IAAI,KAAK,KAAK,eAAe,EAAE,qBAAqB,OAAK,KAAK,gBAAgB,CAAC,GAAG,uBAAuB,KAAK,sBAAsB,GAAG;AAAA,UAAE,GAAG;AAAA,UAAM,aAAa;AAAA;AAAA,QAA6B,CAAC;AACnM,cAAM,kBAAkB,KAAK,gBAAgB,IACvC,CAAC,OAAO,EAAE,MAAM,OAAO,EAAE,QAAQ,SAAS,EAAE,UAAU,KAAK,EAAE,OAAO,KACpE,CAAC,OAAO,EAAE,MAAM,OAAO,EAAE,QAAQ,SAAS,EAAE,UAAU,KAAK,EAAE,OAAO;AAC1E,cAAM,UAAU,MAAM,IAAI,KAAK,YAAY,eAAe;AAC1D,cAAM,oBAAoB,QAAQ,KAAK,aAAa,IAAI;AACxD,cAAM,WAAW,MAAM,IAAI,KAAK,aAAa,eAAe;AAC5D,cAAMC,sBAAqB,SAAS,KAAK,cAAc,IAAI;AAC3D,cAAM,QAAQ,MAAM,IAAI,KAAK,UAAU,MAAM,KAAK,UAAU,UAAU,CAAAC,UAAQA,MAAK,SAAS,IAAI,CAAC;AACjG,cAAM,kBAAkB,MAAM,KAAK,WAAW,IAAI;AAClD,cAAM,uBAAuB,KAAK,WAAW,MAAM;AAC/C,gBAAMC,SAAQ,KAAK,UAAU,UAAU,CAAAD,UAAQA,MAAK,SAAS,IAAI;AACjE,gBAAM,YAAY,MAAMC,QAAO,EAAE;AACjC,gBAAM,cAAc,MAAMA,SAAQ,GAAG,KAAK,UAAU,MAAM;AAC1D,gBAAM,kBAAkB,KAAK,mBAAmB,SAAS;AACzD,gBAAM,iBAAiB,KAAK,mBAAmB,WAAW;AAC1D,cAAI,OAAO,oBAAoB,YAAY,CAAC,KAAK,UAAU,eAAe,EAAE,SAAS;AACjF;AAAA,UACJ;AACA,cAAI,OAAO,mBAAmB,YAAY,CAAC,KAAK,UAAU,cAAc,EAAE,SAAS;AAC/E;AAAA,UACJ;AACA,eAAK,gBAAgB,KAAKA,MAAK;AAAA,QACnC,CAAC;AACD,cAAMC,cAAa,mBAAmB,mBAAmBH,qBAAoB,iBAAiB,sBAAsB,IAAI;AACxH,cAAM,WAAW,EAAE,MAAM,YAAAG,YAAW;AACpC,aAAK,UAAU,OAAO,QAAQ,GAAG,GAAG,QAAQ;AAAA,MAChD;AACA,gBAAU,YAAY,KAAK,OAAO;AAClC,UAAI;AACJ,UAAI,OAAO,SAAS,YAAY,KAAK,SAAS,SAAS;AACnD,8BAAsB,CAAC,KAAK,KAAK;AAAA,MACrC;AACA,UAAI,CAAC,YAAY;AACb,aAAK,SAAS,CAAC,KAAK,GAAG,mBAAmB;AAAA,MAC9C;AACA,UAAI,CAAC,cAAc,OAAO,SAAS,YAAY,KAAK,SAAS,cAAc;AACvE,aAAK,oBAAoB;AAAA,MAC7B;AAAA,IACJ,UACA;AACI,WAAK,QAAQ,MAAM;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,SAAS,oBAAoB,qBAAqB;AAC9C,UAAM,cAAc,KAAK,UAAU,OAAO,CAAC,GAAG,MAAM,IAAI,EAAE,MAAM,CAAC;AACjE,SAAK,OAAO,KAAK,UAAU,SAAS,GAAG,KAAK,OAAO,aAAa,QAAW,oBAAoB,mBAAmB;AAClH,SAAK,qBAAqB;AAC1B,SAAK,YAAY;AACjB,SAAK,gBAAgB;AAAA,EACzB;AAAA,EACA,OAAO,OAAO,OAAO,QAAQ,KAAK,UAAU,IAAI,OAAK,EAAE,IAAI,GAAG,oBAAoB,qBAAqB,mBAAmB,OAAO,mBAAmB,mBAAmB,OAAO,mBAAmB,YAAY,WAAW;AACpN,QAAI,QAAQ,KAAK,SAAS,KAAK,UAAU,QAAQ;AAC7C,aAAO;AAAA,IACX;AACA,UAAM,YAAY,MAAM,OAAO,EAAE;AACjC,UAAM,cAAc,MAAM,QAAQ,GAAG,KAAK,UAAU,MAAM;AAC1D,QAAI,qBAAqB;AACrB,iBAAWD,UAAS,qBAAqB;AACrC,oBAAY,WAAWA,MAAK;AAC5B,oBAAY,aAAaA,MAAK;AAAA,MAClC;AAAA,IACJ;AACA,QAAI,oBAAoB;AACpB,iBAAWA,UAAS,oBAAoB;AACpC,kBAAU,WAAWA,MAAK;AAC1B,kBAAU,aAAaA,MAAK;AAAA,MAChC;AAAA,IACJ;AACA,UAAM,UAAU,UAAU,IAAI,OAAK,KAAK,UAAU,CAAC,CAAC;AACpD,UAAM,UAAU,UAAU,IAAI,OAAK,MAAM,CAAC,CAAC;AAC3C,UAAM,YAAY,YAAY,IAAI,OAAK,KAAK,UAAU,CAAC,CAAC;AACxD,UAAM,YAAY,YAAY,IAAI,OAAK,MAAM,CAAC,CAAC;AAC/C,UAAM,aAAa,UAAU,OAAO,CAAC,GAAG,MAAM,KAAK,KAAK,UAAU,CAAC,EAAE,cAAc,MAAM,CAAC,IAAI,CAAC;AAC/F,UAAM,aAAa,UAAU,OAAO,CAAC,GAAG,MAAM,KAAK,KAAK,UAAU,CAAC,EAAE,cAAc,MAAM,CAAC,IAAI,CAAC;AAC/F,UAAM,eAAe,YAAY,WAAW,IAAI,OAAO,oBAAoB,YAAY,OAAO,CAAC,GAAG,MAAM,KAAK,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,EAAE,cAAc,CAAC;AACzJ,UAAM,eAAe,YAAY,WAAW,IAAI,OAAO,oBAAoB,YAAY,OAAO,CAAC,GAAG,MAAM,KAAK,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,EAAE,cAAc,CAAC;AACzJ,UAAM,WAAW,KAAK,IAAI,YAAY,cAAc,gBAAgB;AACpE,UAAM,WAAW,KAAK,IAAI,cAAc,YAAY,gBAAgB;AACpE,QAAI,UAAU;AACd,QAAI,YAAY;AACZ,YAAM,WAAW,KAAK,UAAU,WAAW,KAAK;AAChD,YAAM,UAAU,SAAS,WAAW;AACpC,gBAAU,YAAY,SAAS;AAC/B,eAAS,WAAW,SAAS,WAAW,IAAI;AAAA,IAChD;AACA,QAAI,CAAC,WAAW,WAAW;AACvB,YAAM,WAAW,KAAK,UAAU,UAAU,KAAK;AAC/C,YAAM,UAAU,QAAQ,UAAU;AAClC,gBAAU,YAAY,SAAS;AAC/B,eAAS,WAAW,SAAS,UAAU,IAAI;AAAA,IAC/C;AACA,QAAI,SAAS;AACT,aAAO,KAAK,OAAO,OAAO,OAAO,OAAO,oBAAoB,qBAAqB,kBAAkB,gBAAgB;AAAA,IACvH;AACA,YAAQ,MAAM,OAAO,UAAU,QAAQ;AACvC,aAAS,IAAI,GAAG,UAAU,OAAO,IAAI,QAAQ,QAAQ,KAAK;AACtD,YAAM,OAAO,QAAQ,CAAC;AACtB,YAAM,OAAO,MAAM,QAAQ,CAAC,IAAI,SAAS,KAAK,aAAa,KAAK,WAAW;AAC3E,YAAM,YAAY,OAAO,QAAQ,CAAC;AAClC,iBAAW;AACX,WAAK,OAAO;AAAA,IAChB;AACA,aAAS,IAAI,GAAG,YAAY,OAAO,IAAI,UAAU,QAAQ,KAAK;AAC1D,YAAM,OAAO,UAAU,CAAC;AACxB,YAAM,OAAO,MAAM,UAAU,CAAC,IAAI,WAAW,KAAK,aAAa,KAAK,WAAW;AAC/E,YAAM,YAAY,OAAO,UAAU,CAAC;AACpC,mBAAa;AACb,WAAK,OAAO;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,kBAAkB;AACnC,UAAM,cAAc,KAAK,UAAU,OAAO,CAAC,GAAG,MAAM,IAAI,EAAE,MAAM,CAAC;AACjE,QAAI,aAAa,KAAK,OAAO;AAC7B,UAAM,UAAU,MAAM,KAAK,UAAU,SAAS,GAAG,EAAE;AACnD,UAAM,qBAAqB,QAAQ;AAAA,MAAO,OAAK,KAAK,UAAU,CAAC,EAAE,aAAa;AAAA;AAAA,IAA0B;AACxG,UAAM,sBAAsB,QAAQ;AAAA,MAAO,OAAK,KAAK,UAAU,CAAC,EAAE,aAAa;AAAA;AAAA,IAA2B;AAC1G,eAAW,SAAS,qBAAqB;AACrC,kBAAY,SAAS,KAAK;AAAA,IAC9B;AACA,eAAW,SAAS,oBAAoB;AACpC,gBAAU,SAAS,KAAK;AAAA,IAC5B;AACA,QAAI,OAAO,qBAAqB,UAAU;AACtC,gBAAU,SAAS,gBAAgB;AAAA,IACvC;AACA,aAAS,IAAI,GAAG,eAAe,KAAK,IAAI,QAAQ,QAAQ,KAAK;AACzD,YAAM,OAAO,KAAK,UAAU,QAAQ,CAAC,CAAC;AACtC,YAAM,OAAO,MAAM,KAAK,OAAO,YAAY,KAAK,aAAa,KAAK,WAAW;AAC7E,YAAM,YAAY,OAAO,KAAK;AAC9B,oBAAc;AACd,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,cAAc;AAEV,SAAK,eAAe,KAAK,UAAU,OAAO,CAAC,GAAG,MAAM,IAAI,EAAE,MAAM,CAAC;AAEjE,QAAI,SAAS;AACb,eAAW,YAAY,KAAK,WAAW;AACnC,eAAS,OAAO,QAAQ,KAAK,aAAa;AAC1C,gBAAU,SAAS;AAAA,IACvB;AAEA,SAAK,UAAU,QAAQ,UAAQ,KAAK,KAAK,OAAO,CAAC;AACjD,SAAK,qBAAqB;AAC1B,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,0BAA0B;AACtB,QAAI,KAAK,gBAAgB,GAA8B;AACnD,WAAK,kBAAkB,oBAAoB;AAAA,QACvC,QAAQ,KAAK;AAAA,QACb,cAAc,KAAK;AAAA,MACvB,CAAC;AAAA,IACL,OACK;AACD,WAAK,kBAAkB,oBAAoB;AAAA,QACvC,OAAO,KAAK;AAAA,QACZ,aAAa,KAAK;AAAA,MACtB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,QAAI,WAAW;AACf,UAAM,gBAAgB,KAAK,UAAU,IAAI,OAAK,WAAY,EAAE,OAAO,EAAE,cAAc,KAAM,QAAQ;AACjG,eAAW;AACX,UAAM,cAAc,KAAK,UAAU,IAAI,OAAK,WAAY,EAAE,cAAc,EAAE,OAAO,KAAM,QAAQ;AAC/F,UAAM,eAAe,CAAC,GAAG,KAAK,SAAS,EAAE,QAAQ;AACjD,eAAW;AACX,UAAM,cAAc,aAAa,IAAI,OAAK,WAAY,EAAE,OAAO,EAAE,cAAc,KAAM,QAAQ,EAAE,QAAQ;AACvG,eAAW;AACX,UAAM,YAAY,aAAa,IAAI,OAAK,WAAY,EAAE,cAAc,EAAE,OAAO,KAAM,QAAQ,EAAE,QAAQ;AACrG,QAAI,WAAW;AACf,aAAS,QAAQ,GAAG,QAAQ,KAAK,UAAU,QAAQ,SAAS;AACxD,YAAM,EAAE,KAAK,IAAI,KAAK,UAAU,KAAK;AACrC,YAAM,WAAW,KAAK,UAAU,KAAK;AACrC,kBAAY,SAAS;AACrB,YAAM,MAAM,EAAE,cAAc,KAAK,KAAK,UAAU,QAAQ,CAAC;AACzD,YAAM,MAAM,EAAE,YAAY,KAAK,KAAK,YAAY,QAAQ,CAAC;AACzD,UAAI,OAAO,KAAK;AACZ,cAAM,YAAY,MAAM,OAAO,EAAE;AACjC,cAAM,cAAc,MAAM,QAAQ,GAAG,KAAK,UAAU,MAAM;AAC1D,cAAM,kBAAkB,KAAK,mBAAmB,SAAS;AACzD,cAAM,iBAAiB,KAAK,mBAAmB,WAAW;AAC1D,cAAM,gBAAgB,OAAO,oBAAoB,YAAY,CAAC,KAAK,UAAU,eAAe,EAAE;AAC9F,cAAM,eAAe,OAAO,mBAAmB,YAAY,CAAC,KAAK,UAAU,cAAc,EAAE;AAC3F,YAAI,iBAAiB,YAAY,KAAK,MAAM,WAAW,KAAK,KAAK,uBAAuB;AACpF,eAAK,QAAQ;AAAA,QACjB,WACS,gBAAgB,cAAc,KAAK,MAAM,WAAW,KAAK,gBAAgB,KAAK,qBAAqB;AACxG,eAAK,QAAQ;AAAA,QACjB,OACK;AACD,eAAK,QAAQ;AAAA,QACjB;AAAA,MACJ,WACS,OAAO,CAAC,KAAK;AAClB,aAAK,QAAQ;AAAA,MACjB,WACS,CAAC,OAAO,KAAK;AAClB,aAAK,QAAQ;AAAA,MACjB,OACK;AACD,aAAK,QAAQ;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gBAAgB,MAAM;AAClB,QAAI,WAAW;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC5C,kBAAY,KAAK,UAAU,CAAC,EAAE;AAC9B,UAAI,KAAK,UAAU,CAAC,EAAE,SAAS,MAAM;AACjC,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,mBAAmB,SAAS;AAExB,eAAW,SAAS,SAAS;AACzB,YAAM,WAAW,KAAK,UAAU,KAAK;AACrC,UAAI,CAAC,SAAS,SAAS;AACnB;AAAA,MACJ;AACA,UAAI,SAAS,MAAM;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,eAAW,SAAS,SAAS;AACzB,YAAM,WAAW,KAAK,UAAU,KAAK;AACrC,UAAI,SAAS,WAAW,SAAS,cAAc,SAAS,cAAc,GAAG;AACrE,eAAO;AAAA,MACX;AACA,UAAI,CAAC,SAAS,WAAW,SAAS,MAAM;AACpC,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,sBAAsB;AAClB,QAAI,MAAM,QAAW,MAAM;AAC3B,eAAW,QAAQ,KAAK,WAAW;AAC/B,YAAM,QAAQ,SAAY,KAAK,OAAO,KAAK,IAAI,KAAK,KAAK,IAAI;AAC7D,YAAM,QAAQ,SAAY,KAAK,OAAO,KAAK,IAAI,KAAK,KAAK,IAAI;AAC7D,UAAI,MAAM,MAAM,GAAG;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AACN,QAAI;AACJ,KAAC,KAAK,KAAK,mBAAmB,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,QAAQ;AACrF,YAAQ,KAAK,SAAS;AACtB,SAAK,YAAY,CAAC;AAClB,SAAK,UAAU,QAAQ,OAAK,EAAE,WAAW,QAAQ,CAAC;AAClD,SAAK,YAAY,CAAC;AAClB,UAAM,QAAQ;AAAA,EAClB;AACJ;;;ACnzBA,OAAO;AACP,IAAM,oBAAN,MAAM,mBAAkB;AAAA,EACpB,YAAY,SAAS,WAAW,eAAe;AAC3C,SAAK,UAAU;AACf,SAAK,gBAAgB;AACrB,SAAK,aAAa,mBAAkB;AACpC,SAAK,oBAAoB,oBAAI,IAAI;AACjC,UAAM,cAAc,IAAI,IAAI,UAAU,IAAI,OAAK,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;AACjE,SAAK,YAAY,CAAC;AAClB,eAAW,UAAU,SAAS;AAC1B,YAAM,WAAW,YAAY,IAAI,OAAO,UAAU;AAClD,UAAI,CAAC,UAAU;AACX,cAAM,IAAI,MAAM,uCAAuC,OAAO,UAAU,aAAa;AAAA,MACzF;AACA,WAAK,UAAU,KAAK,QAAQ;AAAA,IAChC;AAAA,EACJ;AAAA,EACA,eAAe,WAAW;AACtB,UAAM,eAAe,OAAO,WAAW,EAAE,kBAAkB,CAAC;AAC5D,UAAM,iBAAiB,CAAC;AACxB,UAAM,mBAAmB,CAAC;AAC1B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,YAAM,WAAW,KAAK,UAAU,CAAC;AACjC,YAAM,gBAAgB,OAAO,cAAc,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,CAAC,CAAC;AACzF,oBAAc,MAAM,QAAQ,GAAG,KAAK,cAAc,CAAC,CAAC;AACpD,qBAAe,KAAK,aAAa;AACjC,uBAAiB,KAAK,SAAS,eAAe,aAAa,CAAC;AAAA,IAChE;AACA,UAAM,SAAS,EAAE,WAAW,gBAAgB,iBAAiB;AAC7D,SAAK,kBAAkB,IAAI,MAAM;AACjC,WAAO;AAAA,EACX;AAAA,EACA,cAAc,SAAS,OAAO,cAAc,QAAQ;AAChD,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,YAAM,SAAS,KAAK,QAAQ,CAAC;AAC7B,YAAM,OAAO,OAAO,QAAQ,OAAO;AACnC,YAAM,WAAW,KAAK,UAAU,CAAC;AACjC,eAAS,cAAc,MAAM,OAAO,aAAa,iBAAiB,CAAC,GAAG,MAAM;AAAA,IAChF;AAAA,EACJ;AAAA,EACA,eAAe,SAAS,OAAO,cAAc,QAAQ;AACjD,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,YAAM,WAAW,KAAK,UAAU,CAAC;AACjC,UAAI,SAAS,gBAAgB;AACzB,cAAM,SAAS,KAAK,QAAQ,CAAC;AAC7B,cAAM,OAAO,OAAO,QAAQ,OAAO;AACnC,iBAAS,eAAe,MAAM,OAAO,aAAa,iBAAiB,CAAC,GAAG,MAAM;AAAA,MACjF;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gBAAgB,cAAc;AAC1B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,YAAM,WAAW,KAAK,UAAU,CAAC;AACjC,eAAS,gBAAgB,aAAa,iBAAiB,CAAC,CAAC;AAAA,IAC7D;AACA,cAAU,aAAa,SAAS;AAChC,SAAK,kBAAkB,OAAO,YAAY;AAAA,EAC9C;AAAA,EACA,aAAa,OAAO,MAAM;AACtB,eAAW,EAAE,eAAe,KAAK,KAAK,mBAAmB;AACrD,qBAAe,KAAK,EAAE,MAAM,QAAQ,GAAG,IAAI;AAAA,IAC/C;AAAA,EACJ;AACJ;AACA,kBAAkB,aAAa;AAC/B,SAAS,sBAAsB,UAAU;AACrC,SAAO;AAAA,IACH,UAAU,KAAK;AAAE,aAAO,SAAS,UAAU,GAAG;AAAA,IAAG;AAAA,IACjD,gBAAgB;AAAE,aAAO,kBAAkB;AAAA,IAAY;AAAA,EAC3D;AACJ;AACA,IAAM,eAAN,MAAmB;AAAA,EACf,IAAI,cAAc;AAAE,QAAI;AAAI,YAAQ,KAAK,KAAK,OAAO,kBAAkB,QAAQ,OAAO,SAAS,KAAK;AAAA,EAAK;AAAA,EACzG,IAAI,cAAc;AAAE,QAAI;AAAI,YAAQ,KAAK,KAAK,OAAO,kBAAkB,QAAQ,OAAO,SAAS,KAAK,OAAO;AAAA,EAAmB;AAAA,EAC9H,IAAI,cAAc;AAAE,QAAI;AAAI,YAAQ,KAAK,KAAK,OAAO,iCAAiC,QAAQ,OAAO,SAAS,KAAK,MAAM;AAAA,EAAM;AAAA,EAC/H,YAAY,QAAQ,OAAO;AACvB,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,eAAe,IAAI,QAAQ;AAChC,SAAK,cAAc,KAAK,aAAa;AACrC,SAAK,UAAU,EAAE,oBAAoB,EAAE,kBAAkB,OAAO,OAAO,OAAO,QAAQ,GAAG,OAAO,KAAK;AAAA,EACzG;AAAA,EACA,OAAO,MAAM;AACT,SAAK,aAAa,KAAK,CAAC,KAAK,OAAO,IAAI,CAAC;AAAA,EAC7C;AACJ;AACO,IAAM,QAAN,MAAM,OAAM;AAAA,EACf,IAAI,mBAAmB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAkB;AAAA,EAC5D,IAAI,uBAAuB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAsB;AAAA,EACpE,IAAI,cAAc;AAAE,WAAO,KAAK,KAAK;AAAA,EAAa;AAAA,EAClD,IAAI,kBAAkB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAiB;AAAA,EAC1D,IAAI,YAAY;AAAE,WAAO,KAAK,KAAK;AAAA,EAAW;AAAA,EAC9C,IAAI,aAAa;AAAE,WAAO,KAAK,KAAK;AAAA,EAAY;AAAA,EAChD,IAAI,YAAY;AAAE,WAAO,KAAK,KAAK;AAAA,EAAW;AAAA,EAC9C,IAAI,UAAU,WAAW;AAAE,SAAK,KAAK,YAAY;AAAA,EAAW;AAAA,EAC5D,IAAI,eAAe;AAAE,WAAO,KAAK,KAAK;AAAA,EAAc;AAAA,EACpD,IAAI,eAAe;AAAE,WAAO,KAAK,KAAK;AAAA,EAAc;AAAA,EACpD,IAAI,eAAe;AAAE,WAAO,KAAK,KAAK;AAAA,EAAc;AAAA,EACpD,YAAY,MAAM,WAAW,iBAAiB,SAAS,WAAW,UAAU;AACxE,SAAK,kBAAkB;AACvB,SAAK,QAAQ,YAAY,EAAE,OAAM,aAAa;AAC9C,SAAK,cAAc,IAAI,gBAAgB;AACvC,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,UAAU,OAAO,WAAW,EAAE,iBAAiB,KAAK,KAAK,EAAE,CAAC;AACjE,UAAM,UAAU,QAAQ,IAAI,CAAC,GAAG,MAAM,IAAI,aAAa,GAAG,CAAC,CAAC;AAC5D,UAAM,aAAa;AAAA,MACf,MAAM,QAAQ,OAAO,CAAC,GAAG,MAAM,IAAI,EAAE,OAAO,QAAQ,CAAC;AAAA,MACrD,OAAO,QAAQ,IAAI,WAAS,EAAE,MAAM,KAAK,OAAO,QAAQ,KAAK,EAAE;AAAA,IACnE;AACA,SAAK,YAAY,KAAK,YAAY,IAAI,IAAI,UAAU,KAAK,SAAS;AAAA,MAC9D,aAAa;AAAA,MACb,qBAAqB;AAAA,MACrB,uBAAuB,MAAM,KAAK;AAAA,MAClC;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,UAAU,GAAG,MAAM,SAAS,GAAG,gBAAgB,eAAe;AACnE,SAAK,UAAU,GAAG,MAAM,aAAa,GAAG,gBAAgB,eAAe;AACvE,UAAM,WAAW,IAAI,kBAAkB,SAAS,WAAW,OAAK,KAAK,UAAU,YAAY,CAAC,CAAC;AAC7F,SAAK,OAAO,KAAK,YAAY,IAAI,IAAI,KAAK,MAAM,KAAK,SAAS,sBAAsB,eAAe,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC3H,UAAM,IAAI,GAAG,QAAQ,IAAI,CAAAE,OAAKA,GAAE,WAAW,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,MAAM,SAAS,aAAa,OAAO,IAAI,GAAG,MAAM,KAAK,WAAW;AAC3H,SAAK,UAAU,eAAe,WAAS;AACnC,YAAM,cAAc,QAAQ,OAAO,CAAC,GAAG,MAAM,IAAI,EAAE,QAAQ,CAAC;AAC5D,YAAM,OAAO,QAAQ,KAAK,EAAE,SAAS,cAAc,KAAK;AACxD,WAAK,UAAU,WAAW,OAAO,IAAI;AAAA,IACzC,GAAG,MAAM,KAAK,WAAW;AACzB,SAAK,eAAe,iBAAiB,KAAK,OAAO;AACjD,SAAK,MAAM,kBAAkB;AAAA,EACjC;AAAA,EACA,cAAc,SAAS;AACnB,SAAK,KAAK,cAAc,OAAO;AAAA,EACnC;AAAA,EACA,OAAO,OAAO,aAAa,WAAW,CAAC,GAAG;AACtC,SAAK,KAAK,OAAO,OAAO,aAAa,QAAQ;AAAA,EACjD;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,MAAM,QAAQ;AACV,UAAM,UAAU,CAAC;AACjB,YAAQ,KAAK,iBAAiB,KAAK,KAAK;AAAA,UACtC,KAAK,gBAAgB,kBAAkB,CAAC;AAAA,yBACzB,KAAK,gBAAgB,eAAe;AAAA,IACzD;AACI,SAAK,aAAa,cAAc,QAAQ,KAAK,IAAI;AACjD,SAAK,KAAK,MAAM,MAAM;AAAA,EAC1B;AAAA,EACA,sBAAsB;AAClB,WAAO,KAAK,KAAK,oBAAoB;AAAA,EACzC;AAAA,EACA,eAAe;AACX,WAAO,KAAK,KAAK,aAAa;AAAA,EAClC;AAAA,EACA,WAAW;AACP,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EACA,UAAU;AACN,SAAK,YAAY,QAAQ;AAAA,EAC7B;AACJ;AACA,MAAM,gBAAgB;;;ACrKf,IAAI;AAAA,CACV,SAAUC,iCAAgC;AACvC,EAAAA,gCAA+BA,gCAA+B,UAAU,IAAI,CAAC,IAAI;AACjF,EAAAA,gCAA+BA,gCAA+B,WAAW,IAAI,CAAC,IAAI;AAIlF,EAAAA,gCAA+BA,gCAA+B,oBAAoB,IAAI,CAAC,IAAI;AAI3F,EAAAA,gCAA+BA,gCAA+B,qBAAqB,IAAI,CAAC,IAAI;AAChG,GAAG,mCAAmC,iCAAiC,CAAC,EAAE;AACnE,IAAI;AAAA,CACV,SAAUC,uBAAsB;AAC7B,EAAAA,sBAAqBA,sBAAqB,SAAS,IAAI,CAAC,IAAI;AAC5D,EAAAA,sBAAqBA,sBAAqB,SAAS,IAAI,CAAC,IAAI;AAC5D,EAAAA,sBAAqBA,sBAAqB,SAAS,IAAI,CAAC,IAAI;AAC5D,EAAAA,sBAAqBA,sBAAqB,QAAQ,IAAI,CAAC,IAAI;AAC/D,GAAG,yBAAyB,uBAAuB,CAAC,EAAE;AAC/C,IAAM,YAAN,cAAwB,MAAM;AAAA,EACjC,YAAY,MAAM,SAAS;AACvB,UAAM,cAAc,IAAI,KAAK,OAAO,EAAE;AAAA,EAC1C;AACJ;AACO,IAAM,aAAN,MAAiB;AAAA,EACpB,YAAY,IAAI;AACZ,SAAK,KAAK;AACV,SAAK,OAAO,oBAAI,QAAQ;AAAA,EAC5B;AAAA,EACA,IAAI,KAAK;AACL,QAAI,SAAS,KAAK,KAAK,IAAI,GAAG;AAC9B,QAAI,CAAC,QAAQ;AACT,eAAS,KAAK,GAAG,GAAG;AACpB,WAAK,KAAK,IAAI,KAAK,MAAM;AAAA,IAC7B;AACA,WAAO;AAAA,EACX;AACJ;;;AC/BO,SAAS,eAAe,KAAK;AAChC,SAAO,OAAO,QAAQ,YAAY,gBAAgB,OAAO,UAAU;AACvE;AACO,SAAS,gBAAgB,YAAY;AACxC,UAAQ,YAAY;AAAA,IAChB,KAAK;AAAM,aAAO;AAAA,IAClB,KAAK;AAAO,aAAO;AAAA,IACnB;AAAS,aAAO;AAAA,EACpB;AACJ;AACA,SAAS,yBAAyB,QAAQ;AACtC,SAAO,OAAO,OAAO,gBAAgB;AACzC;AACO,IAAM,iBAAN,MAAqB;AAAA,EACxB,YAAY,MAAM,MAAM,aAAa,UAAU,CAAC,GAAG;AAC/C,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,UAAU,CAAC;AAChB,SAAK,gBAAgB,IAAI,cAAc;AACvC,SAAK,4BAA4B,IAAI,QAAQ;AAC7C,SAAK,2BAA2B,KAAK,cAAc,UAAU,KAAK,0BAA0B,KAAK;AACjG,SAAK,8BAA8B,IAAI,QAAQ;AAC/C,SAAK,6BAA6B,KAAK,cAAc,UAAU,KAAK,4BAA4B,KAAK;AACrG,SAAK,eAAe,IAAI,QAAQ;AAChC,SAAK,cAAc,KAAK,aAAa;AACrC,SAAK,kBAAkB,IAAI,QAAQ,cAAc;AACjD,SAAK,oBAAoB,OAAO,QAAQ,sBAAsB,cAAc,QAAQ,QAAQ;AAC5F,SAAK,SAAS,QAAQ;AACtB,SAAK,2BAA2B,OAAO,QAAQ,6BAA6B,cAAc,QAAQ,QAAQ;AAC1G,SAAK,OAAO;AAAA,MACR,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,UAAU,CAAC;AAAA,MACX,OAAO;AAAA,MACP,sBAAsB;AAAA,MACtB,mBAAmB;AAAA,MACnB,aAAa;AAAA,MACb,WAAW;AAAA,MACX,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,YAAY;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,OAAO,UAAU,aAAa,WAAW,SAAS,MAAM,GAAG,UAAU,CAAC,GAAG;AACrE,QAAI,SAAS,WAAW,GAAG;AACvB,YAAM,IAAI,UAAU,KAAK,MAAM,uBAAuB;AAAA,IAC1D;AACA,QAAI,QAAQ,sBAAsB;AAC9B,WAAK,YAAY,QAAQ,sBAAsB,UAAU,aAAa,UAAU,OAAO;AAAA,IAC3F,OACK;AACD,WAAK,aAAa,UAAU,aAAa,UAAU,OAAO;AAAA,IAC9D;AAAA,EACJ;AAAA,EACA,YAAY,UAAU,UAAU,aAAa,kBAAkB,SAAS,eAAe;AACnF,QAAI;AACJ,QAAI,qBAAqB,QAAQ;AAAE,yBAAmB,SAAS,MAAM;AAAA,IAAG;AACxE,QAAI,kBAAkB,QAAQ;AAAE,uBAAiB,KAAK,QAAQ,eAAe,QAAQ,OAAO,SAAS,KAAK;AAAA,IAAG;AAC7G,UAAM,EAAE,WAAW,IAAI,KAAK,2BAA2B,QAAQ;AAC/D,QAAI,CAAC,WAAW,aAAa;AACzB,aAAO,KAAK,aAAa,UAAU,aAAa,kBAAkB,OAAO;AAAA,IAC7E;AACA,UAAM,WAAW,CAAC,GAAG,gBAAgB;AACrC,UAAM,QAAQ,SAAS,SAAS,SAAS,CAAC;AAC1C,UAAM,OAAO,IAAI,QAAQ,EAAE,aAAa,MAAM,WAAW,YAAY,GAAG;AAAA,MACpE,aAAa,MAAM;AAAA,QACf,GAAG,WAAW,SAAS,MAAM,GAAG,KAAK;AAAA,QACrC,GAAG;AAAA,QACH,GAAG,WAAW,SAAS,MAAM,QAAQ,WAAW;AAAA,MACpD,EAAE,IAAI,OAAK,SAAS,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;AAAA,IACnD,CAAC,EAAE,YAAY,KAAK;AAEpB,QAAI,KAAK,WAAW;AAChB,iBAAW,cAAc;AACzB,aAAO,KAAK,aAAa,UAAU,aAAa,UAAU,OAAO;AAAA,IACrE;AACA,UAAM,iBAAiB,SAAS,MAAM,GAAG,EAAE;AAC3C,UAAM,gBAAgB,CAAC,cAAc,cAAc,UAAU;AACzD,UAAI,gBAAgB,GAAG;AACnB,iBAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B;AACA;AACA,eAAK,YAAY,UAAU,CAAC,GAAG,gBAAgB,cAAc,CAAC,GAAG,OAAO,kBAAkB,SAAS,YAAY,EAAE,UAAU,SAAS,gBAAgB,CAAC;AAAA,QACzJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,aAAa,KAAK,IAAI,WAAW,SAAS,QAAQ,QAAQ,WAAW;AACzE,QAAI,aAAa,SAAS;AAC1B,eAAW,UAAU,KAAK,QAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,gBAAgB,EAAE,aAAa,GAAG;AACjF,oBAAc,YAAY,YAAY,cAAc,OAAO,gBAAgB,OAAO,eAAe;AACjG,mBAAa,OAAO;AACpB,mBAAa,OAAO,gBAAgB;AACpC,WAAK,aAAa,CAAC,GAAG,gBAAgB,UAAU,GAAG,OAAO,gBAAgB,SAAS,MAAM,UAAU,YAAY,aAAa,OAAO,cAAc,GAAG,OAAO;AAAA,IAC/J;AAEA,kBAAc,YAAY,YAAY,UAAU;AAAA,EACpD;AAAA,EACA,aAAa,UAAU,aAAa,WAAW,SAAS,MAAM,GAAG,EAAE,iBAAiB,iBAAiB,qBAAqB,GAAG;AACzH,UAAM,EAAE,YAAY,WAAW,UAAU,QAAQ,IAAI,KAAK,2BAA2B,QAAQ;AAC7F,UAAM,2BAA2B,CAAC;AAClC,UAAM,wBAAwB,SAAS,IAAI,UAAU,QAAM,KAAK,eAAe,IAAI,YAAY,WAAW,UAAU,IAAiC,GAA+B,UAAU,0BAA0B,eAAe,CAAC;AACxO,UAAM,YAAY,SAAS,SAAS,SAAS,CAAC;AAC9C,UAAM,kBAAkB,WAAW,SAAS,SAAS;AAGrD,QAAI,yBAAyB;AAC7B,aAAS,IAAI,WAAW,KAAK,KAAK,IAAI,WAAW,SAAS,QAAQ,KAAK;AACnE,YAAM,QAAQ,WAAW,SAAS,CAAC;AACnC,UAAI,MAAM,SAAS;AACf,iCAAyB,MAAM;AAC/B;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,gBAAgB,CAAC;AACvB,QAAI,+BAA+B;AACnC,QAAI,kBAAkB;AACtB,eAAW,SAAS,uBAAuB;AACvC,oBAAc,KAAK,KAAK;AACxB,yBAAmB,MAAM;AACzB,UAAI,MAAM,SAAS;AACf,cAAM,oBAAoB,yBAAyB;AAAA,MACvD;AAAA,IACJ;AACA,UAAM,eAAe,OAAO,WAAW,UAAU,WAAW,aAAa,aAAa;AACtF,QAAI,CAAC,sBAAsB;AACvB,iBAAW,cAAc;AAAA,IAC7B,WACS,WAAW,aAAa;AAC7B,aAAO,WAAW,aAAa,WAAW,aAAa,cAAc,IAAI,OAAK,qBAAqB,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;AAAA,IACnI,OACK;AACD,iBAAW,cAAc,WAAW,SAAS,IAAI,OAAK,qBAAqB,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;AAAA,IAC1G;AAEA,QAAI,8BAA8B;AAClC,eAAW,SAAS,cAAc;AAC9B,UAAI,MAAM,SAAS;AACf;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,gCAAgC,GAAG;AACnC,eAAS,IAAI,YAAY,cAAc,QAAQ,IAAI,WAAW,SAAS,QAAQ,KAAK;AAChF,cAAM,QAAQ,WAAW,SAAS,CAAC;AACnC,YAAI,MAAM,SAAS;AACf,gBAAM,qBAAqB;AAAA,QAC/B;AAAA,MACJ;AAAA,IACJ;AAEA,eAAW,wBAAwB,+BAA+B;AAClE,QAAI,YAAY,SAAS;AACrB,YAAM,qBAAqB,aAAa,OAAO,CAAC,GAAGC,UAAS,KAAKA,MAAK,UAAUA,MAAK,kBAAkB,IAAI,CAAC;AAC5G,WAAK,gCAAgC,YAAY,kBAAkB,kBAAkB;AACrF,WAAK,KAAK,OAAO,WAAW,oBAAoB,wBAAwB;AAAA,IAC5E;AACA,QAAI,aAAa,SAAS,KAAK,iBAAiB;AAC5C,YAAM,QAAQ,CAACA,UAAS;AACpB,wBAAgBA,KAAI;AACpB,QAAAA,MAAK,SAAS,QAAQ,KAAK;AAAA,MAC/B;AACA,mBAAa,QAAQ,KAAK;AAAA,IAC9B;AACA,SAAK,aAAa,KAAK,EAAE,eAAe,eAAe,aAAa,CAAC;AACrE,UAAM,uBAAuB,WAAW,SAAS,SAAS;AAC1D,QAAI,oBAAoB,sBAAsB;AAC1C,WAAK,eAAe,SAAS,MAAM,GAAG,EAAE,GAAG,oBAAoB;AAAA,IACnE;AACA,QAAI,OAAO;AACX,WAAO,MAAM;AACT,UAAI,KAAK,eAAe,GAAgC;AAEpD,aAAK,gBAAgB,QAAQ,MAAM,KAAK,SAAS,CAAC;AAClD;AAAA,MACJ;AACA,aAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,SAAS,UAAU;AACf,QAAI,SAAS,WAAW,GAAG;AACvB,YAAM,IAAI,UAAU,KAAK,MAAM,uBAAuB;AAAA,IAC1D;AACA,UAAM,EAAE,MAAM,WAAW,SAAS,IAAI,KAAK,yBAAyB,QAAQ;AAC5E,QAAI,KAAK,WAAW,UAAU;AAC1B,WAAK,KAAK,OAAO,WAAW,GAAG,CAAC,IAAI,CAAC;AAAA,IACzC;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,YAAY,QAAQ;AAAA,EACpC;AAAA,EACA,aAAa,UAAU;AACnB,UAAM,EAAE,WAAW,SAAS,SAAS,IAAI,KAAK,yBAAyB,QAAQ;AAC/E,WAAO,WAAW,WAAW,YAAY;AAAA,EAC7C;AAAA,EACA,mBAAmB,UAAU;AACzB,WAAO,KAAK,YAAY,QAAQ,EAAE;AAAA,EACtC;AAAA,EACA,cAAc,UAAU;AACpB,WAAO,KAAK,YAAY,QAAQ,EAAE;AAAA,EACtC;AAAA,EACA,eAAe,UAAU,aAAa;AAClC,UAAM,OAAO,KAAK,YAAY,QAAQ;AACtC,QAAI,OAAO,gBAAgB,aAAa;AACpC,oBAAc,CAAC,KAAK;AAAA,IACxB;AACA,UAAM,SAAS,EAAE,YAAY;AAC7B,WAAO,KAAK,cAAc,aAAa,MAAM,KAAK,kBAAkB,UAAU,MAAM,CAAC;AAAA,EACzF;AAAA,EACA,YAAY,UAAU;AAClB,WAAO,KAAK,YAAY,QAAQ,EAAE;AAAA,EACtC;AAAA,EACA,aAAa,UAAU,WAAW,WAAW;AACzC,UAAM,OAAO,KAAK,YAAY,QAAQ;AACtC,QAAI,OAAO,cAAc,aAAa;AAClC,kBAAY,CAAC,KAAK;AAAA,IACtB;AACA,UAAM,SAAS,EAAE,WAAW,WAAW,aAAa,MAAM;AAC1D,WAAO,KAAK,cAAc,aAAa,MAAM,KAAK,kBAAkB,UAAU,MAAM,CAAC;AAAA,EACzF;AAAA,EACA,kBAAkB,UAAU,QAAQ;AAChC,UAAM,EAAE,MAAM,WAAW,SAAS,IAAI,KAAK,yBAAyB,QAAQ;AAC5E,UAAM,SAAS,KAAK,0BAA0B,MAAM,WAAW,UAAU,MAAM;AAC/E,QAAI,SAAS,KAAK,QAAQ,KAAK,4BAA4B,UAAU,CAAC,yBAAyB,MAAM,KAAK,KAAK,eAAe,CAAC,KAAK,aAAa,CAAC,OAAO,WAAW;AAChK,UAAI,wBAAwB;AAC5B,eAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,cAAM,QAAQ,KAAK,SAAS,CAAC;AAC7B,YAAI,MAAM,SAAS;AACf,cAAI,wBAAwB,IAAI;AAC5B,oCAAwB;AACxB;AAAA,UACJ,OACK;AACD,oCAAwB;AAAA,UAC5B;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,wBAAwB,IAAI;AAC5B,aAAK,kBAAkB,CAAC,GAAG,UAAU,qBAAqB,GAAG,MAAM;AAAA,MACvE;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,0BAA0B,MAAM,WAAW,UAAU,QAAQ;AACzD,UAAM,SAAS,KAAK,sBAAsB,MAAM,QAAQ,KAAK;AAC7D,QAAI,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC,QAAQ;AACvC,aAAO;AAAA,IACX;AACA,UAAM,0BAA0B,KAAK;AACrC,UAAM,WAAW,KAAK,8BAA8B,IAAI;AACxD,UAAM,cAAc,2BAA2B,cAAc,KAAK,IAAI;AACtE,SAAK,KAAK,OAAO,YAAY,GAAG,aAAa,SAAS,MAAM,CAAC,CAAC;AAC9D,WAAO;AAAA,EACX;AAAA,EACA,sBAAsB,MAAM,QAAQ,MAAM;AACtC,QAAI;AACJ,QAAI,SAAS,KAAK,MAAM;AACpB,eAAS;AAAA,IACb,OACK;AACD,UAAI,yBAAyB,MAAM,GAAG;AAClC,iBAAS,KAAK,gBAAgB,OAAO;AACrC,aAAK,cAAc,OAAO;AAAA,MAC9B,WACS,CAAC,KAAK,aAAa;AACxB,iBAAS;AAAA,MACb,OACK;AACD,iBAAS,KAAK,cAAc,OAAO;AACnC,aAAK,YAAY,OAAO;AAAA,MAC5B;AACA,UAAI,QAAQ;AACR,aAAK,0BAA0B,KAAK,EAAE,MAAM,KAAK,CAAC;AAAA,MACtD;AAAA,IACJ;AACA,QAAI,CAAC,yBAAyB,MAAM,KAAK,OAAO,WAAW;AACvD,iBAAW,SAAS,KAAK,UAAU;AAC/B,iBAAS,KAAK,sBAAsB,OAAO,QAAQ,IAAI,KAAK;AAAA,MAChE;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS,UAAU;AACf,SAAK,cAAc,aAAa,MAAM;AAClC,UAAI,OAAO,KAAK,YAAY,QAAQ;AACpC,aAAO,KAAK,QAAQ;AAChB,eAAO,KAAK;AACZ,mBAAW,SAAS,MAAM,GAAG,SAAS,SAAS,CAAC;AAChD,YAAI,KAAK,WAAW;AAChB,eAAK,kBAAkB,UAAU,EAAE,WAAW,OAAO,WAAW,MAAM,CAAC;AAAA,QAC3E;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,WAAW;AACP,UAAM,0BAA0B,KAAK,KAAK;AAC1C,UAAM,WAAW,KAAK,4BAA4B,KAAK,IAAI;AAC3D,SAAK,KAAK,OAAO,GAAG,yBAAyB,QAAQ;AACrD,SAAK,gBAAgB,OAAO;AAAA,EAChC;AAAA,EACA,eAAe,aAAa,QAAQ,kBAAkB,UAAU,kBAAkB,iBAAiB;AAC/F,UAAM,OAAO;AAAA,MACT;AAAA,MACA,SAAS,YAAY;AAAA,MACrB,UAAU,CAAC;AAAA,MACX,OAAO,OAAO,QAAQ;AAAA,MACtB,sBAAsB;AAAA,MACtB,mBAAmB;AAAA,MACnB,aAAa,OAAO,YAAY,gBAAgB,YAAY,YAAY,cAAe,OAAO,YAAY,cAAc;AAAA,MACxH,WAAW,OAAO,YAAY,cAAc,cAAc,KAAK,oBAAoB,YAAY;AAAA,MAC/F,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,YAAY;AAAA,IAChB;AACA,UAAM,aAAa,KAAK,YAAY,MAAM,gBAAgB;AAC1D,SAAK,aAAa;AAClB,QAAI,UAAU;AACV,uBAAiB,KAAK,IAAI;AAAA,IAC9B;AACA,UAAM,gBAAgB,YAAY,YAAY,SAAS,MAAM;AAC7D,UAAM,gBAAgB,YAAY,eAAe,KAAiC,CAAC,KAAK;AACxF,QAAI,uBAAuB;AAC3B,QAAI,kBAAkB;AACtB,eAAW,MAAM,eAAe;AAC5B,YAAM,QAAQ,KAAK,eAAe,IAAI,MAAM,YAAY,eAAe,kBAAkB,eAAe;AACxG,WAAK,SAAS,KAAK,KAAK;AACxB,yBAAmB,MAAM;AACzB,UAAI,MAAM,SAAS;AACf,cAAM,oBAAoB;AAAA,MAC9B;AAAA,IACJ;AACA,SAAK,cAAc,KAAK,eAAe,KAAK,SAAS,SAAS;AAC9D,SAAK,uBAAuB;AAC5B,SAAK,UAAU,eAAe,IAAiC,uBAAuB,IAAK,eAAe;AAC1G,QAAI,CAAC,KAAK,SAAS;AACf,WAAK,kBAAkB;AACvB,UAAI,UAAU;AACV,yBAAiB,IAAI;AAAA,MACzB;AAAA,IACJ,WACS,CAAC,KAAK,WAAW;AACtB,WAAK,kBAAkB;AAAA,IAC3B;AACA,wBAAoB,QAAQ,oBAAoB,SAAS,SAAS,gBAAgB,IAAI;AACtF,WAAO;AAAA,EACX;AAAA,EACA,8BAA8B,MAAM;AAChC,UAAM,0BAA0B,KAAK;AACrC,UAAM,SAAS,CAAC;AAChB,SAAK,+BAA+B,MAAM,MAAM;AAChD,SAAK,gCAAgC,KAAK,QAAQ,OAAO,SAAS,uBAAuB;AACzF,WAAO;AAAA,EACX;AAAA,EACA,+BAA+B,MAAM,QAAQ;AACzC,QAAI,KAAK,YAAY,OAAO;AACxB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,IAAI;AAChB,SAAK,kBAAkB;AACvB,QAAI,CAAC,KAAK,WAAW;AACjB,iBAAW,SAAS,KAAK,UAAU;AAC/B,aAAK,mBAAmB,KAAK,+BAA+B,OAAO,MAAM;AAAA,MAC7E;AAAA,IACJ;AACA,SAAK,4BAA4B,KAAK,IAAI;AAC1C,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,4BAA4B,MAAM;AAC9B,UAAM,0BAA0B,KAAK;AACrC,UAAM,SAAS,CAAC;AAChB,SAAK,6BAA6B,MAAM,KAAK,UAAU,IAAiC,GAA+B,MAAM;AAC7H,SAAK,gCAAgC,KAAK,QAAQ,OAAO,SAAS,uBAAuB;AACzF,WAAO;AAAA,EACX;AAAA,EACA,6BAA6B,MAAM,kBAAkB,QAAQ,WAAW,MAAM;AAC1E,QAAI;AACJ,QAAI,SAAS,KAAK,MAAM;AACpB,mBAAa,KAAK,YAAY,MAAM,gBAAgB;AACpD,UAAI,eAAe,GAA+B;AAC9C,aAAK,UAAU;AACf,aAAK,kBAAkB;AACvB,eAAO;AAAA,MACX;AACA,UAAI,UAAU;AACV,eAAO,KAAK,IAAI;AAAA,MACpB;AAAA,IACJ;AACA,UAAM,oBAAoB,OAAO;AACjC,SAAK,kBAAkB,SAAS,KAAK,OAAO,IAAI;AAChD,QAAI,wBAAwB;AAC5B,QAAI,CAAC,KAAK,aAAa,eAAe,GAA+B;AACjE,UAAI,oBAAoB;AACxB,iBAAW,SAAS,KAAK,UAAU;AAC/B,gCAAwB,KAAK,6BAA6B,OAAO,YAAY,QAAQ,YAAY,CAAC,KAAK,SAAS,KAAK;AACrH,YAAI,MAAM,SAAS;AACf,gBAAM,oBAAoB;AAAA,QAC9B;AAAA,MACJ;AACA,WAAK,uBAAuB;AAAA,IAChC,OACK;AACD,WAAK,uBAAuB;AAAA,IAChC;AACA,QAAI,SAAS,KAAK,MAAM;AACpB,WAAK,UAAU,eAAe,IAAiC,wBAAyB,eAAe;AACvG,WAAK,aAAa;AAAA,IACtB;AACA,QAAI,CAAC,KAAK,SAAS;AACf,WAAK,kBAAkB;AACvB,UAAI,UAAU;AACV,eAAO,IAAI;AAAA,MACf;AAAA,IACJ,WACS,CAAC,KAAK,WAAW;AACtB,WAAK,mBAAmB,OAAO,SAAS;AAAA,IAC5C;AACA,SAAK,4BAA4B,KAAK,IAAI;AAC1C,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,gCAAgC,MAAM,MAAM;AACxC,QAAI,SAAS,GAAG;AACZ;AAAA,IACJ;AACA,WAAO,MAAM;AACT,WAAK,mBAAmB;AACxB,WAAK,4BAA4B,KAAK,IAAI;AAC1C,aAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,YAAY,MAAM,kBAAkB;AAChC,UAAM,SAAS,KAAK,SAAS,KAAK,OAAO,OAAO,KAAK,SAAS,gBAAgB,IAAI;AAClF,QAAI,OAAO,WAAW,WAAW;AAC7B,WAAK,aAAa;AAClB,aAAO,SAAS,IAAiC;AAAA,IACrD,WACS,eAAe,MAAM,GAAG;AAC7B,WAAK,aAAa,OAAO;AACzB,aAAO,gBAAgB,OAAO,UAAU;AAAA,IAC5C,OACK;AACD,WAAK,aAAa;AAClB,aAAO,gBAAgB,MAAM;AAAA,IACjC;AAAA,EACJ;AAAA;AAAA,EAEA,YAAY,UAAU,OAAO,KAAK,MAAM;AACpC,QAAI,CAAC,YAAY,SAAS,WAAW,GAAG;AACpC,aAAO;AAAA,IACX;AACA,UAAM,CAAC,OAAO,GAAG,IAAI,IAAI;AACzB,QAAI,QAAQ,KAAK,QAAQ,KAAK,SAAS,QAAQ;AAC3C,aAAO;AAAA,IACX;AACA,WAAO,KAAK,YAAY,MAAM,KAAK,SAAS,KAAK,CAAC;AAAA,EACtD;AAAA;AAAA,EAEA,YAAY,UAAU,OAAO,KAAK,MAAM;AACpC,QAAI,CAAC,YAAY,SAAS,WAAW,GAAG;AACpC,aAAO;AAAA,IACX;AACA,UAAM,CAAC,OAAO,GAAG,IAAI,IAAI;AACzB,QAAI,QAAQ,KAAK,QAAQ,KAAK,SAAS,QAAQ;AAC3C,YAAM,IAAI,UAAU,KAAK,MAAM,uBAAuB;AAAA,IAC1D;AACA,WAAO,KAAK,YAAY,MAAM,KAAK,SAAS,KAAK,CAAC;AAAA,EACtD;AAAA;AAAA,EAEA,yBAAyB,UAAU;AAC/B,QAAI,SAAS,WAAW,GAAG;AACvB,aAAO,EAAE,MAAM,KAAK,MAAM,WAAW,IAAI,UAAU,MAAM,SAAS,MAAM;AAAA,IAC5E;AACA,UAAM,EAAE,YAAY,WAAW,UAAU,QAAQ,IAAI,KAAK,2BAA2B,QAAQ;AAC7F,UAAM,QAAQ,SAAS,SAAS,SAAS,CAAC;AAC1C,QAAI,QAAQ,KAAK,QAAQ,WAAW,SAAS,QAAQ;AACjD,YAAM,IAAI,UAAU,KAAK,MAAM,uBAAuB;AAAA,IAC1D;AACA,UAAM,OAAO,WAAW,SAAS,KAAK;AACtC,WAAO,EAAE,MAAM,WAAW,UAAU,SAAS,WAAW,KAAK,QAAQ;AAAA,EACzE;AAAA,EACA,2BAA2B,UAAU,OAAO,KAAK,MAAM,YAAY,GAAG,WAAW,MAAM,UAAU,MAAM;AACnG,UAAM,CAAC,OAAO,GAAG,IAAI,IAAI;AACzB,QAAI,QAAQ,KAAK,QAAQ,KAAK,SAAS,QAAQ;AAC3C,YAAM,IAAI,UAAU,KAAK,MAAM,uBAAuB;AAAA,IAC1D;AAEA,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,mBAAa,KAAK,SAAS,CAAC,EAAE;AAAA,IAClC;AACA,eAAW,YAAY,CAAC,KAAK;AAC7B,cAAU,WAAW,KAAK;AAC1B,QAAI,KAAK,WAAW,GAAG;AACnB,aAAO,EAAE,YAAY,MAAM,WAAW,UAAU,QAAQ;AAAA,IAC5D;AACA,WAAO,KAAK,2BAA2B,MAAM,KAAK,SAAS,KAAK,GAAG,YAAY,GAAG,UAAU,OAAO;AAAA,EACvG;AAAA,EACA,QAAQ,WAAW,CAAC,GAAG;AACnB,WAAO,KAAK,YAAY,QAAQ;AAAA,EACpC;AAAA;AAAA,EAEA,gBAAgB,MAAM;AAClB,UAAM,WAAW,CAAC;AAClB,QAAI,gBAAgB;AACpB,WAAO,cAAc,QAAQ;AACzB,eAAS,KAAK,cAAc,OAAO,SAAS,QAAQ,aAAa,CAAC;AAClE,sBAAgB,cAAc;AAAA,IAClC;AACA,WAAO,SAAS,QAAQ;AAAA,EAC5B;AAAA,EACA,sBAAsB,UAAU;AAC5B,QAAI,SAAS,WAAW,GAAG;AACvB,aAAO;AAAA,IACX,WACS,SAAS,WAAW,GAAG;AAC5B,aAAO,CAAC;AAAA,IACZ,OACK;AACD,aAAO,MAAM,QAAQ,EAAE,CAAC;AAAA,IAC5B;AAAA,EACJ;AAAA,EACA,qBAAqB,UAAU;AAC3B,UAAM,OAAO,KAAK,YAAY,QAAQ;AACtC,QAAI,KAAK,SAAS,WAAW,GAAG;AAC5B,aAAO;AAAA,IACX;AACA,WAAO,KAAK,SAAS,CAAC,EAAE;AAAA,EAC5B;AACJ;;;AChgBA,OAAO;AAEP,IAAM,8BAAN,cAA0C,wBAAwB;AAAA,EAC9D,YAAY,MAAM;AACd,UAAM,KAAK,SAAS,IAAI,UAAQ,KAAK,OAAO,CAAC;AAC7C,SAAK,OAAO;AAAA,EAChB;AACJ;AACA,SAAS,sBAAsB,MAAM;AACjC,MAAI,gBAAgB,yBAAyB;AACzC,WAAO,IAAI,4BAA4B,IAAI;AAAA,EAC/C;AACA,SAAO;AACX;AACA,IAAM,0BAAN,MAA8B;AAAA,EAC1B,YAAY,eAAe,KAAK;AAC5B,SAAK,gBAAgB;AACrB,SAAK,MAAM;AACX,SAAK,uBAAuB,WAAW;AACvC,SAAK,cAAc,IAAI,gBAAgB;AAAA,EAC3C;AAAA,EACA,WAAW,MAAM;AACb,WAAO,KAAK,IAAI,WAAW,KAAK,OAAO;AAAA,EAC3C;AAAA,EACA,aAAa,OAAO,eAAe;AAC/B,QAAI,KAAK,IAAI,cAAc;AACvB,aAAO,KAAK,IAAI,aAAa,MAAM,IAAI,UAAQ,KAAK,OAAO,GAAG,aAAa;AAAA,IAC/E;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY,MAAM,eAAe;AAC7B,QAAI,IAAI;AACR,KAAC,MAAM,KAAK,KAAK,KAAK,iBAAiB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,sBAAsB,IAAI,GAAG,aAAa;AAAA,EAClI;AAAA,EACA,WAAW,MAAM,YAAY,aAAa,eAAe,MAAM,MAAM;AACjE,UAAM,SAAS,KAAK,IAAI,WAAW,sBAAsB,IAAI,GAAG,cAAc,WAAW,SAAS,aAAa,aAAa;AAC5H,UAAM,0BAA0B,KAAK,mBAAmB;AACxD,QAAI,yBAAyB;AACzB,WAAK,qBAAqB,QAAQ;AAClC,WAAK,iBAAiB;AAAA,IAC1B;AACA,QAAI,OAAO,eAAe,aAAa;AACnC,aAAO;AAAA,IACX;AACA,QAAI,2BAA2B,OAAO,WAAW,aAAa,OAAO,YAAY;AAC7E,WAAK,uBAAuB,kBAAkB,MAAM;AAChD,cAAMC,SAAQ,KAAK,cAAc;AACjC,cAAMC,OAAMD,OAAM,gBAAgB,UAAU;AAC5C,YAAIA,OAAM,YAAYC,IAAG,GAAG;AACxB,UAAAD,OAAM,aAAaC,MAAK,KAAK;AAAA,QACjC;AACA,aAAK,iBAAiB;AAAA,MAC1B,GAAG,KAAK,KAAK,WAAW;AAAA,IAC5B;AACA,QAAI,OAAO,WAAW,aAAa,CAAC,OAAO,UAAU,OAAO,OAAO,WAAW,eAAe,OAAO,UAAU;AAC1G,UAAI,CAAC,KAAK;AACN,cAAM,SAAS,OAAO,WAAW,YAAY,SAAS,OAAO;AAC7D,cAAM,SAAS,OAAO,WAAW,YAAY,SAAY,OAAO;AAChE,eAAO,EAAE,QAAQ,QAAQ,UAAU,CAAC,WAAW,EAAE;AAAA,MACrD;AACA,aAAO;AAAA,IACX;AACA,QAAI,OAAO,WAAW,GAA+B;AACjD,YAAMD,SAAQ,KAAK,cAAc;AACjC,YAAMC,OAAMD,OAAM,gBAAgB,UAAU;AAC5C,YAAM,YAAYA,OAAM,sBAAsBC,IAAG;AACjD,YAAM,aAAaD,OAAM,QAAQ,SAAS;AAC1C,YAAM,cAAc,aAAaA,OAAM,aAAa,SAAS;AAC7D,aAAO,KAAK,WAAW,MAAM,YAAY,aAAa,eAAe,KAAK;AAAA,IAC9E;AACA,UAAM,QAAQ,KAAK,cAAc;AACjC,UAAM,MAAM,MAAM,gBAAgB,UAAU;AAC5C,UAAM,QAAQ,MAAM,aAAa,GAAG;AACpC,UAAM,SAAS,MAAM,mBAAmB,GAAG;AAC3C,WAAO,EAAE,GAAG,QAAQ,UAAU,MAAM,OAAO,QAAQ,MAAM,EAAE;AAAA,EAC/D;AAAA,EACA,KAAK,MAAM,YAAY,aAAa,eAAe;AAC/C,SAAK,qBAAqB,QAAQ;AAClC,SAAK,iBAAiB;AACtB,SAAK,IAAI,KAAK,sBAAsB,IAAI,GAAG,cAAc,WAAW,SAAS,aAAa,aAAa;AAAA,EAC3G;AAAA,EACA,UAAU,eAAe;AACrB,QAAI,IAAI;AACR,KAAC,MAAM,KAAK,KAAK,KAAK,eAAe,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,aAAa;AAAA,EACnG;AAAA,EACA,UAAU;AACN,SAAK,YAAY,QAAQ;AACzB,SAAK,IAAI,QAAQ;AAAA,EACrB;AACJ;AACA,SAAS,cAAc,eAAe,SAAS;AAC3C,SAAO,WAAW;AAAA,IACd,GAAG;AAAA,IACH,kBAAkB,QAAQ,oBAAoB;AAAA,MAC1C,MAAM,IAAI;AACN,eAAO,QAAQ,iBAAiB,MAAM,GAAG,OAAO;AAAA,MACpD;AAAA,IACJ;AAAA,IACA,KAAK,QAAQ,OAAO,IAAI,wBAAwB,eAAe,QAAQ,GAAG;AAAA,IAC1E,6BAA6B,QAAQ,+BAA+B;AAAA,MAChE,6BAA6B,GAAG;AAC5B,eAAO,QAAQ,4BAA4B,6BAA6B,EAAE,GAAG,GAAG,SAAS,EAAE,QAAQ,CAAC;AAAA,MACxG;AAAA,MACA,4BAA4B,GAAG;AAC3B,eAAO,QAAQ,4BAA4B,4BAA4B,EAAE,GAAG,GAAG,SAAS,EAAE,QAAQ,CAAC;AAAA,MACvG;AAAA,IACJ;AAAA,IACA,uBAAuB,QAAQ,yBAAyB;AAAA,MACpD,GAAG,QAAQ;AAAA,MACX,WAAW,MAAM;AACb,cAAM,QAAQ,cAAc;AAC5B,cAAM,MAAM,MAAM,gBAAgB,IAAI;AACtC,cAAM,YAAY,MAAM,sBAAsB,GAAG;AACjD,cAAM,aAAa,MAAM,QAAQ,SAAS;AAC1C,eAAO,WAAW;AAAA,MACtB;AAAA,MACA,YAAY,MAAM;AACd,eAAO,KAAK,oBAAoB;AAAA,MACpC;AAAA,MACA,WAAW,QAAQ,yBAAyB,QAAQ,sBAAsB,YAAY,CAAC,SAAS;AAC5F,eAAO,QAAQ,sBAAsB,UAAU,KAAK,OAAO;AAAA,MAC/D,IAAI;AAAA,MACJ,SAAS,QAAQ,yBAAyB,QAAQ,sBAAsB,UAAU,CAAC,SAAS;AACxF,eAAO,QAAQ,sBAAsB,QAAQ,KAAK,OAAO;AAAA,MAC7D,IAAI,MAAM;AAAA,MACV,aAAa,GAAG;AACZ,eAAO,QAAQ,sBAAsB,aAAa,EAAE,OAAO;AAAA,MAC/D;AAAA,MACA,qBAAqB;AACjB,eAAO,QAAQ,sBAAsB,mBAAmB;AAAA,MAC5D;AAAA,MACA,eAAe,QAAQ,yBAAyB,QAAQ,sBAAsB,gBAAgB,MAAM,QAAQ,sBAAsB,cAAc,IAAI,MAAM;AAAA,MAC1J,cAAc,QAAQ,yBAAyB,QAAQ,sBAAsB,eAAe,CAAC,SAAS,QAAQ,sBAAsB,aAAa,KAAK,OAAO,IAAI,CAAC,SAAS;AACvK,eAAO,KAAK;AAAA,MAChB;AAAA,MACA,uBAAuB,QAAQ,sBAAsB,0BAA0B,UAAQ;AACnF,eAAO,QAAQ,sBAAsB,sBAAsB,KAAK,OAAO;AAAA,MAC3E;AAAA,IACJ;AAAA,IACA,iCAAiC,QAAQ,mCAAmC;AAAA,MACxE,GAAG,QAAQ;AAAA,MACX,2BAA2B,MAAM;AAC7B,eAAO,QAAQ,gCAAgC,2BAA2B,KAAK,OAAO;AAAA,MAC1F;AAAA,IACJ;AAAA,EACJ;AACJ;AACO,IAAM,uBAAN,MAA2B;AAAA,EAC9B,YAAY,UAAU;AAClB,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,UAAU,SAAS;AACf,WAAO,KAAK,SAAS,UAAU,QAAQ,OAAO;AAAA,EAClD;AAAA,EACA,cAAc,SAAS;AACnB,WAAO,KAAK,SAAS,cAAc,QAAQ,OAAO;AAAA,EACtD;AAAA,EACA,iBAAiB,SAAS;AACtB,WAAO,CAAC,CAAC,KAAK,SAAS,oBAAoB,KAAK,SAAS,iBAAiB,QAAQ,OAAO;AAAA,EAC7F;AAAA,EACA,iBAAiB,SAAS,QAAQ;AAC9B,QAAI,IAAI;AACR,KAAC,MAAM,KAAK,KAAK,UAAU,sBAAsB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,QAAQ,SAAS,MAAM;AAAA,EACzH;AACJ;AACO,IAAI;AAAA,CACV,SAAUE,qBAAoB;AAC3B,EAAAA,oBAAmB,MAAM,IAAI;AAC7B,EAAAA,oBAAmB,SAAS,IAAI;AAChC,EAAAA,oBAAmB,QAAQ,IAAI;AACnC,GAAG,uBAAuB,qBAAqB,CAAC,EAAE;AAClD,IAAM,kBAAN,MAAsB;AAAA,EAClB,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,YAAY,aAAa,YAAY,CAAC,GAAG;AACrC,SAAK,YAAY;AACjB,SAAK,cAAc,IAAI,gBAAgB;AACvC,SAAK,cAAc,MAAM,QAAQ,aAAa,cAAY,KAAK,YAAY,UAAU,KAAK,WAAW;AAAA,EACzG;AAAA,EACA,UAAU;AACN,SAAK,YAAY,QAAQ;AAAA,EAC7B;AACJ;AACO,IAAM,eAAN,MAAM,cAAa;AAAA,EACtB,YAAY,UAAU,eAAe,0BAA0B,aAAa,sBAAsB,UAAU,CAAC,GAAG;AAC5G,QAAI;AACJ,SAAK,WAAW;AAChB,SAAK,gBAAgB;AACrB,SAAK,cAAc;AACnB,SAAK,uBAAuB;AAC5B,SAAK,mBAAmB,oBAAI,IAAI;AAChC,SAAK,gBAAgB,oBAAI,IAAI;AAC7B,SAAK,SAAS,cAAa;AAC3B,SAAK,kCAAkC;AACvC,SAAK,2BAA2B;AAChC,SAAK,oBAAoB,oBAAI,IAAI;AACjC,SAAK,yBAAyB,WAAW;AACzC,SAAK,cAAc,IAAI,gBAAgB;AACvC,SAAK,aAAa,SAAS;AAC3B,SAAK,cAAc,OAAO;AAC1B,UAAM,IAAI,0BAA0B,OAAK,EAAE,IAAI,EAAE,KAAK,6BAA6B,MAAM,KAAK,WAAW;AACzG,KAAC,KAAK,SAAS,6BAA6B,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,UAAU,KAAK,yBAAyB,MAAM,KAAK,WAAW;AAAA,EACvJ;AAAA,EACA,cAAc,UAAU,CAAC,GAAG;AACxB,QAAI,OAAO,QAAQ,WAAW,aAAa;AACvC,YAAM,SAAS,MAAM,QAAQ,QAAQ,GAAG,EAAE;AAC1C,UAAI,WAAW,KAAK,QAAQ;AACxB,aAAK,SAAS;AACd,mBAAW,CAAC,MAAM,YAAY,KAAK,KAAK,eAAe;AACnD,eAAK,kBAAkB,MAAM,YAAY;AAAA,QAC7C;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,OAAO,QAAQ,uBAAuB,aAAa;AACnD,YAAM,2BAA2B,QAAQ,uBAAuB,mBAAmB;AACnF,UAAI,6BAA6B,KAAK,0BAA0B;AAC5D,aAAK,2BAA2B;AAChC,mBAAW,CAAC,MAAM,YAAY,KAAK,KAAK,eAAe;AACnD,eAAK,oBAAoB,MAAM,YAAY;AAAA,QAC/C;AACA,aAAK,uBAAuB,QAAQ;AACpC,YAAI,0BAA0B;AAC1B,gBAAM,cAAc,IAAI,gBAAgB;AACxC,eAAK,YAAY,YAAY,KAAK,yBAAyB,MAAM,WAAW;AAC5E,eAAK,yBAAyB;AAC9B,eAAK,wBAAwB,KAAK,YAAY,QAAQ;AAAA,QAC1D;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,OAAO,QAAQ,oCAAoC,aAAa;AAChE,WAAK,kCAAkC,QAAQ;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,eAAe,WAAW;AACtB,UAAM,KAAK,OAAO,WAAW,EAAE,gBAAgB,CAAC;AAChD,UAAM,SAAS,OAAO,IAAI,EAAE,mBAAmB,CAAC;AAChD,UAAM,UAAU,OAAO,IAAI,EAAE,oBAAoB,CAAC;AAClD,UAAM,WAAW,OAAO,IAAI,EAAE,qBAAqB,CAAC;AACpD,UAAM,eAAe,KAAK,SAAS,eAAe,QAAQ;AAC1D,WAAO,EAAE,WAAW,QAAQ,SAAS,wBAAwB,WAAW,MAAM,aAAa;AAAA,EAC/F;AAAA,EACA,cAAc,MAAM,OAAO,cAAc,QAAQ;AAC7C,SAAK,cAAc,IAAI,MAAM,YAAY;AACzC,SAAK,iBAAiB,IAAI,KAAK,SAAS,IAAI;AAC5C,SAAK,kBAAkB,MAAM,YAAY;AACzC,SAAK,SAAS,cAAc,MAAM,OAAO,aAAa,cAAc,MAAM;AAAA,EAC9E;AAAA,EACA,eAAe,MAAM,OAAO,cAAc,QAAQ;AAC9C,QAAI,IAAI;AACR,iBAAa,uBAAuB,QAAQ;AAC5C,KAAC,MAAM,KAAK,KAAK,UAAU,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,MAAM,OAAO,aAAa,cAAc,MAAM;AAC1I,QAAI,OAAO,WAAW,UAAU;AAC5B,WAAK,cAAc,OAAO,IAAI;AAC9B,WAAK,iBAAiB,OAAO,KAAK,OAAO;AAAA,IAC7C;AAAA,EACJ;AAAA,EACA,gBAAgB,cAAc;AAC1B,SAAK,SAAS,gBAAgB,aAAa,YAAY;AAAA,EAC3D;AAAA,EACA,wBAAwB,SAAS;AAC7B,UAAM,OAAO,KAAK,iBAAiB,IAAI,OAAO;AAC9C,QAAI,CAAC,MAAM;AACP;AAAA,IACJ;AACA,SAAK,4BAA4B,IAAI;AAAA,EACzC;AAAA,EACA,4BAA4B,MAAM;AAC9B,UAAM,eAAe,KAAK,cAAc,IAAI,IAAI;AAChD,QAAI,CAAC,cAAc;AACf;AAAA,IACJ;AACA,SAAK,wBAAwB,KAAK,YAAY,QAAQ;AACtD,SAAK,kBAAkB,MAAM,YAAY;AAAA,EAC7C;AAAA,EACA,kBAAkB,MAAM,cAAc;AAClC,UAAM,SAAS,cAAa,iBAAiB,KAAK,QAAQ,KAAK,KAAK;AACpE,iBAAa,QAAQ,MAAM,cAAc,GAAG,MAAM;AAClD,iBAAa,OAAO,MAAM,QAAQ,GAAG,SAAS,KAAK,SAAS,EAAE;AAC9D,QAAI,KAAK,aAAa;AAClB,mBAAa,UAAU,aAAa,iBAAiB,OAAO,CAAC,KAAK,SAAS,CAAC;AAAA,IAChF,OACK;AACD,mBAAa,UAAU,gBAAgB,eAAe;AAAA,IAC1D;AACA,iBAAa,QAAQ,UAAU,OAAO,GAAG,UAAU,iBAAiB,QAAQ,gBAAgB,CAAC;AAC7F,QAAI,kBAAkB;AACtB,QAAI,KAAK,SAAS,eAAe;AAC7B,wBAAkB,KAAK,SAAS,cAAc,KAAK,SAAS,aAAa,OAAO;AAAA,IACpF;AACA,QAAI,KAAK,gBAAgB,CAAC,KAAK,mCAAmC,KAAK,uBAAuB,IAAI;AAC9F,UAAI,CAAC,iBAAiB;AAClB,qBAAa,QAAQ,UAAU,IAAI,GAAG,UAAU,iBAAiB,QAAQ,gBAAgB,CAAC;AAAA,MAC9F;AACA,mBAAa,QAAQ,UAAU,IAAI,aAAa;AAChD,mBAAa,QAAQ,UAAU,OAAO,aAAa,KAAK,SAAS;AAAA,IACrE,OACK;AACD,mBAAa,QAAQ,UAAU,OAAO,eAAe,WAAW;AAAA,IACpE;AACA,SAAK,oBAAoB,MAAM,YAAY;AAAA,EAC/C;AAAA,EACA,oBAAoB,MAAM,cAAc;AACpC,cAAU,aAAa,MAAM;AAC7B,iBAAa,uBAAuB,QAAQ;AAC5C,QAAI,CAAC,KAAK,0BAA0B;AAChC;AAAA,IACJ;AACA,UAAM,kBAAkB,IAAI,gBAAgB;AAC5C,UAAM,QAAQ,KAAK,cAAc;AACjC,WAAO,MAAM;AACT,YAAM,MAAM,MAAM,gBAAgB,IAAI;AACtC,YAAM,YAAY,MAAM,sBAAsB,GAAG;AACjD,UAAI,CAAC,WAAW;AACZ;AAAA,MACJ;AACA,YAAM,SAAS,MAAM,QAAQ,SAAS;AACtC,YAAM,QAAQ,EAAE,iBAAiB,EAAE,OAAO,UAAU,KAAK,MAAM,KAAK,CAAC;AACrE,UAAI,KAAK,kBAAkB,IAAI,MAAM,GAAG;AACpC,cAAM,UAAU,IAAI,QAAQ;AAAA,MAChC;AACA,UAAI,aAAa,OAAO,sBAAsB,GAAG;AAC7C,qBAAa,OAAO,YAAY,KAAK;AAAA,MACzC,OACK;AACD,qBAAa,OAAO,aAAa,OAAO,aAAa,OAAO,iBAAiB;AAAA,MACjF;AACA,WAAK,qBAAqB,IAAI,QAAQ,KAAK;AAC3C,sBAAgB,IAAI,aAAa,MAAM,KAAK,qBAAqB,OAAO,QAAQ,KAAK,CAAC,CAAC;AACvF,aAAO;AAAA,IACX;AACA,iBAAa,yBAAyB;AAAA,EAC1C;AAAA,EACA,wBAAwB,OAAO;AAC3B,QAAI,CAAC,KAAK,0BAA0B;AAChC;AAAA,IACJ;AACA,UAAM,MAAM,oBAAI,IAAI;AACpB,UAAM,QAAQ,KAAK,cAAc;AACjC,UAAM,QAAQ,UAAQ;AAClB,YAAM,MAAM,MAAM,gBAAgB,IAAI;AACtC,UAAI;AACA,cAAM,YAAY,MAAM,sBAAsB,GAAG;AACjD,YAAI,KAAK,eAAe,KAAK,SAAS,SAAS,KAAK,CAAC,KAAK,WAAW;AACjE,cAAI,IAAI,IAAI;AAAA,QAChB,WACS,WAAW;AAChB,cAAI,IAAI,MAAM,QAAQ,SAAS,CAAC;AAAA,QACpC;AAAA,MACJ,SACO,IAAI;AAAA,MAEX;AAAA,IACJ,CAAC;AACD,SAAK,kBAAkB,QAAQ,UAAQ;AACnC,UAAI,CAAC,IAAI,IAAI,IAAI,GAAG;AAChB,aAAK,qBAAqB,QAAQ,MAAM,UAAQ,KAAK,UAAU,OAAO,QAAQ,CAAC;AAAA,MACnF;AAAA,IACJ,CAAC;AACD,QAAI,QAAQ,UAAQ;AAChB,UAAI,CAAC,KAAK,kBAAkB,IAAI,IAAI,GAAG;AACnC,aAAK,qBAAqB,QAAQ,MAAM,UAAQ,KAAK,UAAU,IAAI,QAAQ,CAAC;AAAA,MAChF;AAAA,IACJ,CAAC;AACD,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,UAAU;AACN,SAAK,cAAc,MAAM;AACzB,SAAK,iBAAiB,MAAM;AAC5B,SAAK,uBAAuB,QAAQ;AACpC,YAAQ,KAAK,WAAW;AAAA,EAC5B;AACJ;AACA,aAAa,gBAAgB;AAC7B,IAAM,aAAN,MAAiB;AAAA,EACb,IAAI,aAAa;AAAE,WAAO,KAAK;AAAA,EAAa;AAAA,EAC5C,IAAI,aAAa;AAAE,WAAO,KAAK;AAAA,EAAa;AAAA,EAC5C,YAAY,MAAM,iCAAiC,SAAS;AACxD,SAAK,OAAO;AACZ,SAAK,kCAAkC;AACvC,SAAK,UAAU;AACf,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,oBAAoB;AACzB,SAAK,cAAc,IAAI,gBAAgB;AACvC,SAAK,eAAe,KAAK,OAAO,MAAM,KAAK,WAAW;AAAA,EAC1D;AAAA,EACA,OAAO,SAAS,kBAAkB;AAC9B,QAAI,aAAa;AACjB,QAAI,KAAK,SAAS;AACd,YAAM,SAAS,KAAK,QAAQ,OAAO,SAAS,gBAAgB;AAC5D,UAAI,OAAO,WAAW,WAAW;AAC7B,qBAAa,SAAS,IAAiC;AAAA,MAC3D,WACS,eAAe,MAAM,GAAG;AAC7B,qBAAa,gBAAgB,OAAO,UAAU;AAAA,MAClD,OACK;AACD,qBAAa;AAAA,MACjB;AACA,UAAI,eAAe,GAA+B;AAC9C,eAAO;AAAA,MACX;AAAA,IACJ;AACA,SAAK;AACL,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK;AACL,aAAO,EAAE,MAAM,WAAW,SAAS,WAAW;AAAA,IAClD;AACA,UAAM,QAAQ,KAAK,gCAAgC,2BAA2B,OAAO;AACrF,UAAM,SAAS,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AACpD,eAAW,KAAK,QAAQ;AACpB,YAAM,WAAW,KAAK,EAAE,SAAS;AACjC,UAAI,OAAO,aAAa,aAAa;AACjC,eAAO,EAAE,MAAM,WAAW,SAAS,WAAW;AAAA,MAClD;AACA,UAAI;AACJ,UAAI,KAAK,KAAK,kBAAkB,kBAAkB,YAAY;AAC1D,cAAM,QAAQ,SAAS,YAAY,EAAE,QAAQ,KAAK,iBAAiB;AACnE,YAAI,QAAQ,IAAI;AACZ,kBAAQ,CAAC,OAAO,kBAAkB,CAAC;AACnC,mBAAS,IAAI,KAAK,kBAAkB,QAAQ,IAAI,GAAG,KAAK;AACpD,kBAAM,KAAK,QAAQ,IAAI,CAAC;AAAA,UAC5B;AAAA,QACJ;AAAA,MACJ,OACK;AACD,gBAAQ,WAAW,KAAK,UAAU,KAAK,mBAAmB,GAAG,UAAU,SAAS,YAAY,GAAG,GAAG,EAAE,qBAAqB,MAAM,gBAAgB,KAAK,CAAC;AAAA,MACzJ;AACA,UAAI,OAAO;AACP,aAAK;AACL,eAAO,OAAO,WAAW,IACrB,EAAE,MAAM,OAAO,WAAW,IAC1B,EAAE,MAAM,EAAE,OAAO,UAAU,MAAa,GAAG,WAAW;AAAA,MAC9D;AAAA,IACJ;AACA,QAAI,KAAK,KAAK,aAAa,aAAa,QAAQ;AAC5C,UAAI,OAAO,KAAK,KAAK,QAAQ,0BAA0B,UAAU;AAC7D,eAAO,KAAK,KAAK,QAAQ;AAAA,MAC7B,WACS,KAAK,KAAK,QAAQ,uBAAuB;AAC9C,eAAO,KAAK,KAAK,QAAQ,sBAAsB,OAAO;AAAA,MAC1D,OACK;AACD,eAAO;AAAA,MACX;AAAA,IACJ,OACK;AACD,aAAO,EAAE,MAAM,WAAW,SAAS,WAAW;AAAA,IAClD;AAAA,EACJ;AAAA,EACA,QAAQ;AACJ,SAAK,cAAc;AACnB,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,UAAU;AACN,YAAQ,KAAK,WAAW;AAAA,EAC5B;AACJ;AAmCO,IAAI;AAAA,CACV,SAAUC,eAAc;AACrB,EAAAA,cAAaA,cAAa,WAAW,IAAI,CAAC,IAAI;AAC9C,EAAAA,cAAaA,cAAa,QAAQ,IAAI,CAAC,IAAI;AAC/C,GAAG,iBAAiB,eAAe,CAAC,EAAE;AAC/B,IAAI;AAAA,CACV,SAAUC,oBAAmB;AAC1B,EAAAA,mBAAkBA,mBAAkB,OAAO,IAAI,CAAC,IAAI;AACpD,EAAAA,mBAAkBA,mBAAkB,YAAY,IAAI,CAAC,IAAI;AAC7D,GAAG,sBAAsB,oBAAoB,CAAC,EAAE;AAuKhD,IAAM,iBAAN,MAAqB;AAAA,EACjB,IAAI,UAAU;AAAE,WAAO,KAAK;AAAA,EAAU;AAAA,EACtC,IAAI,OAAO;AAAE,WAAO,KAAK;AAAA,EAAO;AAAA,EAChC,IAAI,KAAK,MAAM;AACX,QAAI,SAAS,KAAK,OAAO;AACrB;AAAA,IACJ;AACA,SAAK,QAAQ;AACb,QAAI,KAAK,QAAQ;AACb,WAAK,OAAO,OAAO,KAAK;AAAA,IAC5B;AACA,SAAK,KAAK,SAAS;AACnB,SAAK,OAAO;AACZ,SAAK,iBAAiB,KAAK,IAAI;AAAA,EACnC;AAAA,EACA,IAAI,YAAY;AAAE,WAAO,KAAK;AAAA,EAAY;AAAA,EAC1C,IAAI,UAAU,WAAW;AACrB,QAAI,cAAc,KAAK,YAAY;AAC/B;AAAA,IACJ;AACA,SAAK,aAAa;AAClB,QAAI,KAAK,QAAQ;AACb,WAAK,OAAO,YAAY,KAAK;AAAA,IACjC;AACA,SAAK,KAAK,SAAS;AACnB,SAAK,OAAO;AACZ,SAAK,sBAAsB,KAAK,SAAS;AAAA,EAC7C;AAAA,EACA,YAAY,MAAM,OAAO,MAAM,QAAQ,qBAAqB,UAAU,CAAC,GAAG;AACtE,QAAI,IAAI;AACR,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,sBAAsB;AAC3B,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,mBAAmB,IAAI,QAAQ;AACpC,SAAK,kBAAkB,KAAK,iBAAiB;AAC7C,SAAK,wBAAwB,IAAI,QAAQ;AACzC,SAAK,uBAAuB,KAAK,sBAAsB;AACvD,SAAK,sBAAsB,IAAI,QAAQ;AACvC,SAAK,wBAAwB,IAAI,QAAQ;AACzC,SAAK,uBAAuB,KAAK,sBAAsB;AACvD,SAAK,qBAAqB,IAAI,gBAAgB;AAC9C,SAAK,cAAc,IAAI,gBAAgB;AACvC,SAAK,SAAS,KAAK,KAAK,QAAQ,qBAAqB,QAAQ,OAAO,SAAS,KAAK,aAAa;AAC/F,SAAK,cAAc,KAAK,KAAK,QAAQ,0BAA0B,QAAQ,OAAO,SAAS,KAAK,kBAAkB;AAC9G,UAAM,YAAY,KAAK,kBAAkB,MAAM,KAAK,WAAW;AAAA,EACnE;AAAA,EACA,cAAc,gBAAgB,CAAC,GAAG;AAC9B,QAAI,cAAc,oBAAoB,QAAW;AAC7C,WAAK,OAAO,cAAc;AAAA,IAC9B;AACA,QAAI,cAAc,yBAAyB,QAAW;AAClD,WAAK,YAAY,cAAc;AAAA,IACnC;AAAA,EACJ;AAAA,EACA,mBAAmB;AACf,QAAI,CAAC,KAAK,UAAU,KAAK,QAAQ,WAAW,GAAG;AAC3C;AAAA,IACJ;AACA,SAAK,KAAK,SAAS;AACnB,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,SAAS;AACL,QAAI,IAAI,IAAI,IAAI;AAChB,UAAM,YAAY,KAAK,OAAO,aAAa,KAAK,KAAK,OAAO,eAAe;AAC3E,QAAI,KAAK,WAAW,WAAW;AAC3B,WAAK,KAAK,KAAK,KAAK,QAAQ,yBAAyB,QAAQ,OAAO,SAAS,KAAK,MAAM;AACpF,SAAC,KAAK,KAAK,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,YAAY,EAAE,MAAM,GAA6B,SAAS,SAAS,aAAa,oBAAoB,EAAE,CAAC;AAAA,MACtK,OACK;AACD,SAAC,KAAK,KAAK,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,YAAY;AAAA,UAAE,MAAM;AAAA;AAAA,QAA4B,CAAC;AAAA,MAChH;AAAA,IACJ,OACK;AACD,OAAC,KAAK,KAAK,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,aAAa;AAAA,IAC5E;AAAA,EACJ;AAAA,EACA,iBAAiB,MAAM;AACnB,QAAI,CAAC,KAAK,UAAU,CAAC,KAAK,WAAW,KAAK,UAAU,aAAa,QAAQ;AACrE,aAAO;AAAA,IACX;AACA,QAAI,KAAK,OAAO,aAAa,KAAK,KAAK,OAAO,cAAc,GAAG;AAC3D,aAAO;AAAA,IACX;AACA,WAAO,CAAC,WAAW,UAAU,KAAK,UAAU;AAAA,EAChD;AAAA,EACA,OAAO,OAAO;AACV,QAAI;AACJ,SAAK,QAAQ;AACb,KAAC,KAAK,KAAK,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,OAAO,KAAK;AAAA,EAC3E;AAAA,EACA,UAAU;AACN,SAAK,WAAW;AAChB,SAAK,oBAAoB,QAAQ;AACjC,SAAK,mBAAmB,QAAQ;AAChC,SAAK,YAAY,QAAQ;AAAA,EAC7B;AACJ;AACA,SAAS,uBAAuB,OAAO,OAAO;AAC1C,SAAO,MAAM,aAAa,MAAM,YAC5B,MAAM,KAAK,YAAY,MAAM,KAAK,WAClC,MAAM,eAAe,MAAM,cAC3B,MAAM,WAAW,MAAM,UACvB,MAAM,aAAa,MAAM;AACjC;AACA,IAAM,oBAAN,cAAgC,WAAW;AAAA,EACvC,YAAY,cAAc,CAAC,GAAG;AAC1B,UAAM;AACN,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,IAAI,QAAQ;AAAE,WAAO,KAAK,YAAY;AAAA,EAAQ;AAAA,EAC9C,MAAM,OAAO;AACT,WAAO,OAAO,KAAK,aAAa,MAAM,aAAa,sBAAsB;AAAA,EAC7E;AAAA,EACA,cAAc,YAAY;AACtB,SAAK,UAAU,UAAU;AAAA,EAC7B;AACJ;AACA,IAAM,yBAAN,cAAqC,WAAW;AAAA,EAC5C,IAAI,mBAAmB;AACnB,UAAM,QAAQ,KAAK,KAAK;AACxB,QAAI,QAAQ,KAAK,SAAS,KAAK,KAAK,QAAQ;AACxC,aAAO;AAAA,IACX;AACA,WAAO,KAAK,KAAK,QAAQ,KAAK;AAAA,EAClC;AAAA,EACA,YAAY,MAAM,OAAO,MAAM,WAAW,cAAc,UAAU,CAAC,GAAG;AAClE,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,eAAe;AACpB,SAAK,qBAAqB;AAC1B,UAAM,sBAAsB,KAAK,uBAAuB,OAAO;AAC/D,SAAK,2BAA2B,oBAAoB;AACpD,SAAK,UAAU,KAAK,UAAU,IAAI,mBAAmB,KAAK,qBAAqB,GAAG,MAAM,OAAO,WAAW,YAAY,CAAC;AACvH,SAAK,UAAU,KAAK,YAAY,MAAM,KAAK,OAAO,CAAC,CAAC;AACpD,SAAK,UAAU,KAAK,yBAAyB,MAAM,KAAK,OAAO,CAAC,CAAC;AACjE,SAAK,UAAU,KAAK,yBAAyB,MAAM,KAAK,OAAO,CAAC,CAAC;AACjE,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,SAAS;AACL,UAAM,mBAAmB,KAAK;AAE9B,QAAI,CAAC,oBAAoB,KAAK,KAAK,cAAc,GAAG;AAChD,WAAK,QAAQ,SAAS,MAAS;AAC/B;AAAA,IACJ;AACA,UAAM,cAAc,KAAK,gBAAgB,gBAAgB;AACzD,SAAK,QAAQ,SAAS,WAAW;AAAA,EACrC;AAAA,EACA,gBAAgB,kBAAkB;AAC9B,UAAM,cAAc,CAAC;AACrB,UAAM,4BAA4B,KAAK,KAAK,eAAe,KAAK;AAChE,QAAI,8BAA8B;AAClC,QAAI,oBAAoB;AACxB,QAAI,iBAAiB,KAAK,kBAAkB,6BAA6B,QAAW,iBAAiB;AACrG,WAAO,kBAAkB,oBAAoB,eAAe,SAAS,2BAA2B;AAC5F,kBAAY,KAAK,cAAc;AAC/B,2BAAqB,eAAe;AACpC,UAAI,YAAY,UAAU,KAAK,0BAA0B;AACrD;AAAA,MACJ;AACA,oCAA8B,KAAK,mBAAmB,2BAA2B;AACjF,UAAI,CAAC,6BAA6B;AAC9B;AAAA,MACJ;AACA,uBAAiB,KAAK,kBAAkB,6BAA6B,eAAe,MAAM,iBAAiB;AAAA,IAC/G;AACA,WAAO,YAAY,SAAS,IAAI,kBAAkB,WAAW,IAAI;AAAA,EACrE;AAAA,EACA,mBAAmB,MAAM;AACrB,UAAM,YAAY,KAAK,aAAa,IAAI;AACxC,QAAI,cAAc,MAAM,cAAc,KAAK,KAAK,SAAS,GAAG;AACxD,aAAO;AAAA,IACX;AACA,UAAM,WAAW,KAAK,KAAK,QAAQ,YAAY,CAAC;AAChD,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB,6BAA6B,oBAAoB,mBAAmB;AAClF,UAAM,iBAAiB,KAAK,yBAAyB,6BAA6B,kBAAkB;AACpG,QAAI,CAAC,gBAAgB;AACjB,aAAO;AAAA,IACX;AACA,QAAI,mBAAmB,6BAA6B;AAChD,UAAI,CAAC,KAAK,wBAAwB,2BAA2B,GAAG;AAC5D,eAAO;AAAA,MACX;AACA,UAAI,KAAK,mCAAmC,6BAA6B,iBAAiB,GAAG;AACzF,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,KAAK,uBAAuB,gBAAgB,iBAAiB;AAAA,EACxE;AAAA,EACA,mCAAmC,MAAM,mBAAmB;AACxD,UAAM,YAAY,KAAK,aAAa,IAAI;AACxC,UAAM,aAAa,KAAK,KAAK,cAAc,SAAS;AACpD,UAAM,iBAAiB;AACvB,WAAO,KAAK,KAAK,cAAc,aAAa;AAAA,EAChD;AAAA,EACA,uBAAuB,MAAM,0BAA0B;AACnD,UAAM,SAAS,KAAK,aAAa,UAAU,IAAI;AAC/C,UAAM,EAAE,YAAY,SAAS,IAAI,KAAK,aAAa,IAAI;AACvD,UAAM,WAAW,KAAK,4BAA4B,UAAU,wBAAwB;AACpF,WAAO,EAAE,MAAM,UAAU,QAAQ,YAAY,SAAS;AAAA,EAC1D;AAAA,EACA,yBAAyB,MAAM,mBAAmB,QAAW;AACzD,QAAI,kBAAkB;AACtB,QAAI,0BAA0B,KAAK,cAAc,eAAe;AAChE,WAAO,yBAAyB;AAC5B,UAAI,4BAA4B,kBAAkB;AAC9C,eAAO;AAAA,MACX;AACA,wBAAkB;AAClB,gCAA0B,KAAK,cAAc,eAAe;AAAA,IAChE;AACA,QAAI,qBAAqB,QAAW;AAChC,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,4BAA4B,qBAAqB,sBAAsB;AACnE,QAAI,uBAAuB,KAAK,KAAK,eAAe,mBAAmB;AAGvE,QAAI,yBAAyB,QAAQ,KAAK,KAAK,sBAAsB,uBAAuB,sBAAsB,IAAI,KAAK,KAAK,QAAQ;AACpI,YAAM,aAAa,KAAK,aAAa,UAAU,KAAK,KAAK,QAAQ,mBAAmB,CAAC;AACrF,YAAM,sBAAsB,KAAK,KAAK,eAAe,sBAAsB,CAAC;AAC5E,6BAAuB,sBAAsB,sBAAsB,aAAa,KAAK,KAAK,eAAe;AAAA,IAC7G;AACA,QAAI,yBAAyB,MAAM;AAC/B,aAAO;AAAA,IACX;AACA,UAAM,gBAAgB,KAAK,KAAK,QAAQ,mBAAmB;AAC3D,UAAM,kBAAkB,KAAK,aAAa,UAAU,aAAa;AACjE,UAAM,iBAAiB,uBAAuB,KAAK,KAAK;AACxD,UAAM,oBAAoB,iBAAiB;AAC3C,QAAI,uBAAuB,kBAAkB,wBAAwB,mBAAmB;AACpF,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,MAAM;AAChB,UAAM,eAAe,KAAK,MAAM,gBAAgB,IAAI;AACpD,UAAM,iBAAiB,KAAK,MAAM,sBAAsB,YAAY;AACpE,WAAO,iBAAiB,KAAK,MAAM,QAAQ,cAAc,IAAI;AAAA,EACjE;AAAA,EACA,wBAAwB,MAAM;AAC1B,UAAM,eAAe,KAAK,MAAM,gBAAgB,IAAI;AACpD,WAAO,KAAK,MAAM,mBAAmB,YAAY,IAAI;AAAA,EACzD;AAAA,EACA,aAAa,MAAM,cAAc;AAC7B,QAAI,iBAAiB,QAAW;AAC5B,qBAAe,KAAK,MAAM,gBAAgB,IAAI;AAAA,IAClD;AACA,UAAM,YAAY,KAAK,MAAM,aAAa,YAAY;AACtD,WAAO;AAAA,EACX;AAAA,EACA,aAAa,MAAM;AACf,UAAM,eAAe,KAAK,MAAM,gBAAgB,IAAI;AACpD,UAAM,aAAa,KAAK,MAAM,aAAa,YAAY;AACvD,QAAI,aAAa,GAAG;AAChB,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AACA,UAAM,cAAc,KAAK,MAAM,mBAAmB,YAAY;AAC9D,UAAM,WAAW,aAAa,cAAc;AAC5C,WAAO,EAAE,YAAY,SAAS;AAAA,EAClC;AAAA,EACA,2BAA2B,MAAM;AAC7B,UAAM,YAAY,CAAC;AACnB,QAAI,kBAAkB,KAAK,cAAc,IAAI;AAC7C,WAAO,iBAAiB;AACpB,gBAAU,KAAK,eAAe;AAC9B,wBAAkB,KAAK,cAAc,eAAe;AAAA,IACxD;AACA,QAAI,eAAe;AACnB,aAAS,IAAI,GAAG,IAAI,UAAU,UAAU,IAAI,KAAK,0BAA0B,KAAK;AAC5E,sBAAgB,KAAK,aAAa,UAAU,UAAU,CAAC,CAAC;AAAA,IAC5D;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,gBAAgB,CAAC,GAAG;AAC9B,UAAM,mBAAmB,KAAK,uBAAuB,aAAa;AAClE,QAAI,KAAK,6BAA6B,iBAAiB,0BAA0B;AAC7E,WAAK,2BAA2B,iBAAiB;AACjD,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,uBAAuB,SAAS;AAC5B,QAAI,2BAA2B;AAC/B,QAAI,OAAO,QAAQ,6BAA6B,UAAU;AACtD,iCAA2B,KAAK,IAAI,QAAQ,0BAA0B,CAAC;AAAA,IAC3E;AACA,WAAO,EAAE,yBAAyB;AAAA,EACtC;AACJ;AACA,IAAM,qBAAN,MAAyB;AAAA,EACrB,YAAY,WAAW,MAAM,OAAO,eAAe,cAAc;AAC7D,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,SAAK,eAAe;AACpB,SAAK,eAAe,SAAS,cAAc,KAAK;AAChD,SAAK,aAAa,UAAU,IAAI,8BAA8B;AAC9D,cAAU,YAAY,KAAK,YAAY;AAAA,EAC3C;AAAA,EACA,SAAS,OAAO;AACZ,QAAI;AACJ,UAAM,aAAa,CAAC,CAAC,KAAK,kBAAkB,KAAK,eAAe,QAAQ;AACxE,UAAM,YAAY,CAAC,CAAC,SAAS,MAAM,QAAQ;AAE3C,QAAK,CAAC,cAAc,CAAC,aAAe,cAAc,aAAa,KAAK,eAAe,MAAM,KAAK,GAAI;AAC9F;AAAA,IACJ;AAEA,QAAI,eAAe,WAAW;AAC1B,WAAK,WAAW,SAAS;AAAA,IAC7B;AAEA,KAAC,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ;AAC3E,SAAK,iBAAiB;AACtB,QAAI,CAAC,WAAW;AACZ;AAAA,IACJ;AACA,aAAS,cAAc,MAAM,QAAQ,GAAG,eAAe,GAAG,eAAe;AACrE,YAAM,aAAa,MAAM,YAAY,WAAW;AAChD,YAAM,qBAAqB,cAAc,MAAM,YAAY,cAAc,CAAC,IAAI;AAC9E,YAAM,sBAAsB,qBAAqB,mBAAmB,WAAW,mBAAmB,SAAS;AAC3G,YAAM,EAAE,SAAS,WAAW,IAAI,KAAK,cAAc,YAAY,mBAAmB;AAClF,WAAK,aAAa,YAAY,OAAO;AACrC,YAAM,cAAc,UAAU;AAAA,IAClC;AAEA,UAAM,SAAS,EAAE,sCAAsC;AACvD,SAAK,aAAa,YAAY,MAAM;AACpC,UAAM,cAAc,aAAa,MAAM,OAAO,OAAO,CAAC,CAAC;AAEvD,UAAM,iBAAiB,MAAM,YAAY,MAAM,QAAQ,CAAC;AACxD,SAAK,aAAa,MAAM,SAAS,GAAG,eAAe,WAAW,eAAe,MAAM;AAAA,EACvF;AAAA,EACA,cAAc,YAAY,qBAAqB;AAC3C,UAAM,eAAe,KAAK,MAAM,gBAAgB,WAAW,IAAI;AAC/D,UAAM,YAAY,KAAK,MAAM,aAAa,YAAY;AAEtD,UAAM,gBAAgB,SAAS,cAAc,KAAK;AAClD,kBAAc,MAAM,MAAM,GAAG,WAAW,QAAQ;AAChD,kBAAc,MAAM,SAAS,GAAG,WAAW,MAAM;AACjD,kBAAc,MAAM,aAAa,GAAG,WAAW,MAAM;AACrD,kBAAc,UAAU,IAAI,wBAAwB;AACpD,kBAAc,UAAU,IAAI,iBAAiB;AAC7C,kBAAc,aAAa,cAAc,GAAG,SAAS,EAAE;AACvD,kBAAc,aAAa,eAAe,YAAY,MAAM,IAAI,SAAS,KAAK;AAC9E,kBAAc,aAAa,MAAM,KAAK,KAAK,aAAa,SAAS,CAAC;AAElE,UAAM,iBAAiB,KAAK,aAAa,cAAc,WAAW,IAAI;AACtE,UAAM,WAAW,KAAK,cAAc,KAAK,CAACC,cAAaA,UAAS,eAAe,cAAc;AAC7F,QAAI,CAAC,UAAU;AACX,YAAM,IAAI,MAAM,qCAAqC,cAAc,EAAE;AAAA,IACzE;AACA,UAAM,WAAW,IAAI,MAAM,WAAW,MAAM,CAAC,CAAC;AAE9C,UAAM,eAAe,SAAS,eAAe,aAAa;AAC1D,aAAS,cAAc,UAAU,WAAW,YAAY,cAAc,WAAW,MAAM;AAEvF,UAAM,aAAa,aAAa,MAAM;AAClC,eAAS,eAAe,UAAU,WAAW,YAAY,cAAc,WAAW,MAAM;AACxF,eAAS,gBAAgB,YAAY;AACrC,oBAAc,OAAO;AAAA,IACzB,CAAC;AACD,WAAO,EAAE,SAAS,eAAe,WAAW;AAAA,EAChD;AAAA,EACA,WAAW,SAAS;AAChB,SAAK,aAAa,MAAM,UAAU,UAAU,UAAU;AAAA,EAC1D;AAAA,EACA,UAAU;AACN,QAAI;AACJ,KAAC,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ;AAC3E,SAAK,aAAa,OAAO;AAAA,EAC7B;AACJ;AACA,SAAS,iBAAiB,OAAO;AAC7B,MAAI,SAAS,qBAAqB;AAClC,MAAI,mBAAmB,MAAM,aAAa,QAAQ,qBAAqB,eAAe,GAAG;AACrF,aAAS,qBAAqB;AAAA,EAClC,WACS,mBAAmB,MAAM,aAAa,QAAQ,sBAAsB,eAAe,GAAG;AAC3F,aAAS,qBAAqB;AAAA,EAClC,WACS,mBAAmB,MAAM,aAAa,QAAQ,2BAA2B,aAAa,GAAG;AAC9F,aAAS,qBAAqB;AAAA,EAClC;AACA,SAAO;AAAA,IACH,cAAc,MAAM;AAAA,IACpB,SAAS,MAAM,UAAU,MAAM,QAAQ,UAAU;AAAA,IACjD;AAAA,EACJ;AACJ;AACA,SAAS,IAAI,MAAM,IAAI;AACnB,KAAG,IAAI;AACP,OAAK,SAAS,QAAQ,WAAS,IAAI,OAAO,EAAE,CAAC;AACjD;AAKA,IAAM,QAAN,MAAY;AAAA,EACR,IAAI,UAAU;AACV,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,WAAW,KAAK,cAAc;AAAA,IACvC;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,YAAY,8BAA8B,kBAAkB;AACxD,SAAK,+BAA+B;AACpC,SAAK,mBAAmB;AACxB,SAAK,QAAQ,CAAC;AACd,SAAK,eAAe,IAAI,QAAQ;AAChC,SAAK,cAAc,KAAK,aAAa;AAAA,EACzC;AAAA,EACA,IAAI,OAAO,cAAc;AACrB,QAAI,EAAE,iBAAiB,QAAQ,iBAAiB,SAAS,SAAS,aAAa,iBAAiB,OAAO,KAAK,OAAO,KAAK,GAAG;AACvH;AAAA,IACJ;AACA,SAAK,KAAK,OAAO,OAAO,YAAY;AAAA,EACxC;AAAA,EACA,KAAK,OAAO,QAAQ,cAAc;AAC9B,SAAK,QAAQ,CAAC,GAAG,KAAK;AACtB,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,QAAI,CAAC,QAAQ;AACT,YAAM,OAAO;AACb,WAAK,aAAa,KAAK,EAAE,IAAI,WAAW;AAAE,eAAO,KAAK,IAAI;AAAA,MAAG,GAAG,aAAa,CAAC;AAAA,IAClF;AAAA,EACJ;AAAA,EACA,MAAM;AACF,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,WAAW,KAAK,MAAM,IAAI,UAAQ,KAAK,OAAO;AAAA,IACvD;AACA,WAAO,CAAC,GAAG,KAAK,QAAQ;AAAA,EAC5B;AAAA,EACA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,MAAM;AACN,WAAO,KAAK,QAAQ,IAAI,IAAI;AAAA,EAChC;AAAA,EACA,iBAAiB,EAAE,eAAe,aAAa,GAAG;AAC9C,QAAI,CAAC,KAAK,kBAAkB;AACxB,YAAM,MAAM,KAAK,cAAc;AAC/B,YAAM,QAAQ,CAAC,SAAS,IAAI,OAAO,IAAI;AACvC,mBAAa,QAAQ,UAAQ,IAAI,MAAM,KAAK,CAAC;AAC7C,WAAK,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC;AAC1B;AAAA,IACJ;AACA,UAAM,oBAAoB,oBAAI,IAAI;AAClC,UAAM,sBAAsB,CAAC,SAAS,kBAAkB,IAAI,KAAK,iBAAiB,MAAM,KAAK,OAAO,EAAE,SAAS,CAAC;AAChH,iBAAa,QAAQ,UAAQ,IAAI,MAAM,mBAAmB,CAAC;AAC3D,UAAM,mBAAmB,oBAAI,IAAI;AACjC,UAAM,uBAAuB,CAAC,SAAS,iBAAiB,IAAI,KAAK,iBAAiB,MAAM,KAAK,OAAO,EAAE,SAAS,GAAG,IAAI;AACtH,kBAAc,QAAQ,UAAQ,IAAI,MAAM,oBAAoB,CAAC;AAC7D,UAAM,QAAQ,CAAC;AACf,eAAW,QAAQ,KAAK,OAAO;AAC3B,YAAM,KAAK,KAAK,iBAAiB,MAAM,KAAK,OAAO,EAAE,SAAS;AAC9D,YAAM,aAAa,kBAAkB,IAAI,EAAE;AAC3C,UAAI,CAAC,YAAY;AACb,cAAM,KAAK,IAAI;AAAA,MACnB,OACK;AACD,cAAM,eAAe,iBAAiB,IAAI,EAAE;AAC5C,YAAI,gBAAgB,aAAa,SAAS;AACtC,gBAAM,KAAK,YAAY;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,KAAK,MAAM,SAAS,KAAK,MAAM,WAAW,GAAG;AAC7C,YAAM,OAAO,KAAK,6BAA6B;AAC/C,UAAI,MAAM;AACN,cAAM,KAAK,IAAI;AAAA,MACnB;AAAA,IACJ;AACA,SAAK,KAAK,OAAO,IAAI;AAAA,EACzB;AAAA,EACA,gBAAgB;AACZ,UAAM,MAAM,oBAAI,IAAI;AACpB,eAAW,QAAQ,KAAK,OAAO;AAC3B,UAAI,IAAI,IAAI;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AACJ;AACA,IAAM,8BAAN,cAA0C,gBAAgB;AAAA,EACtD,YAAY,MAAM,MAAM,sBAAsB;AAC1C,UAAM,IAAI;AACV,SAAK,OAAO;AACZ,SAAK,uBAAuB;AAAA,EAChC;AAAA,EACA,cAAc,GAAG;AACb,QAAI,SAAS,EAAE,aAAa,MAAM,KAC9B,eAAe,EAAE,aAAa,MAAM,KACpC,eAAe,EAAE,aAAa,MAAM,GAAG;AACvC;AAAA,IACJ;AACA,QAAI,EAAE,aAAa,iBAAiB;AAChC;AAAA,IACJ;AACA,UAAM,OAAO,EAAE;AACf,QAAI,CAAC,MAAM;AACP,aAAO,MAAM,cAAc,CAAC;AAAA,IAChC;AACA,QAAI,KAAK,4BAA4B,CAAC,KAAK,KAAK,6BAA6B,CAAC,GAAG;AAC7E,aAAO,MAAM,cAAc,CAAC;AAAA,IAChC;AACA,UAAM,SAAS,EAAE,aAAa;AAC9B,UAAM,YAAY,OAAO,UAAU,SAAS,mBAAmB,KACvD,OAAO,UAAU,SAAS,mBAAmB,KAAK,OAAO,UAAU,SAAS,aAAa,KAAK,EAAE,aAAa,UAAU;AAC/H,UAAM,kBAAkB,sBAAsB,EAAE,aAAa,MAAM;AACnE,QAAI,2BAA2B;AAC/B,QAAI,iBAAiB;AACjB,iCAA2B;AAAA,IAC/B,WACS,OAAO,KAAK,KAAK,6BAA6B,YAAY;AAC/D,iCAA2B,KAAK,KAAK,yBAAyB,KAAK,OAAO;AAAA,IAC9E,OACK;AACD,iCAA2B,CAAC,CAAC,KAAK,KAAK;AAAA,IAC3C;AACA,QAAI,CAAC,iBAAiB;AAClB,UAAI,4BAA4B,CAAC,aAAa,EAAE,aAAa,WAAW,GAAG;AACvE,eAAO,MAAM,cAAc,CAAC;AAAA,MAChC;AACA,UAAI,CAAC,KAAK,KAAK,uBAAuB,EAAE,aAAa,WAAW,GAAG;AAC/D,eAAO,MAAM,cAAc,CAAC;AAAA,MAChC;AAAA,IACJ,OACK;AACD,WAAK,6BAA6B,GAAG,IAAI;AAAA,IAC7C;AACA,QAAI,KAAK,gBAAgB,CAAC,mBAAmB,YAAY;AACrD,YAAM,WAAW,KAAK,KAAK,gBAAgB,IAAI;AAC/C,YAAM,YAAY,EAAE,aAAa;AACjC,WAAK,KAAK,SAAS,CAAC,QAAQ,CAAC;AAC7B,WAAK,KAAK,gBAAgB,UAAU,SAAS;AAC7C,UAAI,4BAA4B,WAAW;AAEvC,UAAE,aAAa,kBAAkB;AACjC;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,CAAC,iBAAiB;AAClB,YAAM,cAAc,CAAC;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,6BAA6B,GAAG,MAAM;AAClC,QAAI,qBAAqB,EAAE,aAAa,MAAM,KAAK,aAAa,EAAE,aAAa,MAAM,GAAG;AACpF;AAAA,IACJ;AACA,UAAM,yBAAyB,KAAK,qBAAqB;AACzD,QAAI,CAAC,wBAAwB;AACzB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AACA,UAAM,YAAY,KAAK,KAAK,QAAQ,IAAI;AACxC,UAAM,mBAAmB,KAAK,KAAK,cAAc,SAAS;AAC1D,UAAM,uBAAuB,uBAAuB,2BAA2B,IAAI;AACnF,SAAK,KAAK,YAAY,mBAAmB;AACzC,SAAK,KAAK,SAAS,CAAC,SAAS,CAAC;AAC9B,SAAK,KAAK,aAAa,CAAC,SAAS,CAAC;AAAA,EACtC;AAAA,EACA,cAAc,GAAG;AACb,UAAM,YAAY,EAAE,aAAa,OAAO,UAAU,SAAS,mBAAmB;AAC9E,QAAI,aAAa,CAAC,KAAK,KAAK,qBAAqB;AAC7C;AAAA,IACJ;AACA,QAAI,EAAE,aAAa,iBAAiB;AAChC;AAAA,IACJ;AACA,UAAM,cAAc,CAAC;AAAA,EACzB;AACJ;AAKA,IAAM,eAAN,cAA2B,KAAK;AAAA,EAC5B,YAAY,MAAM,WAAW,iBAAiB,WAAW,YAAY,gBAAgB,aAAa,SAAS;AACvG,UAAM,MAAM,WAAW,iBAAiB,WAAW,OAAO;AAC1D,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,sBAAsB,SAAS;AAC3B,WAAO,IAAI,4BAA4B,MAAM,QAAQ,MAAM,QAAQ,oBAAoB;AAAA,EAC3F;AAAA,EACA,OAAO,OAAO,aAAa,WAAW,CAAC,GAAG;AACtC,UAAM,OAAO,OAAO,aAAa,QAAQ;AACzC,QAAI,SAAS,WAAW,GAAG;AACvB;AAAA,IACJ;AACA,UAAM,kBAAkB,CAAC;AACzB,UAAM,sBAAsB,CAAC;AAC7B,QAAI;AACJ,aAAS,QAAQ,CAAC,MAAM,UAAU;AAC9B,UAAI,KAAK,WAAW,IAAI,IAAI,GAAG;AAC3B,wBAAgB,KAAK,QAAQ,KAAK;AAAA,MACtC;AACA,UAAI,KAAK,eAAe,IAAI,IAAI,GAAG;AAC/B,4BAAoB,KAAK,QAAQ,KAAK;AAAA,MAC1C;AACA,UAAI,KAAK,YAAY,IAAI,IAAI,GAAG;AAC5B,iBAAS,QAAQ;AAAA,MACrB;AAAA,IACJ,CAAC;AACD,QAAI,gBAAgB,SAAS,GAAG;AAC5B,YAAM,SAAS,SAAS,CAAC,GAAG,MAAM,SAAS,GAAG,GAAG,eAAe,CAAC,CAAC;AAAA,IACtE;AACA,QAAI,oBAAoB,SAAS,GAAG;AAChC,YAAM,aAAa,SAAS,CAAC,GAAG,MAAM,aAAa,GAAG,GAAG,mBAAmB,CAAC,CAAC;AAAA,IAClF;AACA,QAAI,OAAO,WAAW,UAAU;AAC5B,YAAM,UAAU,MAAM;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,SAAS,SAAS,cAAc,UAAU,OAAO;AAC7C,UAAM,SAAS,SAAS,YAAY;AACpC,QAAI,CAAC,SAAS;AACV,WAAK,WAAW,IAAI,QAAQ,IAAI,OAAK,KAAK,QAAQ,CAAC,CAAC,GAAG,YAAY;AAAA,IACvE;AAAA,EACJ;AAAA,EACA,aAAa,SAAS,cAAc,UAAU,OAAO;AACjD,UAAM,aAAa,SAAS,YAAY;AACxC,QAAI,CAAC,SAAS;AACV,WAAK,eAAe,IAAI,QAAQ,IAAI,OAAK,KAAK,QAAQ,CAAC,CAAC,GAAG,YAAY;AAAA,IAC3E;AAAA,EACJ;AAAA,EACA,UAAU,OAAO,UAAU,OAAO;AAC9B,UAAM,UAAU,KAAK;AACrB,QAAI,CAAC,SAAS;AACV,UAAI,OAAO,UAAU,aAAa;AAC9B,aAAK,YAAY,IAAI,CAAC,CAAC;AAAA,MAC3B,OACK;AACD,aAAK,YAAY,IAAI,CAAC,KAAK,QAAQ,KAAK,CAAC,CAAC;AAAA,MAC9C;AAAA,IACJ;AAAA,EACJ;AACJ;AACO,IAAM,eAAN,MAAmB;AAAA,EACtB,IAAI,cAAc;AAAE,WAAO,KAAK,KAAK;AAAA,EAAa;AAAA,EAClD,IAAI,mBAAmB;AAAE,WAAO,KAAK,cAAc,UAAU,KAAK,MAAM,WAAW;AAAA,EAAG;AAAA,EACtF,IAAI,uBAAuB;AAAE,WAAO,KAAK,cAAc,UAAU,KAAK,UAAU,WAAW;AAAA,EAAG;AAAA,EAC9F,IAAI,kBAAkB;AAAE,WAAO,MAAM,OAAO,MAAM,IAAI,KAAK,KAAK,iBAAiB,gBAAgB,GAAG,OAAK,EAAE,WAAW,qBAAqB,MAAM;AAAA,EAAG;AAAA,EACpJ,IAAI,YAAY;AAAE,WAAO,MAAM,IAAI,KAAK,KAAK,WAAW,gBAAgB;AAAA,EAAG;AAAA,EAC3E,IAAI,aAAa;AAAE,WAAO,KAAK,KAAK;AAAA,EAAY;AAAA,EAChD,IAAI,mBAAmB;AAAE,WAAO,MAAM,OAAO,KAAK,MAAM,WAAW;AAAA,EAAG;AAAA,EACtE,IAAI,2BAA2B;AAAE,WAAO,KAAK,MAAM;AAAA,EAA0B;AAAA,EAC7E,IAAI,WAAW;AAAE,QAAI,IAAI;AAAI,YAAQ,MAAM,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU,QAAQ,OAAO,SAAS,KAAK,aAAa;AAAA,EAAW;AAAA,EAC5K,IAAI,SAAS,UAAU;AAAE,QAAI,KAAK,gBAAgB;AAC9C,WAAK,eAAe,OAAO;AAAA,IAC/B;AAAA,EAAE;AAAA,EACF,IAAI,gBAAgB;AAAE,QAAI,IAAI;AAAI,YAAQ,MAAM,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,eAAe,QAAQ,OAAO,SAAS,KAAK,kBAAkB;AAAA,EAAO;AAAA,EACvL,IAAI,cAAc,WAAW;AAAE,QAAI,KAAK,gBAAgB;AACpD,WAAK,eAAe,YAAY;AAAA,IACpC;AAAA,EAAE;AAAA,EACF,IAAI,sBAAsB;AAAE,WAAO,OAAO,KAAK,SAAS,wBAAwB,cAAc,OAAO,KAAK,SAAS;AAAA,EAAqB;AAAA,EACxI,IAAI,2BAA2B;AAAE,WAAO,OAAO,KAAK,SAAS,6BAA6B,cAAc,OAAO,KAAK,SAAS;AAAA,EAA0B;AAAA,EACvJ,IAAI,eAAe;AAAE,WAAO,KAAK,KAAK;AAAA,EAAc;AAAA,EACpD,YAAY,OAAO,WAAW,UAAU,WAAW,WAAW,CAAC,GAAG;AAC9D,QAAI;AACJ,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,gBAAgB,IAAI,cAAc;AACvC,SAAK,2BAA2B,MAAM;AACtC,SAAK,cAAc,IAAI,gBAAgB;AACvC,SAAK,kBAAkB,IAAI,QAAQ;AACnC,SAAK,iBAAiB,KAAK,gBAAgB;AAC3C,SAAK,sBAAsB,IAAI,QAAQ;AACvC,SAAK,eAAe,IAAI,qBAAqB,QAAQ;AACrD,UAAM,gCAAgC,IAAI,MAAM;AAChD,UAAM,yBAAyB,IAAI,MAAM;AACzC,UAAM,cAAc,KAAK,YAAY,IAAI,IAAI,gBAAgB,uBAAuB,KAAK,CAAC;AAC1F,UAAM,uBAAuB,IAAI,OAAO;AACxC,SAAK,YAAY,UAAU,IAAI,OAAK,IAAI,aAAa,GAAG,MAAM,KAAK,OAAO,8BAA8B,OAAO,aAAa,sBAAsB,QAAQ,CAAC;AAC3J,eAAW,KAAK,KAAK,WAAW;AAC5B,WAAK,YAAY,IAAI,CAAC;AAAA,IAC1B;AACA,QAAI;AACJ,QAAI,SAAS,iCAAiC;AAC1C,eAAS,IAAI,WAAW,MAAM,SAAS,iCAAiC,SAAS,MAAM;AACvF,iBAAW,EAAE,GAAG,UAAU,OAAe;AACzC,WAAK,YAAY,IAAI,MAAM;AAAA,IAC/B;AACA,SAAK,QAAQ,IAAI,MAAM,MAAM,KAAK,KAAK,mBAAmB,EAAE,CAAC,GAAG,SAAS,gBAAgB;AACzF,SAAK,YAAY,IAAI,MAAM,MAAM,KAAK,KAAK,oBAAoB,EAAE,CAAC,GAAG,SAAS,gBAAgB;AAC9F,SAAK,SAAS,IAAI,MAAM,MAAM,KAAK,KAAK,iBAAiB,GAAG,SAAS,gBAAgB;AACrF,SAAK,OAAO,IAAI,aAAa,OAAO,WAAW,KAAK,cAAc,KAAK,WAAW,KAAK,OAAO,KAAK,WAAW,KAAK,QAAQ,EAAE,GAAG,cAAc,MAAM,KAAK,OAAO,QAAQ,GAAG,MAAM,MAAM,sBAAsB,MAAM,KAAK,uBAAuB,CAAC;AAChP,SAAK,QAAQ,KAAK,YAAY,OAAO,KAAK,MAAM,QAAQ;AACxD,kCAA8B,QAAQ,KAAK,MAAM;AACjD,UAAM,mBAAmB,MAAM,QAAQ,KAAK,MAAM,aAAa,OAAK;AAChE,WAAK,cAAc,aAAa,MAAM;AAClC,aAAK,MAAM,iBAAiB,CAAC;AAC7B,aAAK,UAAU,iBAAiB,CAAC;AAAA,MACrC,CAAC;AAAA,IACL,GAAG,KAAK,WAAW;AAEnB,qBAAiB,MAAM,MAAM,MAAM,KAAK,WAAW;AAKnD,UAAM,qBAAqB,KAAK,YAAY,IAAI,IAAI,QAAQ,CAAC;AAC7D,UAAM,sBAAsB,KAAK,YAAY,IAAI,IAAI,QAAQ,CAAC,CAAC;AAC/D,SAAK,YAAY,IAAI,MAAM,IAAI,kBAAkB,KAAK,MAAM,aAAa,KAAK,UAAU,WAAW,EAAE,MAAM;AACvG,0BAAoB,QAAQ,MAAM;AAC9B,cAAM,MAAM,oBAAI,IAAI;AACpB,mBAAW,QAAQ,KAAK,MAAM,SAAS,GAAG;AACtC,cAAI,IAAI,IAAI;AAAA,QAChB;AACA,mBAAW,QAAQ,KAAK,UAAU,SAAS,GAAG;AAC1C,cAAI,IAAI,IAAI;AAAA,QAChB;AACA,2BAAmB,KAAK,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC;AAAA,MAC7C,CAAC;AAAA,IACL,CAAC,CAAC;AACF,2BAAuB,QAAQ,mBAAmB;AAClD,QAAI,SAAS,oBAAoB,OAAO;AACpC,YAAM,YAAY,MAAM,MAAM,KAAK,KAAK,WAAW,CAAAC,OAAKA,GAAE,OAAO,OAAK,CAAC,eAAe,EAAE,MAAM,CAAC,EAC1F,IAAI,OAAK,IAAI,sBAAsB,CAAC,CAAC,CAAC;AAC3C,YAAM,MAAM,WAAW,CAAAA,OAAKA,GAAE;AAAA,QAAO,OAAK,EAAE,YAAY;AAAA;AAAA,MAA0B,CAAC,EAAE,KAAK,aAAa,MAAM,KAAK,WAAW;AAC7H,YAAM,MAAM,WAAW,CAAAA,OAAKA,GAAE;AAAA,QAAO,OAAK,EAAE,YAAY;AAAA;AAAA,MAA2B,CAAC,EAAE,KAAK,cAAc,MAAM,KAAK,WAAW;AAC/H,YAAM,MAAM,WAAW,CAAAA,OAAKA,GAAE;AAAA,QAAO,OAAK,EAAE,YAAY;AAAA;AAAA,MAAsB,CAAC,EAAE,KAAK,SAAS,MAAM,KAAK,WAAW;AAAA,IACzH;AACA,UAAM,KAAK,SAAS,uBAAuB,QAAQ,OAAO,SAAS,KAAK,SAAS,SAAS,mCAAmC,SAAS,qBAAqB;AACvJ,YAAM,OAAO,KAAK,QAAQ,mBAAmB,EAAE,QAAQ,KAAK,QAAQ,iBAAiB,IAAI;AACzF,WAAK,iBAAiB,IAAI,eAAe,MAAM,KAAK,OAAO,KAAK,MAAM,QAAQ,SAAS,qBAAqB,IAAI;AAChH,WAAK,wBAAwB,UAAQ,KAAK,eAAe,iBAAiB,IAAI;AAC9E,WAAK,2BAA2B,KAAK,eAAe;AACpD,WAAK,YAAY,IAAI,KAAK,cAAc;AACxC,WAAK,sBAAsB,KAAK,eAAe;AAC/C,WAAK,2BAA2B,KAAK,eAAe;AAAA,IACxD,OACK;AACD,WAAK,sBAAsB,MAAM;AACjC,WAAK,2BAA2B,MAAM;AAAA,IAC1C;AACA,QAAI,SAAS,oBAAoB;AAC7B,WAAK,yBAAyB,IAAI,uBAAuB,MAAM,KAAK,OAAO,KAAK,MAAM,KAAK,WAAW,KAAK,cAAc,QAAQ;AAAA,IACrI;AACA,SAAK,eAAe,iBAAiB,KAAK,KAAK,eAAe,CAAC;AAC/D,SAAK,eAAe,EAAE,UAAU,OAAO,UAAU,KAAK,SAAS,uBAAuB,mBAAmB,MAAM;AAAA,EACnH;AAAA,EACA,cAAc,gBAAgB,CAAC,GAAG;AAC9B,QAAI;AACJ,SAAK,WAAW,EAAE,GAAG,KAAK,UAAU,GAAG,cAAc;AACrD,eAAW,YAAY,KAAK,WAAW;AACnC,eAAS,cAAc,aAAa;AAAA,IACxC;AACA,SAAK,KAAK,cAAc,KAAK,QAAQ;AACrC,KAAC,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,cAAc,aAAa;AAC9F,SAAK,mBAAmB,aAAa;AACrC,SAAK,oBAAoB,KAAK,KAAK,QAAQ;AAC3C,SAAK,eAAe,EAAE,UAAU,OAAO,UAAU,KAAK,SAAS,uBAAuB,mBAAmB,MAAM;AAAA,EACnH;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,mBAAmB,eAAe;AAC9B,QAAI;AACJ,QAAI,CAAC,KAAK,0BAA0B,KAAK,SAAS,oBAAoB;AAClE,WAAK,yBAAyB,IAAI,uBAAuB,MAAM,KAAK,OAAO,KAAK,MAAM,KAAK,WAAW,KAAK,cAAc,KAAK,QAAQ;AAAA,IAC1I,WACS,KAAK,0BAA0B,CAAC,KAAK,SAAS,oBAAoB;AACvE,WAAK,uBAAuB,QAAQ;AACpC,WAAK,yBAAyB;AAAA,IAClC;AACA,KAAC,KAAK,KAAK,4BAA4B,QAAQ,OAAO,SAAS,SAAS,GAAG,cAAc,aAAa;AAAA,EAC1G;AAAA;AAAA,EAEA,iBAAiB;AACb,WAAO,KAAK,KAAK,eAAe;AAAA,EACpC;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,UAAU,WAAW;AACrB,SAAK,KAAK,YAAY;AAAA,EAC1B;AAAA,EACA,IAAI,eAAe;AACf,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,eAAe;AACf,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,WAAW;AACP,SAAK,KAAK,SAAS;AAAA,EACvB;AAAA,EACA,OAAO,QAAQ,OAAO;AAClB,QAAI;AACJ,SAAK,KAAK,OAAO,QAAQ,KAAK;AAC9B,QAAI,SAAS,KAAK,GAAG;AACjB,OAAC,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,OAAO,KAAK;AAAA,IACnF;AAAA,EACJ;AAAA,EACA,MAAM,QAAQ;AACV,UAAM,SAAS,IAAI,KAAK,KAAK,KAAK;AAClC,UAAM,UAAU,CAAC;AACjB,QAAI,OAAO,wBAAwB;AAC/B,cAAQ,KAAK,eAAe,MAAM,yDAAyD,MAAM,8DAA8D,OAAO,8BAA8B,KAAK;AACzM,cAAQ,KAAK,eAAe,MAAM,6DAA6D,OAAO,sBAAsB,KAAK;AAAA,IACrI;AACA,QAAI,OAAO,gBAAgB;AACvB,cAAQ,KAAK,eAAe,MAAM,iFAAiF,OAAO,cAAc,KAAK;AAC7I,cAAQ,KAAK,eAAe,MAAM,yGAAyG,OAAO,cAAc,KAAK;AAAA,IACzK;AACA,SAAK,aAAa,cAAc,QAAQ,KAAK,IAAI;AACjD,SAAK,KAAK,MAAM,MAAM;AAAA,EAC1B;AAAA;AAAA,EAEA,iBAAiB,UAAU;AACvB,UAAM,YAAY,KAAK,MAAM,sBAAsB,QAAQ;AAC3D,UAAM,aAAa,KAAK,MAAM,QAAQ,SAAS;AAC/C,WAAO,WAAW;AAAA,EACtB;AAAA,EACA,qBAAqB,UAAU;AAC3B,WAAO,KAAK,MAAM,qBAAqB,QAAQ;AAAA,EACnD;AAAA;AAAA,EAEA,QAAQ,UAAU;AACd,WAAO,KAAK,MAAM,QAAQ,QAAQ;AAAA,EACtC;AAAA,EACA,gBAAgB,MAAM;AAClB,WAAO,KAAK,MAAM,gBAAgB,IAAI;AAAA,EAC1C;AAAA,EACA,SAAS,UAAU,YAAY,OAAO;AAClC,WAAO,KAAK,MAAM,aAAa,UAAU,MAAM,SAAS;AAAA,EAC5D;AAAA,EACA,OAAO,UAAU,YAAY,OAAO;AAChC,WAAO,KAAK,MAAM,aAAa,UAAU,OAAO,SAAS;AAAA,EAC7D;AAAA,EACA,gBAAgB,UAAU,YAAY,OAAO;AACzC,WAAO,KAAK,MAAM,aAAa,UAAU,QAAW,SAAS;AAAA,EACjE;AAAA,EACA,cAAc,UAAU;AACpB,WAAO,KAAK,MAAM,cAAc,QAAQ;AAAA,EAC5C;AAAA,EACA,eAAe,UAAU,aAAa;AAClC,WAAO,KAAK,MAAM,eAAe,UAAU,WAAW;AAAA,EAC1D;AAAA,EACA,YAAY,UAAU;AAClB,WAAO,KAAK,MAAM,YAAY,QAAQ;AAAA,EAC1C;AAAA,EACA,WAAW;AACP,SAAK,gBAAgB,KAAK,MAAS;AACnC,SAAK,MAAM,SAAS;AAAA,EACxB;AAAA,EACA,aAAa,UAAU,cAAc;AACjC,UAAM,QAAQ,SAAS,IAAI,OAAK,KAAK,MAAM,QAAQ,CAAC,CAAC;AACrD,SAAK,UAAU,IAAI,OAAO,YAAY;AACtC,UAAM,UAAU,SAAS,IAAI,OAAK,KAAK,MAAM,aAAa,CAAC,CAAC,EAAE,OAAO,OAAK,IAAI,EAAE;AAChF,SAAK,KAAK,aAAa,SAAS,cAAc,IAAI;AAAA,EACtD;AAAA,EACA,eAAe;AACX,WAAO,KAAK,UAAU,IAAI;AAAA,EAC9B;AAAA,EACA,SAAS,UAAU,cAAc;AAC7B,UAAM,QAAQ,SAAS,IAAI,OAAK,KAAK,MAAM,QAAQ,CAAC,CAAC;AACrD,SAAK,MAAM,IAAI,OAAO,YAAY;AAClC,UAAM,UAAU,SAAS,IAAI,OAAK,KAAK,MAAM,aAAa,CAAC,CAAC,EAAE,OAAO,OAAK,IAAI,EAAE;AAChF,SAAK,KAAK,SAAS,SAAS,cAAc,IAAI;AAAA,EAClD;AAAA,EACA,WAAW;AACP,WAAO,KAAK,MAAM,IAAI;AAAA,EAC1B;AAAA,EACA,OAAO,UAAU,aAAa;AAC1B,SAAK,MAAM,SAAS,QAAQ;AAC5B,UAAM,QAAQ,KAAK,MAAM,aAAa,QAAQ;AAC9C,QAAI,UAAU,IAAI;AACd;AAAA,IACJ;AACA,QAAI,CAAC,KAAK,wBAAwB;AAC9B,WAAK,KAAK,OAAO,OAAO,WAAW;AAAA,IACvC,OACK;AACD,YAAM,aAAa,KAAK,uBAAuB,2BAA2B,KAAK,QAAQ,QAAQ,CAAC;AAChG,WAAK,KAAK,OAAO,OAAO,aAAa,UAAU;AAAA,IACnD;AAAA,EACJ;AAAA;AAAA,EAEA,YAAY,GAAG;AACX,MAAE,eAAe;AACjB,MAAE,gBAAgB;AAClB,UAAM,QAAQ,KAAK,KAAK,mBAAmB;AAC3C,QAAI,MAAM,WAAW,GAAG;AACpB;AAAA,IACJ;AACA,UAAM,OAAO,MAAM,CAAC;AACpB,UAAM,WAAW,KAAK,MAAM,gBAAgB,IAAI;AAChD,UAAM,YAAY,KAAK,MAAM,aAAa,UAAU,IAAI;AACxD,QAAI,CAAC,WAAW;AACZ,YAAM,iBAAiB,KAAK,MAAM,sBAAsB,QAAQ;AAChE,UAAI,CAAC,gBAAgB;AACjB;AAAA,MACJ;AACA,YAAM,kBAAkB,KAAK,MAAM,aAAa,cAAc;AAC9D,WAAK,KAAK,OAAO,eAAe;AAChC,WAAK,KAAK,SAAS,CAAC,eAAe,CAAC;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,aAAa,GAAG;AACZ,MAAE,eAAe;AACjB,MAAE,gBAAgB;AAClB,UAAM,QAAQ,KAAK,KAAK,mBAAmB;AAC3C,QAAI,MAAM,WAAW,GAAG;AACpB;AAAA,IACJ;AACA,UAAM,OAAO,MAAM,CAAC;AACpB,UAAM,WAAW,KAAK,MAAM,gBAAgB,IAAI;AAChD,UAAM,YAAY,KAAK,MAAM,aAAa,UAAU,KAAK;AACzD,QAAI,CAAC,WAAW;AACZ,UAAI,CAAC,KAAK,SAAS,KAAK,WAAS,MAAM,OAAO,GAAG;AAC7C;AAAA,MACJ;AACA,YAAM,CAAC,YAAY,IAAI,KAAK,KAAK,SAAS;AAC1C,YAAM,kBAAkB,eAAe;AACvC,WAAK,KAAK,OAAO,eAAe;AAChC,WAAK,KAAK,SAAS,CAAC,eAAe,CAAC;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,QAAQ,GAAG;AACP,MAAE,eAAe;AACjB,MAAE,gBAAgB;AAClB,UAAM,QAAQ,KAAK,KAAK,mBAAmB;AAC3C,QAAI,MAAM,WAAW,GAAG;AACpB;AAAA,IACJ;AACA,UAAM,OAAO,MAAM,CAAC;AACpB,UAAM,WAAW,KAAK,MAAM,gBAAgB,IAAI;AAChD,UAAM,YAAY,EAAE,aAAa;AACjC,SAAK,MAAM,aAAa,UAAU,QAAW,SAAS;AAAA,EAC1D;AAAA,EACA,UAAU;AACN,QAAI;AACJ,YAAQ,KAAK,WAAW;AACxB,KAAC,KAAK,KAAK,4BAA4B,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ;AACnF,SAAK,KAAK,QAAQ;AAAA,EACtB;AACJ;;;ACpmDO,IAAM,kBAAN,MAAsB;AAAA,EACzB,YAAY,MAAM,MAAM,UAAU,CAAC,GAAG;AAClC,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,QAAQ,oBAAI,IAAI;AACrB,SAAK,kBAAkB,oBAAI,IAAI;AAC/B,SAAK,QAAQ,IAAI,eAAe,MAAM,MAAM,MAAM,OAAO;AACzD,SAAK,cAAc,KAAK,MAAM;AAC9B,SAAK,2BAA2B,KAAK,MAAM;AAC3C,SAAK,6BAA6B,KAAK,MAAM;AAC7C,QAAI,QAAQ,QAAQ;AAChB,WAAK,SAAS;AAAA,QACV,QAAQ,GAAG,GAAG;AACV,iBAAO,QAAQ,OAAO,QAAQ,EAAE,SAAS,EAAE,OAAO;AAAA,QACtD;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,YAAY,SAAS,WAAW,SAAS,MAAM,GAAG,UAAU,CAAC,GAAG;AAC5D,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,SAAK,aAAa,UAAU,KAAK,sBAAsB,QAAQ,GAAG,OAAO;AAAA,EAC7E;AAAA,EACA,aAAa,UAAU,WAAW,SAAS,MAAM,GAAG,SAAS;AACzD,UAAM,mBAAmB,oBAAI,IAAI;AACjC,UAAM,qBAAqB,oBAAI,IAAI;AACnC,UAAM,kBAAkB,CAAC,SAAS;AAC9B,UAAI;AACJ,UAAI,KAAK,YAAY,MAAM;AACvB;AAAA,MACJ;AACA,YAAM,QAAQ;AACd,uBAAiB,IAAI,MAAM,OAAO;AAClC,WAAK,MAAM,IAAI,MAAM,SAAS,KAAK;AACnC,UAAI,KAAK,kBAAkB;AACvB,cAAM,KAAK,KAAK,iBAAiB,MAAM,MAAM,OAAO,EAAE,SAAS;AAC/D,2BAAmB,IAAI,EAAE;AACzB,aAAK,gBAAgB,IAAI,IAAI,KAAK;AAAA,MACtC;AACA,OAAC,KAAK,QAAQ,qBAAqB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,SAAS,KAAK;AAAA,IAC9F;AACA,UAAM,kBAAkB,CAAC,SAAS;AAC9B,UAAI;AACJ,UAAI,KAAK,YAAY,MAAM;AACvB;AAAA,MACJ;AACA,YAAM,QAAQ;AACd,UAAI,CAAC,iBAAiB,IAAI,MAAM,OAAO,GAAG;AACtC,aAAK,MAAM,OAAO,MAAM,OAAO;AAAA,MACnC;AACA,UAAI,KAAK,kBAAkB;AACvB,cAAM,KAAK,KAAK,iBAAiB,MAAM,MAAM,OAAO,EAAE,SAAS;AAC/D,YAAI,CAAC,mBAAmB,IAAI,EAAE,GAAG;AAC7B,eAAK,gBAAgB,OAAO,EAAE;AAAA,QAClC;AAAA,MACJ;AACA,OAAC,KAAK,QAAQ,qBAAqB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,SAAS,KAAK;AAAA,IAC9F;AACA,SAAK,MAAM,OAAO,CAAC,GAAG,UAAU,CAAC,GAAG,OAAO,WAAW,UAAU,EAAE,GAAG,SAAS,iBAAiB,gBAAgB,CAAC;AAAA,EACpH;AAAA,EACA,sBAAsB,WAAW,SAAS,MAAM,GAAG;AAC/C,QAAI,KAAK,QAAQ;AACb,iBAAW,CAAC,GAAG,QAAQ,EAAE,KAAK,KAAK,OAAO,QAAQ,KAAK,KAAK,MAAM,CAAC;AAAA,IACvE;AACA,WAAO,SAAS,IAAI,UAAU,iBAAe;AACzC,UAAI,OAAO,KAAK,MAAM,IAAI,YAAY,OAAO;AAC7C,UAAI,CAAC,QAAQ,KAAK,kBAAkB;AAChC,cAAM,KAAK,KAAK,iBAAiB,MAAM,YAAY,OAAO,EAAE,SAAS;AACrE,eAAO,KAAK,gBAAgB,IAAI,EAAE;AAAA,MACtC;AACA,UAAI,CAAC,MAAM;AACP,YAAIC;AACJ,YAAI,OAAO,YAAY,cAAc,aAAa;AAC9C,UAAAA,aAAY;AAAA,QAChB,WACS,YAAY,cAAc,+BAA+B,aAAa,YAAY,cAAc,+BAA+B,qBAAqB;AACzJ,UAAAA,aAAY;AAAA,QAChB,WACS,YAAY,cAAc,+BAA+B,YAAY,YAAY,cAAc,+BAA+B,oBAAoB;AACvJ,UAAAA,aAAY;AAAA,QAChB,OACK;AACD,UAAAA,aAAY,QAAQ,YAAY,SAAS;AAAA,QAC7C;AACA,eAAO;AAAA,UACH,GAAG;AAAA,UACH,UAAU,KAAK,sBAAsB,YAAY,QAAQ;AAAA,UACzD,WAAAA;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,cAAc,OAAO,YAAY,gBAAgB,YAAY,YAAY,cAAc,KAAK;AAClG,UAAI;AACJ,UAAI,OAAO,YAAY,cAAc,eAAe,YAAY,cAAc,+BAA+B,uBAAuB,YAAY,cAAc,+BAA+B,oBAAoB;AAC7M,oBAAY,KAAK;AAAA,MACrB,WACS,YAAY,cAAc,+BAA+B,WAAW;AACzE,oBAAY;AAAA,MAChB,WACS,YAAY,cAAc,+BAA+B,UAAU;AACxE,oBAAY;AAAA,MAChB,OACK;AACD,oBAAY,QAAQ,YAAY,SAAS;AAAA,MAC7C;AACA,aAAO;AAAA,QACH,GAAG;AAAA,QACH;AAAA,QACA;AAAA,QACA,UAAU,KAAK,sBAAsB,YAAY,QAAQ;AAAA,MAC7D;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,SAAS,SAAS;AACd,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,SAAK,MAAM,SAAS,QAAQ;AAAA,EAChC;AAAA,EACA,qBAAqB,MAAM,MAAM;AAC7B,UAAM,WAAW,KAAK,mBAAmB,GAAG;AAC5C,WAAO,KAAK,MAAM,qBAAqB,QAAQ;AAAA,EACnD;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,MAAM,IAAI,OAAO;AAAA,EACjC;AAAA,EACA,aAAa,SAAS;AAClB,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,WAAO,KAAK,MAAM,aAAa,QAAQ;AAAA,EAC3C;AAAA,EACA,mBAAmB,SAAS;AACxB,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,WAAO,KAAK,MAAM,mBAAmB,QAAQ;AAAA,EACjD;AAAA,EACA,cAAc,SAAS;AACnB,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,WAAO,KAAK,MAAM,cAAc,QAAQ;AAAA,EAC5C;AAAA,EACA,eAAe,SAAS,aAAa;AACjC,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,WAAO,KAAK,MAAM,eAAe,UAAU,WAAW;AAAA,EAC1D;AAAA,EACA,YAAY,SAAS;AACjB,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,WAAO,KAAK,MAAM,YAAY,QAAQ;AAAA,EAC1C;AAAA,EACA,aAAa,SAAS,WAAW,WAAW;AACxC,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,WAAO,KAAK,MAAM,aAAa,UAAU,WAAW,SAAS;AAAA,EACjE;AAAA,EACA,SAAS,SAAS;AACd,UAAM,WAAW,KAAK,mBAAmB,OAAO;AAChD,SAAK,MAAM,SAAS,QAAQ;AAAA,EAChC;AAAA,EACA,WAAW;AACP,SAAK,MAAM,SAAS;AAAA,EACxB;AAAA,EACA,QAAQ,UAAU,MAAM;AACpB,QAAI,YAAY,MAAM;AAClB,aAAO,KAAK,MAAM,QAAQ,KAAK,MAAM,OAAO;AAAA,IAChD;AACA,UAAM,OAAO,KAAK,MAAM,IAAI,OAAO;AACnC,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,UAAU,KAAK,MAAM,2BAA2B,OAAO,EAAE;AAAA,IACvE;AACA,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB,MAAM;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,sBAAsB,SAAS;AAC3B,QAAI,YAAY,MAAM;AAClB,YAAM,IAAI,UAAU,KAAK,MAAM,oCAAoC;AAAA,IACvE;AACA,UAAM,OAAO,KAAK,MAAM,IAAI,OAAO;AACnC,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,UAAU,KAAK,MAAM,2BAA2B,OAAO,EAAE;AAAA,IACvE;AACA,UAAM,WAAW,KAAK,MAAM,gBAAgB,IAAI;AAChD,UAAM,iBAAiB,KAAK,MAAM,sBAAsB,QAAQ;AAChE,UAAM,SAAS,KAAK,MAAM,QAAQ,cAAc;AAChD,WAAO,OAAO;AAAA,EAClB;AAAA,EACA,mBAAmB,SAAS;AACxB,QAAI,YAAY,MAAM;AAClB,aAAO,CAAC;AAAA,IACZ;AACA,UAAM,OAAO,KAAK,MAAM,IAAI,OAAO;AACnC,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,UAAU,KAAK,MAAM,2BAA2B,OAAO,EAAE;AAAA,IACvE;AACA,WAAO,KAAK,MAAM,gBAAgB,IAAI;AAAA,EAC1C;AACJ;;;AC5LA,SAAS,WAAW,SAAS;AACzB,QAAM,WAAW,CAAC,QAAQ,OAAO;AACjC,QAAM,iBAAiB,QAAQ,kBAAkB;AACjD,SAAO;AAAA,IACH,SAAS,EAAE,UAAU,eAAe;AAAA,IACpC,UAAU,SAAS,IAAI,SAAS,KAAK,QAAQ,QAAQ,GAAG,UAAU;AAAA,IAClE,aAAa,QAAQ;AAAA,IACrB,WAAW,QAAQ;AAAA,EACvB;AACJ;AAEO,SAAS,SAAS,SAAS;AAC9B,QAAM,WAAW,CAAC,QAAQ,OAAO;AACjC,QAAM,iBAAiB,QAAQ,kBAAkB;AACjD,MAAI;AACJ,MAAI;AACJ,SAAO,MAAM;AACT,KAAC,UAAU,gBAAgB,IAAI,SAAS,QAAQ,SAAS,KAAK,QAAQ,QAAQ,GAAG,CAAC;AAClF,QAAI,SAAS,WAAW,GAAG;AACvB;AAAA,IACJ;AACA,QAAI,SAAS,CAAC,EAAE,gBAAgB;AAC5B;AAAA,IACJ;AACA,cAAU,SAAS,CAAC;AACpB,aAAS,KAAK,QAAQ,OAAO;AAAA,EACjC;AACA,SAAO;AAAA,IACH,SAAS,EAAE,UAAU,eAAe;AAAA,IACpC,UAAU,SAAS,IAAI,SAAS,OAAO,UAAU,gBAAgB,GAAG,QAAQ;AAAA,IAC5E,aAAa,QAAQ;AAAA,IACrB,WAAW,QAAQ;AAAA,EACvB;AACJ;AACA,SAAS,YAAY,SAAS,QAAQ,GAAG;AACrC,MAAI;AACJ,MAAI,QAAQ,QAAQ,QAAQ,SAAS,SAAS,GAAG;AAC7C,eAAW,CAAC,YAAY,SAAS,QAAQ,CAAC,CAAC;AAAA,EAC/C,OACK;AACD,eAAW,SAAS,IAAI,SAAS,KAAK,QAAQ,QAAQ,GAAG,QAAM,YAAY,IAAI,CAAC,CAAC;AAAA,EACrF;AACA,MAAI,UAAU,KAAK,QAAQ,QAAQ,gBAAgB;AAC/C,WAAO;AAAA,MACH,SAAS,QAAQ,QAAQ,SAAS,KAAK;AAAA,MACvC;AAAA,MACA,gBAAgB;AAAA,MAChB,aAAa,QAAQ;AAAA,MACrB,WAAW,QAAQ;AAAA,IACvB;AAAA,EACJ;AACA,SAAO;AAAA,IACH,SAAS,QAAQ,QAAQ,SAAS,KAAK;AAAA,IACvC;AAAA,IACA,aAAa,QAAQ;AAAA,IACrB,WAAW,QAAQ;AAAA,EACvB;AACJ;AAEO,SAAS,WAAW,SAAS;AAChC,SAAO,YAAY,SAAS,CAAC;AACjC;AACA,SAASC,QAAO,aAAa,SAAS,UAAU;AAC5C,MAAI,YAAY,YAAY,SAAS;AACjC,WAAO,EAAE,GAAG,aAAa,SAAS;AAAA,EACtC;AACA,SAAO,EAAE,GAAG,aAAa,UAAU,SAAS,IAAI,SAAS,KAAK,YAAY,QAAQ,GAAG,OAAKA,QAAO,GAAG,SAAS,QAAQ,CAAC,EAAE;AAC5H;AACA,IAAM,uBAAuB,CAAC,UAAU;AAAA,EACpC,MAAM,MAAM;AACR,WAAO,KAAK,SAAS,IAAI,OAAK,KAAK,MAAM,CAAC,EAAE,SAAS,CAAC,EAAE,KAAK,IAAI;AAAA,EACrE;AACJ;AAEO,IAAM,4BAAN,MAAgC;AAAA,EACnC,IAAI,cAAc;AAAE,WAAO,KAAK,MAAM;AAAA,EAAa;AAAA,EACnD,IAAI,2BAA2B;AAAE,WAAO,KAAK,MAAM;AAAA,EAA0B;AAAA,EAC7E,IAAI,6BAA6B;AAAE,WAAO,KAAK,MAAM;AAAA,EAA4B;AAAA,EACjF,YAAY,MAAM,MAAM,UAAU,CAAC,GAAG;AAClC,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,QAAQ,oBAAI,IAAI;AACrB,SAAK,QAAQ,IAAI,gBAAgB,MAAM,MAAM,OAAO;AACpD,SAAK,UAAU,OAAO,QAAQ,uBAAuB,cAAc,OAAO,QAAQ;AAClF,SAAK,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,YAAY,SAAS,WAAW,SAAS,MAAM,GAAG,SAAS;AAGvD,UAAM,uBAAuB,QAAQ,wBAAwB,qBAAqB,QAAQ,oBAAoB;AAC9G,QAAI,YAAY,MAAM;AAClB,YAAM,qBAAqB,SAAS,IAAI,UAAU,KAAK,UAAU,WAAW,UAAU;AACtF,WAAK,aAAa,MAAM,oBAAoB,EAAE,sBAAsB,WAAW,SAAS,CAAC;AACzF;AAAA,IACJ;AACA,UAAM,iBAAiB,KAAK,MAAM,IAAI,OAAO;AAC7C,QAAI,CAAC,gBAAgB;AACjB,YAAM,IAAI,UAAU,KAAK,MAAM,8BAA8B;AAAA,IACjE;AACA,UAAM,OAAO,KAAK,MAAM,QAAQ,cAAc;AAC9C,UAAM,uBAAuB,KAAK,MAAM,sBAAsB,cAAc;AAC5E,UAAM,SAAS,KAAK,MAAM,QAAQ,oBAAoB;AACtD,UAAM,sBAAsB,WAAW,IAAI;AAC3C,UAAM,iBAAiBA,QAAO,qBAAqB,SAAS,QAAQ;AACpE,UAAM,uBAAuB,KAAK,UAAU,WAAW,YAAY,cAAc;AAGjF,UAAM,oBAAoB,QAAQ,uBAC3B,CAAC,GAAG,MAAM,QAAQ,qBAAqB,MAAM,CAAC,MAAM,QAAQ,qBAAqB,MAAM,CAAC,IACzF;AACN,QAAI,OAAO,oBAAoB,QAAQ,UAAU,KAAK,QAAQ,UAAU,iBAAiB,GAAG;AACxF,WAAK,aAAa,gBAAgB,oBAAoB,YAAY,SAAS,MAAM,GAAG,EAAE,sBAAsB,WAAW,EAAE,CAAC;AAC1H;AAAA,IACJ;AACA,UAAM,iBAAiB,OAAO,SACzB,IAAI,WAAS,UAAU,OAAO,sBAAsB,KAAK;AAC9D,SAAK,aAAa,OAAO,SAAS,gBAAgB;AAAA,MAC9C;AAAA,MACA,WAAW,KAAK,QAAQ,OAAO;AAAA,IACnC,CAAC;AAAA,EACL;AAAA,EACA,sBAAsB,SAAS;AAC3B,QAAI,YAAY,KAAK,SAAS;AAC1B;AAAA,IACJ;AACA,SAAK,UAAU;AACf,UAAM,OAAO,KAAK,MAAM,QAAQ;AAChC,UAAM,eAAe,KAAK;AAC1B,UAAM,2BAA2B,SAAS,IAAI,cAAc,UAAU;AACtE,UAAM,2BAA2B,SAAS,IAAI,0BAA0B,UAAU,WAAW,UAAU;AAGvG,SAAK,aAAa,MAAM,0BAA0B;AAAA,MAC9C,sBAAsB,KAAK;AAAA,MAC3B,WAAW;AAAA,IACf,CAAC;AAAA,EACL;AAAA,EACA,aAAa,MAAM,UAAU,SAAS;AAClC,UAAM,mBAAmB,oBAAI,IAAI;AACjC,UAAM,kBAAkB,CAACC,UAAS;AAC9B,iBAAW,WAAWA,MAAK,QAAQ,UAAU;AACzC,yBAAiB,IAAI,OAAO;AAC5B,aAAK,MAAM,IAAI,SAASA,MAAK,OAAO;AAAA,MACxC;AAAA,IACJ;AACA,UAAM,kBAAkB,CAACA,UAAS;AAC9B,iBAAW,WAAWA,MAAK,QAAQ,UAAU;AACzC,YAAI,CAAC,iBAAiB,IAAI,OAAO,GAAG;AAChC,eAAK,MAAM,OAAO,OAAO;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,MAAM,YAAY,MAAM,UAAU,EAAE,GAAG,SAAS,iBAAiB,gBAAgB,CAAC;AAAA,EAC3F;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,MAAM,IAAI,OAAO;AAAA,EACjC;AAAA,EACA,aAAa,UAAU;AACnB,UAAM,OAAO,KAAK,kBAAkB,QAAQ;AAC5C,WAAO,KAAK,MAAM,aAAa,IAAI;AAAA,EACvC;AAAA,EACA,mBAAmB,UAAU;AACzB,UAAM,OAAO,KAAK,kBAAkB,QAAQ;AAC5C,WAAO,KAAK,MAAM,mBAAmB,IAAI;AAAA,EAC7C;AAAA,EACA,QAAQ,UAAU;AACd,QAAI,OAAO,aAAa,aAAa;AACjC,aAAO,KAAK,MAAM,QAAQ;AAAA,IAC9B;AACA,UAAM,OAAO,KAAK,kBAAkB,QAAQ;AAC5C,WAAO,KAAK,MAAM,QAAQ,IAAI;AAAA,EAClC;AAAA;AAAA,EAEA,gBAAgB,MAAM;AAClB,UAAM,iBAAiB,KAAK,MAAM,gBAAgB,IAAI;AACtD,QAAI,mBAAmB,MAAM;AACzB,aAAO;AAAA,IACX;AACA,WAAO,eAAe,SAAS,eAAe,SAAS,SAAS,CAAC;AAAA,EACrE;AAAA;AAAA,EAEA,sBAAsB,UAAU;AAC5B,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,UAAM,aAAa,KAAK,MAAM,sBAAsB,cAAc;AAClE,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,IACX;AACA,WAAO,WAAW,SAAS,WAAW,SAAS,SAAS,CAAC;AAAA,EAC7D;AAAA,EACA,qBAAqB,UAAU;AAC3B,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,qBAAqB,cAAc;AAAA,EACzD;AAAA,EACA,cAAc,UAAU;AACpB,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,cAAc,cAAc;AAAA,EAClD;AAAA,EACA,eAAe,UAAU,aAAa;AAClC,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,eAAe,gBAAgB,WAAW;AAAA,EAChE;AAAA,EACA,YAAY,UAAU;AAClB,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,YAAY,cAAc;AAAA,EAChD;AAAA,EACA,aAAa,UAAU,WAAW,WAAW;AACzC,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,WAAO,KAAK,MAAM,aAAa,gBAAgB,WAAW,SAAS;AAAA,EACvE;AAAA,EACA,SAAS,UAAU;AACf,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,SAAK,MAAM,SAAS,cAAc;AAAA,EACtC;AAAA,EACA,SAAS,UAAU;AACf,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ;AACtD,SAAK,MAAM,SAAS,cAAc;AAAA,EACtC;AAAA,EACA,WAAW;AACP,SAAK,MAAM,SAAS;AAAA,EACxB;AAAA,EACA,kBAAkB,SAAS;AACvB,QAAI,YAAY,MAAM;AAClB,aAAO;AAAA,IACX;AACA,UAAM,OAAO,KAAK,MAAM,IAAI,OAAO;AACnC,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,UAAU,KAAK,MAAM,2BAA2B,OAAO,EAAE;AAAA,IACvE;AACA,WAAO;AAAA,EACX;AACJ;AACO,IAAM,uBAAuB,cAAY,SAAS,SAAS,SAAS,CAAC;AAC5E,IAAM,4BAAN,MAAM,2BAA0B;AAAA,EAC5B,IAAI,UAAU;AAAE,WAAO,KAAK,KAAK,YAAY,OAAO,OAAO,KAAK,UAAU,KAAK,KAAK,OAAO;AAAA,EAAG;AAAA,EAC9F,IAAI,WAAW;AAAE,WAAO,KAAK,KAAK,SAAS,IAAI,UAAQ,IAAI,2BAA0B,KAAK,WAAW,IAAI,CAAC;AAAA,EAAG;AAAA,EAC7G,IAAI,QAAQ;AAAE,WAAO,KAAK,KAAK;AAAA,EAAO;AAAA,EACtC,IAAI,uBAAuB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAsB;AAAA,EACpE,IAAI,oBAAoB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAmB;AAAA,EAC9D,IAAI,cAAc;AAAE,WAAO,KAAK,KAAK;AAAA,EAAa;AAAA,EAClD,IAAI,YAAY;AAAE,WAAO,KAAK,KAAK;AAAA,EAAW;AAAA,EAC9C,IAAI,UAAU;AAAE,WAAO,KAAK,KAAK;AAAA,EAAS;AAAA,EAC1C,IAAI,aAAa;AAAE,WAAO,KAAK,KAAK;AAAA,EAAY;AAAA,EAChD,YAAY,WAAW,MAAM;AACzB,SAAK,YAAY;AACjB,SAAK,OAAO;AAAA,EAChB;AACJ;AACA,SAAS,QAAQ,YAAY,MAAM;AAC/B,SAAO;AAAA,IACH,OAAO,OAAO,aAAa,UAAU;AACjC,WAAK,OAAO,OAAO,aAAa,SAAS,IAAI,UAAQ,WAAW,IAAI,IAAI,CAAC,CAAC;AAAA,IAC9E;AAAA,IACA,oBAAoB,OAAO,QAAQ;AAC/B,WAAK,oBAAoB,OAAO,MAAM;AAAA,IAC1C;AAAA,EACJ;AACJ;AACA,SAAS,WAAW,yBAAyB,SAAS;AAClD,SAAO;AAAA,IACH,GAAG;AAAA,IACH,kBAAkB,QAAQ,oBAAoB;AAAA,MAC1C,MAAM,MAAM;AACR,eAAO,QAAQ,iBAAiB,MAAM,wBAAwB,IAAI,CAAC;AAAA,MACvE;AAAA,IACJ;AAAA,IACA,QAAQ,QAAQ,UAAU;AAAA,MACtB,QAAQ,MAAM,WAAW;AACrB,eAAO,QAAQ,OAAO,QAAQ,KAAK,SAAS,CAAC,GAAG,UAAU,SAAS,CAAC,CAAC;AAAA,MACzE;AAAA,IACJ;AAAA,IACA,QAAQ,QAAQ,UAAU;AAAA,MACtB,OAAO,MAAM,kBAAkB;AAC3B,eAAO,QAAQ,OAAO,OAAO,wBAAwB,IAAI,GAAG,gBAAgB;AAAA,MAChF;AAAA,IACJ;AAAA,EACJ;AACJ;AACO,IAAM,8BAAN,MAAkC;AAAA,EACrC,IAAI,cAAc;AACd,WAAO,MAAM,IAAI,KAAK,MAAM,aAAa,CAAC,EAAE,eAAe,aAAa,OAAO;AAAA,MAC3E,eAAe,cAAc,IAAI,UAAQ,KAAK,WAAW,IAAI,IAAI,CAAC;AAAA,MAClE,cAAc,aAAa,IAAI,UAAQ,KAAK,WAAW,IAAI,IAAI,CAAC;AAAA,IACpE,EAAE;AAAA,EACN;AAAA,EACA,IAAI,2BAA2B;AAC3B,WAAO,MAAM,IAAI,KAAK,MAAM,0BAA0B,CAAC,EAAE,MAAM,KAAK,OAAO;AAAA,MACvE,MAAM,KAAK,WAAW,IAAI,IAAI;AAAA,MAC9B;AAAA,IACJ,EAAE;AAAA,EACN;AAAA,EACA,IAAI,6BAA6B;AAC7B,WAAO,MAAM,IAAI,KAAK,MAAM,4BAA4B,UAAQ,KAAK,WAAW,IAAI,IAAI,CAAC;AAAA,EAC7F;AAAA,EACA,YAAY,MAAM,MAAM,UAAU,CAAC,GAAG;AAClC,SAAK,UAAU;AACf,SAAK,gBAAgB,QAAQ,iBAAiB;AAC9C,UAAM,0BAA0B,UAAQ,KAAK,cAAc,KAAK,QAAQ;AACxE,SAAK,aAAa,IAAI,WAAW,UAAQ,IAAI,0BAA0B,yBAAyB,IAAI,CAAC;AACrG,SAAK,QAAQ,IAAI,0BAA0B,MAAM,QAAQ,KAAK,YAAY,IAAI,GAAG,WAAW,yBAAyB,OAAO,CAAC;AAAA,EACjI;AAAA,EACA,YAAY,SAAS,WAAW,SAAS,MAAM,GAAG,UAAU,CAAC,GAAG;AAC5D,SAAK,MAAM,YAAY,SAAS,UAAU,OAAO;AAAA,EACrD;AAAA,EACA,sBAAsB,SAAS;AAC3B,SAAK,MAAM,sBAAsB,OAAO;AAAA,EAC5C;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,MAAM,IAAI,QAAQ;AAAA,EAClC;AAAA,EACA,aAAa,UAAU;AACnB,WAAO,KAAK,MAAM,aAAa,QAAQ;AAAA,EAC3C;AAAA,EACA,mBAAmB,UAAU;AACzB,WAAO,KAAK,MAAM,mBAAmB,QAAQ;AAAA,EACjD;AAAA,EACA,QAAQ,UAAU;AACd,WAAO,KAAK,WAAW,IAAI,KAAK,MAAM,QAAQ,QAAQ,CAAC;AAAA,EAC3D;AAAA,EACA,gBAAgB,MAAM;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,sBAAsB,UAAU;AAC5B,WAAO,KAAK,MAAM,sBAAsB,QAAQ;AAAA,EACpD;AAAA,EACA,qBAAqB,UAAU;AAC3B,UAAM,SAAS,KAAK,MAAM,qBAAqB,QAAQ;AACvD,QAAI,WAAW,QAAQ,OAAO,WAAW,aAAa;AAClD,aAAO;AAAA,IACX;AACA,WAAO,KAAK,cAAc,OAAO,QAAQ;AAAA,EAC7C;AAAA,EACA,cAAc,UAAU;AACpB,WAAO,KAAK,MAAM,cAAc,QAAQ;AAAA,EAC5C;AAAA,EACA,eAAe,UAAU,WAAW;AAChC,WAAO,KAAK,MAAM,eAAe,UAAU,SAAS;AAAA,EACxD;AAAA,EACA,YAAY,UAAU;AAClB,WAAO,KAAK,MAAM,YAAY,QAAQ;AAAA,EAC1C;AAAA,EACA,aAAa,UAAU,WAAW,WAAW;AACzC,WAAO,KAAK,MAAM,aAAa,UAAU,WAAW,SAAS;AAAA,EACjE;AAAA,EACA,SAAS,UAAU;AACf,WAAO,KAAK,MAAM,SAAS,QAAQ;AAAA,EACvC;AAAA,EACA,SAAS,UAAU;AACf,WAAO,KAAK,MAAM,SAAS,QAAQ;AAAA,EACvC;AAAA,EACA,WAAW;AACP,WAAO,KAAK,MAAM,SAAS;AAAA,EAC/B;AAAA,EACA,sBAAsB,WAAW,MAAM;AACnC,WAAO,KAAK,MAAM,QAAQ,QAAQ;AAAA,EACtC;AACJ;;;ACxWA,IAAI,aAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAMO,IAAM,aAAN,cAAyB,aAAa;AAAA,EACzC,IAAI,2BAA2B;AAAE,WAAO,KAAK,MAAM;AAAA,EAA0B;AAAA,EAC7E,YAAY,MAAM,WAAW,UAAU,WAAW,UAAU,CAAC,GAAG;AAC5D,UAAM,MAAM,WAAW,UAAU,WAAW,OAAO;AACnD,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,YAAY,SAAS,WAAW,SAAS,MAAM,GAAG,SAAS;AACvD,SAAK,MAAM,YAAY,SAAS,UAAU,OAAO;AAAA,EACrD;AAAA,EACA,SAAS,SAAS;AACd,QAAI,YAAY,QAAW;AACvB,WAAK,KAAK,SAAS;AACnB;AAAA,IACJ;AACA,SAAK,MAAM,SAAS,OAAO;AAAA,EAC/B;AAAA,EACA,WAAW,SAAS;AAChB,WAAO,KAAK,MAAM,IAAI,OAAO;AAAA,EACjC;AAAA,EACA,YAAY,MAAM,MAAM,SAAS;AAC7B,WAAO,IAAI,gBAAgB,MAAM,MAAM,OAAO;AAAA,EAClD;AACJ;AACA,IAAM,uBAAN,MAA2B;AAAA,EACvB,IAAI,6BAA6B;AAC7B,WAAO,KAAK,4BAA4B;AAAA,EAC5C;AAAA,EACA,YAAY,6BAA6B,UAAU;AAC/C,SAAK,8BAA8B;AACnC,SAAK,WAAW;AAChB,SAAK,aAAa,SAAS;AAC3B,QAAI,SAAS,yBAAyB;AAClC,WAAK,0BAA0B,SAAS;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,eAAe,WAAW;AACtB,UAAM,OAAO,KAAK,SAAS,eAAe,SAAS;AACnD,WAAO,EAAE,oBAAoB,QAAW,KAAK;AAAA,EACjD;AAAA,EACA,cAAc,MAAM,OAAO,cAAc,QAAQ;AAC7C,UAAM,qBAAqB,KAAK,2BAA2B,sBAAsB,KAAK,OAAO;AAC7F,QAAI,mBAAmB,QAAQ,SAAS,WAAW,GAAG;AAClD,mBAAa,qBAAqB;AAClC,WAAK,SAAS,cAAc,MAAM,OAAO,aAAa,MAAM,MAAM;AAAA,IACtE,OACK;AACD,mBAAa,qBAAqB;AAClC,WAAK,SAAS,yBAAyB,oBAAoB,OAAO,aAAa,MAAM,MAAM;AAAA,IAC/F;AAAA,EACJ;AAAA,EACA,eAAe,MAAM,OAAO,cAAc,QAAQ;AAC9C,QAAI,IAAI,IAAI,IAAI;AAChB,QAAI,aAAa,oBAAoB;AACjC,OAAC,MAAM,KAAK,KAAK,UAAU,+BAA+B,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,aAAa,oBAAoB,OAAO,aAAa,MAAM,MAAM;AAAA,IAC5K,OACK;AACD,OAAC,MAAM,KAAK,KAAK,UAAU,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,MAAM,OAAO,aAAa,MAAM,MAAM;AAAA,IACtI;AAAA,EACJ;AAAA,EACA,gBAAgB,cAAc;AAC1B,SAAK,SAAS,gBAAgB,aAAa,IAAI;AAAA,EACnD;AAAA,EACA,cAAc,SAAS,gBAAgB;AACnC,QAAI,KAAK,SAAS,eAAe;AAC7B,aAAO,KAAK,SAAS,cAAc,SAAS,cAAc;AAAA,IAC9D;AACA,WAAO;AAAA,EACX;AACJ;AACA,WAAW;AAAA,EACP;AACJ,GAAG,qBAAqB,WAAW,8BAA8B,IAAI;AACrE,SAAS,oBAAoB,4BAA4B,SAAS;AAC9D,SAAO,WAAW;AAAA,IACd,GAAG;AAAA,IACH,iCAAiC,QAAQ,mCAAmC;AAAA,MACxE,2BAA2B,GAAG;AAC1B,YAAI;AACJ,YAAI;AACA,+BAAqB,2BAA2B,EAAE,sBAAsB,CAAC;AAAA,QAC7E,SACO,IAAI;AACP,iBAAO,QAAQ,gCAAgC,2BAA2B,CAAC;AAAA,QAC/E;AACA,YAAI,mBAAmB,QAAQ,SAAS,WAAW,GAAG;AAClD,iBAAO,QAAQ,gCAAgC,2BAA2B,CAAC;AAAA,QAC/E,OACK;AACD,iBAAO,QAAQ,gCAAgC,yCAAyC,mBAAmB,QAAQ,QAAQ;AAAA,QAC/H;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AACO,IAAM,yBAAN,cAAqC,WAAW;AAAA,EACnD,YAAY,MAAM,WAAW,UAAU,WAAW,UAAU,CAAC,GAAG;AAC5D,UAAM,6BAA6B,MAAM;AACzC,UAAM,wBAAwB,UAAU,IAAI,OAAK,IAAI,qBAAqB,4BAA4B,CAAC,CAAC;AACxG,UAAM,MAAM,WAAW,UAAU,uBAAuB,oBAAoB,4BAA4B,OAAO,CAAC;AAAA,EACpH;AAAA,EACA,YAAY,SAAS,WAAW,SAAS,MAAM,GAAG,SAAS;AACvD,SAAK,MAAM,YAAY,SAAS,UAAU,OAAO;AAAA,EACrD;AAAA,EACA,YAAY,MAAM,MAAM,SAAS;AAC7B,WAAO,IAAI,4BAA4B,MAAM,MAAM,OAAO;AAAA,EAC9D;AAAA,EACA,cAAc,gBAAgB,CAAC,GAAG;AAC9B,UAAM,cAAc,aAAa;AACjC,QAAI,OAAO,cAAc,uBAAuB,aAAa;AACzD,WAAK,MAAM,sBAAsB,cAAc,kBAAkB;AAAA,IACrE;AAAA,EACJ;AAAA,EACA,sBAAsB,UAAU,MAAM;AAClC,WAAO,KAAK,MAAM,sBAAsB,OAAO;AAAA,EACnD;AACJ;;;ACjHA,SAAS,wBAAwB,OAAO;AACpC,SAAO;AAAA,IACH,GAAG;AAAA,IACH,UAAU,CAAC;AAAA,IACX,gBAAgB;AAAA,IAChB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,eAAe;AAAA,EACnB;AACJ;AACA,SAAS,WAAW,UAAU,YAAY;AACtC,MAAI,CAAC,WAAW,QAAQ;AACpB,WAAO;AAAA,EACX,WACS,WAAW,WAAW,UAAU;AACrC,WAAO;AAAA,EACX,OACK;AACD,WAAO,WAAW,UAAU,WAAW,MAAM;AAAA,EACjD;AACJ;AACA,SAAS,WAAW,MAAM,OAAO;AAC7B,SAAO,SAAS,SAAS,WAAW,MAAM,KAAK,KAAK,WAAW,OAAO,IAAI;AAC9E;AACA,IAAM,2BAAN,MAAM,0BAAyB;AAAA,EAC3B,IAAI,UAAU;AAAE,WAAO,KAAK,KAAK,QAAQ;AAAA,EAAS;AAAA,EAClD,IAAI,WAAW;AAAE,WAAO,KAAK,KAAK,SAAS,IAAI,UAAQ,IAAI,0BAAyB,IAAI,CAAC;AAAA,EAAG;AAAA,EAC5F,IAAI,QAAQ;AAAE,WAAO,KAAK,KAAK;AAAA,EAAO;AAAA,EACtC,IAAI,uBAAuB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAsB;AAAA,EACpE,IAAI,oBAAoB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAmB;AAAA,EAC9D,IAAI,cAAc;AAAE,WAAO,KAAK,KAAK;AAAA,EAAa;AAAA,EAClD,IAAI,YAAY;AAAE,WAAO,KAAK,KAAK;AAAA,EAAW;AAAA,EAC9C,IAAI,UAAU;AAAE,WAAO,KAAK,KAAK;AAAA,EAAS;AAAA,EAC1C,IAAI,aAAa;AAAE,WAAO,KAAK,KAAK;AAAA,EAAY;AAAA,EAChD,YAAY,MAAM;AACd,SAAK,OAAO;AAAA,EAChB;AACJ;AACA,IAAM,wBAAN,MAA4B;AAAA,EACxB,YAAY,UAAU,YAAY,yBAAyB;AACvD,SAAK,WAAW;AAChB,SAAK,aAAa;AAClB,SAAK,0BAA0B;AAC/B,SAAK,gBAAgB,oBAAI,IAAI;AAC7B,SAAK,aAAa,SAAS;AAAA,EAC/B;AAAA,EACA,eAAe,WAAW;AACtB,UAAM,eAAe,KAAK,SAAS,eAAe,SAAS;AAC3D,WAAO,EAAE,aAAa;AAAA,EAC1B;AAAA,EACA,cAAc,MAAM,OAAO,cAAc,QAAQ;AAC7C,SAAK,SAAS,cAAc,KAAK,WAAW,IAAI,IAAI,GAAG,OAAO,aAAa,cAAc,MAAM;AAAA,EACnG;AAAA,EACA,cAAc,SAAS,gBAAgB;AACnC,QAAI,QAAQ,MAAM;AACd,qBAAe,UAAU,IAAI,GAAG,UAAU,iBAAiB,QAAQ,eAAe,CAAC;AACnF,aAAO;AAAA,IACX,OACK;AACD,qBAAe,UAAU,OAAO,GAAG,UAAU,iBAAiB,QAAQ,eAAe,CAAC;AACtF,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,eAAe,MAAM,OAAO,cAAc,QAAQ;AAC9C,QAAI,IAAI;AACR,KAAC,MAAM,KAAK,KAAK,UAAU,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,KAAK,WAAW,IAAI,IAAI,GAAG,OAAO,aAAa,cAAc,MAAM;AAAA,EACnK;AAAA,EACA,gBAAgB,cAAc;AAC1B,SAAK,SAAS,gBAAgB,aAAa,YAAY;AAAA,EAC3D;AAAA,EACA,UAAU;AACN,SAAK,cAAc,MAAM;AAAA,EAC7B;AACJ;AACA,SAAS,YAAY,GAAG;AACpB,SAAO;AAAA,IACH,cAAc,EAAE;AAAA,IAChB,UAAU,EAAE,SAAS,IAAI,CAAAC,OAAKA,GAAE,OAAO;AAAA,EAC3C;AACJ;AACA,SAASC,kBAAiB,GAAG;AACzB,SAAO;AAAA,IACH,cAAc,EAAE;AAAA,IAChB,SAAS,EAAE,WAAW,EAAE,QAAQ;AAAA,IAChC,QAAQ,EAAE;AAAA,EACd;AACJ;AACA,IAAM,uCAAN,cAAmD,wBAAwB;AAAA,EACvE,YAAY,MAAM;AACd,UAAM,KAAK,SAAS,IAAI,UAAQ,KAAK,OAAO,CAAC;AAC7C,SAAK,OAAO;AAAA,EAChB;AACJ;AACA,SAAS,+BAA+B,MAAM;AAC1C,MAAI,gBAAgB,yBAAyB;AACzC,WAAO,IAAI,qCAAqC,IAAI;AAAA,EACxD;AACA,SAAO;AACX;AACA,IAAM,mCAAN,MAAuC;AAAA,EACnC,YAAY,KAAK;AACb,SAAK,MAAM;AAAA,EACf;AAAA,EACA,WAAW,MAAM;AACb,WAAO,KAAK,IAAI,WAAW,KAAK,OAAO;AAAA,EAC3C;AAAA,EACA,aAAa,OAAO,eAAe;AAC/B,QAAI,KAAK,IAAI,cAAc;AACvB,aAAO,KAAK,IAAI,aAAa,MAAM,IAAI,UAAQ,KAAK,OAAO,GAAG,aAAa;AAAA,IAC/E;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY,MAAM,eAAe;AAC7B,QAAI,IAAI;AACR,KAAC,MAAM,KAAK,KAAK,KAAK,iBAAiB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,+BAA+B,IAAI,GAAG,aAAa;AAAA,EAC3I;AAAA,EACA,WAAW,MAAM,YAAY,aAAa,eAAe,MAAM,MAAM;AACjE,WAAO,KAAK,IAAI,WAAW,+BAA+B,IAAI,GAAG,cAAc,WAAW,SAAS,aAAa,aAAa;AAAA,EACjI;AAAA,EACA,KAAK,MAAM,YAAY,aAAa,eAAe;AAC/C,SAAK,IAAI,KAAK,+BAA+B,IAAI,GAAG,cAAc,WAAW,SAAS,aAAa,aAAa;AAAA,EACpH;AAAA,EACA,UAAU,eAAe;AACrB,QAAI,IAAI;AACR,KAAC,MAAM,KAAK,KAAK,KAAK,eAAe,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,aAAa;AAAA,EACnG;AAAA,EACA,UAAU;AACN,SAAK,IAAI,QAAQ;AAAA,EACrB;AACJ;AACA,SAASC,qBAAoB,SAAS;AAClC,SAAO,WAAW;AAAA,IACd,GAAG;AAAA,IACH,mBAAmB;AAAA,IACnB,kBAAkB,QAAQ,oBAAoB;AAAA,MAC1C,MAAM,IAAI;AACN,eAAO,QAAQ,iBAAiB,MAAM,GAAG,OAAO;AAAA,MACpD;AAAA,IACJ;AAAA,IACA,KAAK,QAAQ,OAAO,IAAI,iCAAiC,QAAQ,GAAG;AAAA,IACpE,6BAA6B,QAAQ,+BAA+B;AAAA,MAChE,6BAA6B,GAAG;AAC5B,eAAO,QAAQ,4BAA4B,6BAA6B,EAAE,GAAG,GAAG,SAAS,EAAE,QAAQ,CAAC;AAAA,MACxG;AAAA,MACA,4BAA4B,GAAG;AAC3B,eAAO,QAAQ,4BAA4B,4BAA4B,EAAE,GAAG,GAAG,SAAS,EAAE,QAAQ,CAAC;AAAA,MACvG;AAAA,IACJ;AAAA,IACA,uBAAuB,QAAQ,yBAAyB;AAAA,MACpD,GAAG,QAAQ;AAAA,MACX,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,SAAS,QAAQ,sBAAsB,UAAU,CAAC,OAAO;AACrD,eAAO,QAAQ,sBAAsB,QAAQ,GAAG,OAAO;AAAA,MAC3D,IAAI,MAAM;AAAA,MACV,WAAW,QAAQ,sBAAsB,YAAY,CAAC,MAAM;AACxD,YAAI;AACJ,eAAO,CAAC,GAAG,KAAK,QAAQ,2BAA2B,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU,EAAE,OAAO;AAAA,MAC9G,IAAI;AAAA,MACJ,aAAa,GAAG;AACZ,eAAO,QAAQ,sBAAsB,aAAa,EAAE,OAAO;AAAA,MAC/D;AAAA,MACA,qBAAqB;AACjB,eAAO,QAAQ,sBAAsB,mBAAmB;AAAA,MAC5D;AAAA,MACA,eAAe,QAAQ,sBAAsB,gBAAgB,MAAM,QAAQ,sBAAsB,cAAc,IAAI,MAAM;AAAA,MACzH,cAAc,QAAQ,sBAAsB,iBAAiB,UAAQ;AACjE,eAAO,QAAQ,sBAAsB,aAAa,KAAK,OAAO;AAAA,MAClE;AAAA,MACA,uBAAuB,QAAQ,sBAAsB,0BAA0B,UAAQ;AACnF,eAAO,QAAQ,sBAAsB,sBAAsB,KAAK,OAAO;AAAA,MAC3E;AAAA,IACJ;AAAA,IACA,QAAQ,QAAQ,UAAU;AAAA,MACtB,OAAO,GAAG,kBAAkB;AACxB,eAAO,QAAQ,OAAO,OAAO,EAAE,SAAS,gBAAgB;AAAA,MAC5D;AAAA,IACJ;AAAA,IACA,iCAAiC,QAAQ,mCAAmC;AAAA,MACxE,GAAG,QAAQ;AAAA,MACX,2BAA2B,GAAG;AAC1B,eAAO,QAAQ,gCAAgC,2BAA2B,EAAE,OAAO;AAAA,MACvF;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,IACR,0BAA0B,OAAO,QAAQ,6BAA6B,cAAc,SAAa,OAAO,QAAQ,6BAA6B,aAAa,QAAQ,2BAA4B,OAAK,QAAQ,yBAAyB,EAAE,OAAO;AAAA,IAC7O,uBAAuB,OAAK;AACxB,UAAI,EAAE,eAAe,EAAE,OAAO;AAC1B,eAAO;AAAA,MACX,WACS,OAAO,QAAQ,0BAA0B,UAAU;AACxD,eAAO,QAAQ;AAAA,MACnB,WACS,OAAO,QAAQ,0BAA0B,aAAa;AAC3D,eAAO;AAAA,MACX,OACK;AACD,eAAO,QAAQ,sBAAsB,EAAE,OAAO;AAAA,MAClD;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,SAASC,KAAI,MAAM,IAAI;AACnB,KAAG,IAAI;AACP,OAAK,SAAS,QAAQ,WAASA,KAAI,OAAO,EAAE,CAAC;AACjD;AACO,IAAM,gBAAN,MAAoB;AAAA,EACvB,IAAI,cAAc;AAAE,WAAO,KAAK,KAAK;AAAA,EAAa;AAAA,EAClD,IAAI,mBAAmB;AAAE,WAAO,MAAM,IAAI,KAAK,KAAK,kBAAkB,WAAW;AAAA,EAAG;AAAA,EACpF,IAAI,uBAAuB;AAAE,WAAO,MAAM,IAAI,KAAK,KAAK,sBAAsB,WAAW;AAAA,EAAG;AAAA,EAC5F,IAAI,kBAAkB;AAAE,WAAO,MAAM,IAAI,KAAK,KAAK,iBAAiBF,iBAAgB;AAAA,EAAG;AAAA,EACvF,IAAI,YAAY;AAAE,WAAO,MAAM,IAAI,KAAK,KAAK,WAAWA,iBAAgB;AAAA,EAAG;AAAA,EAC3E,IAAI,aAAa;AAAE,WAAO,KAAK,KAAK;AAAA,EAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhD,IAAI,mBAAmB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAkB;AAAA,EAC5D,IAAI,2BAA2B;AAAE,WAAO,KAAK,KAAK;AAAA,EAA0B;AAAA,EAC5E,IAAI,2BAA2B;AAAE,WAAO,KAAK,KAAK;AAAA,EAA0B;AAAA,EAC5E,IAAI,eAAe;AAAE,WAAO,KAAK,KAAK;AAAA,EAAc;AAAA,EACpD,YAAY,MAAM,WAAW,UAAU,WAAW,YAAY,UAAU,CAAC,GAAG;AACxE,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,QAAQ,oBAAI,IAAI;AACrB,SAAK,yBAAyB,oBAAI,IAAI;AACtC,SAAK,kBAAkB,oBAAI,IAAI;AAC/B,SAAK,eAAe,IAAI,QAAQ;AAChC,SAAK,4BAA4B,IAAI,QAAQ;AAC7C,SAAK,aAAa,IAAI,WAAW,UAAQ,IAAI,yBAAyB,IAAI,CAAC;AAC3E,SAAK,cAAc,IAAI,gBAAgB;AACvC,SAAK,mBAAmB,QAAQ;AAChC,SAAK,2BAA2B,OAAO,QAAQ,6BAA6B,cAAc,QAAQ,QAAQ;AAC1G,SAAK,SAAS,QAAQ;AACtB,SAAK,0BAA0B,OAAK,QAAQ,oBAAqB,QAAQ,kBAAkB,CAAC,IAAI,+BAA+B,sBAAsB,+BAA+B,qBAAsB;AAC1M,SAAK,OAAO,KAAK,WAAW,MAAM,WAAW,UAAU,WAAW,OAAO;AACzE,SAAK,sBAAsB,KAAK,KAAK;AACrC,SAAK,OAAO,wBAAwB;AAAA,MAChC,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,sBAAsB;AAAA,IAC1B,CAAC;AACD,QAAI,KAAK,kBAAkB;AACvB,WAAK,OAAO;AAAA,QACR,GAAG,KAAK;AAAA,QACR,IAAI;AAAA,MACR;AAAA,IACJ;AACA,SAAK,MAAM,IAAI,MAAM,KAAK,IAAI;AAC9B,SAAK,KAAK,yBAAyB,KAAK,2BAA2B,MAAM,KAAK,WAAW;AAAA,EAC7F;AAAA,EACA,WAAW,MAAM,WAAW,UAAU,WAAW,SAAS;AACtD,UAAM,qBAAqB,IAAI,qBAAqB,QAAQ;AAC5D,UAAM,sBAAsB,UAAU,IAAI,OAAK,IAAI,sBAAsB,GAAG,KAAK,YAAY,KAAK,0BAA0B,KAAK,CAAC;AAClI,UAAM,oBAAoBC,qBAAoB,OAAO,KAAK,CAAC;AAC3D,WAAO,IAAI,WAAW,MAAM,WAAW,oBAAoB,qBAAqB,iBAAiB;AAAA,EACrG;AAAA,EACA,cAAc,UAAU,CAAC,GAAG;AACxB,SAAK,KAAK,cAAc,OAAO;AAAA,EACnC;AAAA;AAAA,EAEA,iBAAiB;AACb,WAAO,KAAK,KAAK,eAAe;AAAA,EACpC;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,UAAU,WAAW;AACrB,SAAK,KAAK,YAAY;AAAA,EAC1B;AAAA,EACA,IAAI,eAAe;AACf,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,IAAI,eAAe;AACf,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,WAAW;AACP,SAAK,KAAK,SAAS;AAAA,EACvB;AAAA,EACA,OAAO,QAAQ,OAAO;AAClB,SAAK,KAAK,OAAO,QAAQ,KAAK;AAAA,EAClC;AAAA,EACA,MAAM,QAAQ;AACV,SAAK,KAAK,MAAM,MAAM;AAAA,EAC1B;AAAA;AAAA,EAEA,WAAW;AACP,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,MAAM,SAAS,OAAO,WAAW;AAC7B,SAAK,gBAAgB,QAAQ,aAAW,QAAQ,OAAO,CAAC;AACxD,SAAK,gBAAgB,MAAM;AAC3B,SAAK,KAAK,UAAU;AACpB,UAAM,mBAAmB,aAAa,EAAE,WAAW,OAAO,CAAC,GAAG,WAAW,CAAC,EAAE;AAC5E,UAAM,KAAK,gBAAgB,OAAO,MAAM,OAAO,gBAAgB;AAC/D,QAAI,kBAAkB;AAClB,WAAK,KAAK,SAAS,iBAAiB,KAAK;AACzC,WAAK,KAAK,aAAa,iBAAiB,SAAS;AAAA,IACrD;AACA,QAAI,aAAa,OAAO,UAAU,cAAc,UAAU;AACtD,WAAK,YAAY,UAAU;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,MAAM,gBAAgB,UAAU,KAAK,KAAK,SAAS,YAAY,MAAM,WAAW,OAAO,kBAAkB,SAAS;AAC9G,QAAI,OAAO,KAAK,KAAK,YAAY,aAAa;AAC1C,YAAM,IAAI,UAAU,KAAK,MAAM,oBAAoB;AAAA,IACvD;AACA,QAAI,KAAK,KAAK,gBAAgB;AAC1B,YAAM,KAAK,KAAK;AAChB,YAAM,MAAM,UAAU,KAAK,aAAa,KAAK;AAAA,IACjD;AACA,UAAM,OAAO,KAAK,YAAY,OAAO;AACrC,UAAM,KAAK,qBAAqB,MAAM,WAAW,kBAAkB,OAAO;AAC1E,QAAI,UAAU;AACV,UAAI;AACA,aAAK,KAAK,SAAS,IAAI;AAAA,MAC3B,SACO,IAAI;AAAA,MAGX;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,SAAS,SAAS;AACd,QAAI,YAAY,UAAa,YAAY,KAAK,KAAK,SAAS;AACxD,WAAK,KAAK,SAAS;AACnB;AAAA,IACJ;AACA,UAAM,OAAO,KAAK,YAAY,OAAO;AACrC,SAAK,KAAK,SAAS,IAAI;AAAA,EAC3B;AAAA;AAAA,EAEA,QAAQ,UAAU,KAAK,KAAK,SAAS;AACjC,UAAM,WAAW,KAAK,YAAY,OAAO;AACzC,UAAM,OAAO,KAAK,KAAK,QAAQ,aAAa,KAAK,OAAO,OAAO,QAAQ;AACvE,WAAO,KAAK,WAAW,IAAI,IAAI;AAAA,EACnC;AAAA,EACA,SAAS,SAAS,YAAY,OAAO;AACjC,UAAM,OAAO,KAAK,YAAY,OAAO;AACrC,WAAO,KAAK,KAAK,SAAS,SAAS,KAAK,OAAO,OAAO,MAAM,SAAS;AAAA,EACzE;AAAA,EACA,MAAM,OAAO,SAAS,YAAY,OAAO;AACrC,QAAI,OAAO,KAAK,KAAK,YAAY,aAAa;AAC1C,YAAM,IAAI,UAAU,KAAK,MAAM,oBAAoB;AAAA,IACvD;AACA,QAAI,KAAK,KAAK,gBAAgB;AAC1B,YAAM,KAAK,KAAK;AAChB,YAAM,MAAM,UAAU,KAAK,aAAa,KAAK;AAAA,IACjD;AACA,UAAM,OAAO,KAAK,YAAY,OAAO;AACrC,QAAI,KAAK,KAAK,WAAW,IAAI,KAAK,CAAC,KAAK,KAAK,cAAc,IAAI,GAAG;AAC9D,aAAO;AAAA,IACX;AACA,QAAI,KAAK,gBAAgB;AACrB,YAAM,KAAK,KAAK;AAChB,YAAM,MAAM,UAAU,KAAK,aAAa,KAAK;AAAA,IACjD;AACA,QAAI,SAAS,KAAK,QAAQ,CAAC,KAAK,kBAAkB,CAAC,KAAK,KAAK,YAAY,IAAI,GAAG;AAC5E,aAAO;AAAA,IACX;AACA,UAAM,SAAS,KAAK,KAAK,OAAO,SAAS,KAAK,OAAO,OAAO,MAAM,SAAS;AAC3E,QAAI,KAAK,gBAAgB;AACrB,YAAM,KAAK,KAAK;AAChB,YAAM,MAAM,UAAU,KAAK,aAAa,KAAK;AAAA,IACjD;AACA,WAAO;AAAA,EACX;AAAA,EACA,aAAa,UAAU,cAAc;AACjC,UAAM,QAAQ,SAAS,IAAI,OAAK,KAAK,YAAY,CAAC,CAAC;AACnD,SAAK,KAAK,aAAa,OAAO,YAAY;AAAA,EAC9C;AAAA,EACA,eAAe;AACX,UAAM,QAAQ,KAAK,KAAK,aAAa;AACrC,WAAO,MAAM,IAAI,OAAK,EAAE,OAAO;AAAA,EACnC;AAAA,EACA,SAAS,UAAU,cAAc;AAC7B,UAAM,QAAQ,SAAS,IAAI,OAAK,KAAK,YAAY,CAAC,CAAC;AACnD,SAAK,KAAK,SAAS,OAAO,YAAY;AAAA,EAC1C;AAAA,EACA,WAAW;AACP,UAAM,QAAQ,KAAK,KAAK,SAAS;AACjC,WAAO,MAAM,IAAI,OAAK,EAAE,OAAO;AAAA,EACnC;AAAA,EACA,OAAO,SAAS,aAAa;AACzB,SAAK,KAAK,OAAO,KAAK,YAAY,OAAO,GAAG,WAAW;AAAA,EAC3D;AAAA;AAAA,EAEA,iBAAiB,SAAS;AACtB,UAAM,OAAO,KAAK,KAAK,iBAAiB,KAAK,YAAY,OAAO,CAAC;AACjE,WAAQ,QAAQ,KAAK;AAAA,EACzB;AAAA,EACA,qBAAqB,UAAU,KAAK,KAAK,SAAS;AAC9C,UAAM,WAAW,KAAK,YAAY,OAAO;AACzC,UAAM,OAAO,KAAK,KAAK,qBAAqB,aAAa,KAAK,OAAO,OAAO,QAAQ;AACpF,WAAQ,QAAQ,KAAK;AAAA,EACzB;AAAA;AAAA,EAEA,YAAY,SAAS;AACjB,UAAM,OAAO,KAAK,MAAM,IAAK,YAAY,KAAK,KAAK,UAAU,OAAO,OAAQ;AAC5E,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,UAAU,KAAK,MAAM,6BAA6B,OAAO,EAAE;AAAA,IACzE;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,qBAAqB,MAAM,WAAW,kBAAkB,SAAS;AACnE,UAAM,KAAK,YAAY,MAAM,WAAW,gBAAgB;AACxD,SAAK,OAAO,MAAM,kBAAkB,OAAO;AAAA,EAC/C;AAAA,EACA,MAAM,YAAY,MAAM,WAAW,kBAAkB;AACjD,QAAI;AACJ,SAAK,uBAAuB,QAAQ,CAAC,gBAAgB,gBAAgB;AACjE,UAAI,CAAC,UAAU,WAAW,aAAa,IAAI,GAAG;AAC1C,iBAAS,eAAe,KAAK,MAAM,KAAK,YAAY,MAAM,WAAW,gBAAgB,CAAC;AAAA,MAC1F;AAAA,IACJ,CAAC;AACD,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AACA,QAAI,SAAS,KAAK,MAAM;AACpB,YAAM,WAAW,KAAK,KAAK,QAAQ,IAAI;AACvC,UAAI,SAAS,WAAW;AACpB,aAAK,cAAc,CAAC,CAAC,KAAK,WAAW,YAAY,KAAK,OAAO;AAC7D,aAAK,QAAQ;AACb;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,KAAK,iBAAiB,MAAM,WAAW,gBAAgB;AAAA,EAClE;AAAA,EACA,MAAM,iBAAiB,MAAM,WAAW,kBAAkB;AACtD,QAAI;AACJ,SAAK,iBAAiB,IAAI,QAAQ,OAAK,OAAO,CAAC;AAC/C,SAAK,uBAAuB,IAAI,MAAM,KAAK,cAAc;AACzD,SAAK,eAAe,QAAQ,MAAM;AAC9B,WAAK,iBAAiB;AACtB,WAAK,uBAAuB,OAAO,IAAI;AAAA,IAC3C,CAAC;AACD,QAAI;AACA,YAAM,oBAAoB,MAAM,KAAK,cAAc,MAAM,WAAW,gBAAgB;AACpF,WAAK,QAAQ;AACb,YAAM,SAAS,QAAQ,kBAAkB,IAAI,WAAS,KAAK,iBAAiB,OAAO,WAAW,gBAAgB,CAAC,CAAC;AAAA,IACpH,UACA;AACI,WAAK;AAAA,IACT;AAAA,EACJ;AAAA,EACA,MAAM,cAAc,MAAM,WAAW,kBAAkB;AACnD,SAAK,cAAc,CAAC,CAAC,KAAK,WAAW,YAAY,KAAK,OAAO;AAC7D,QAAI;AACJ,QAAI,CAAC,KAAK,aAAa;AACnB,wBAAkB,QAAQ,QAAQ,SAAS,MAAM,CAAC;AAAA,IACtD,OACK;AACD,YAAM,WAAW,KAAK,cAAc,IAAI;AACxC,UAAI,WAAW,QAAQ,GAAG;AACtB,0BAAkB,QAAQ,QAAQ,QAAQ;AAAA,MAC9C,OACK;AACD,cAAM,cAAc,QAAQ,GAAG;AAC/B,oBAAY,KAAK,MAAM;AACnB,eAAK,OAAO;AACZ,eAAK,0BAA0B,KAAK,IAAI;AAAA,QAC5C,GAAG,OAAK,IAAI;AACZ,0BAAkB,SAAS,QAAQ,MAAM,YAAY,OAAO,CAAC;AAAA,MACjE;AAAA,IACJ;AACA,QAAI;AACA,YAAM,WAAW,MAAM;AACvB,aAAO,KAAK,YAAY,MAAM,UAAU,WAAW,gBAAgB;AAAA,IACvE,SACO,KAAK;AACR,UAAI,SAAS,KAAK,QAAQ,KAAK,KAAK,WAAW,IAAI,GAAG;AAClD,aAAK,KAAK,SAAS,IAAI;AAAA,MAC3B;AACA,UAAI,oBAAoB,GAAG,GAAG;AAC1B,eAAO,CAAC;AAAA,MACZ;AACA,YAAM;AAAA,IACV,UACA;AACI,UAAI,KAAK,MAAM;AACX,aAAK,OAAO;AACZ,aAAK,0BAA0B,KAAK,IAAI;AAAA,MAC5C;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,cAAc,MAAM;AAChB,QAAI,SAAS,KAAK,gBAAgB,IAAI,IAAI;AAC1C,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AACA,UAAM,WAAW,KAAK,WAAW,YAAY,KAAK,OAAO;AACzD,QAAI,WAAW,QAAQ,GAAG;AACtB,aAAO,KAAK,gBAAgB,QAAQ;AAAA,IACxC,OACK;AACD,eAAS,wBAAwB,YAAY,KAAK,gBAAgB,MAAM,QAAQ,CAAC;AACjF,WAAK,gBAAgB,IAAI,MAAM,MAAM;AACrC,aAAO,OAAO,QAAQ,MAAM;AAAE,aAAK,gBAAgB,OAAO,IAAI;AAAA,MAAG,CAAC;AAAA,IACtE;AAAA,EACJ;AAAA,EACA,0BAA0B,EAAE,MAAM,KAAK,GAAG;AACtC,QAAI,KAAK,YAAY,MAAM;AACvB;AAAA,IACJ;AACA,QAAI,CAAC,KAAK,aAAa,KAAK,QAAQ,OAAO;AACvC,UAAI,MAAM;AACN,aAAK,SAAS,KAAK,QAAQ,OAAO;AAAA,MACtC,OACK;AACD,aAAK,qBAAqB,KAAK,SAAS,KAAK,EACxC,MAAM,iBAAiB;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,YAAY,MAAM,0BAA0B,WAAW,kBAAkB;AACrE,UAAM,mBAAmB,CAAC,GAAG,wBAAwB;AAErD,QAAI,KAAK,SAAS,WAAW,KAAK,iBAAiB,WAAW,GAAG;AAC7D,aAAO,CAAC;AAAA,IACZ;AACA,UAAM,gBAAgB,oBAAI,IAAI;AAC9B,UAAM,wBAAwB,oBAAI,IAAI;AACtC,eAAW,SAAS,KAAK,UAAU;AAC/B,oBAAc,IAAI,MAAM,SAAS,KAAK;AACtC,UAAI,KAAK,kBAAkB;AACvB,8BAAsB,IAAI,MAAM,IAAI,EAAE,MAAM,OAAO,WAAW,KAAK,KAAK,WAAW,KAAK,KAAK,KAAK,KAAK,YAAY,KAAK,EAAE,CAAC;AAAA,MAC/H;AAAA,IACJ;AACA,UAAM,oBAAoB,CAAC;AAC3B,UAAM,WAAW,iBAAiB,IAAI,aAAW;AAC7C,YAAM,cAAc,CAAC,CAAC,KAAK,WAAW,YAAY,OAAO;AACzD,UAAI,CAAC,KAAK,kBAAkB;AACxB,cAAM,oBAAoB,wBAAwB,EAAE,SAAS,QAAQ,MAAM,aAAa,sBAAsB,KAAK,wBAAwB,OAAO,EAAE,CAAC;AACrJ,YAAI,eAAe,kBAAkB,yBAAyB,+BAA+B,oBAAoB;AAC7G,4BAAkB,KAAK,iBAAiB;AAAA,QAC5C;AACA,eAAO;AAAA,MACX;AACA,YAAM,KAAK,KAAK,iBAAiB,MAAM,OAAO,EAAE,SAAS;AACzD,YAAM,SAAS,sBAAsB,IAAI,EAAE;AAC3C,UAAI,QAAQ;AACR,cAAM,oBAAoB,OAAO;AACjC,sBAAc,OAAO,kBAAkB,OAAO;AAC9C,aAAK,MAAM,OAAO,kBAAkB,OAAO;AAC3C,aAAK,MAAM,IAAI,SAAS,iBAAiB;AACzC,0BAAkB,UAAU;AAC5B,0BAAkB,cAAc;AAChC,YAAI,WAAW;AACX,cAAI,OAAO,WAAW;AAClB,8BAAkB,SAAS,QAAQ,CAAAE,UAAQD,KAAIC,OAAM,CAAAA,UAAQ,KAAK,MAAM,OAAOA,MAAK,OAAO,CAAC,CAAC;AAC7F,8BAAkB,SAAS,OAAO,GAAG,kBAAkB,SAAS,MAAM;AACtE,8BAAkB,QAAQ;AAAA,UAC9B,OACK;AACD,8BAAkB,KAAK,iBAAiB;AAAA,UAC5C;AAAA,QACJ,WACS,eAAe,CAAC,OAAO,WAAW;AACvC,4BAAkB,KAAK,iBAAiB;AAAA,QAC5C;AACA,eAAO;AAAA,MACX;AACA,YAAM,yBAAyB,wBAAwB,EAAE,SAAS,QAAQ,MAAM,IAAI,aAAa,sBAAsB,KAAK,wBAAwB,OAAO,EAAE,CAAC;AAC9J,UAAI,oBAAoB,iBAAiB,UAAU,SAAS,iBAAiB,UAAU,MAAM,QAAQ,EAAE,IAAI,IAAI;AAC3G,yBAAiB,MAAM,KAAK,sBAAsB;AAAA,MACtD;AACA,UAAI,oBAAoB,iBAAiB,UAAU,aAAa,iBAAiB,UAAU,UAAU,QAAQ,EAAE,IAAI,IAAI;AACnH,yBAAiB,UAAU,KAAK,sBAAsB;AAAA,MAC1D;AACA,UAAI,oBAAoB,iBAAiB,UAAU,YAAY,iBAAiB,UAAU,SAAS,QAAQ,EAAE,IAAI,IAAI;AACjH,0BAAkB,KAAK,sBAAsB;AAAA,MACjD,WACS,eAAe,uBAAuB,yBAAyB,+BAA+B,oBAAoB;AACvH,0BAAkB,KAAK,sBAAsB;AAAA,MACjD;AACA,aAAO;AAAA,IACX,CAAC;AACD,eAAWA,SAAQ,cAAc,OAAO,GAAG;AACvC,MAAAD,KAAIC,OAAM,CAAAA,UAAQ,KAAK,MAAM,OAAOA,MAAK,OAAO,CAAC;AAAA,IACrD;AACA,eAAW,SAAS,UAAU;AAC1B,WAAK,MAAM,IAAI,MAAM,SAAS,KAAK;AAAA,IACvC;AACA,SAAK,SAAS,OAAO,GAAG,KAAK,SAAS,QAAQ,GAAG,QAAQ;AAEzD,QAAI,SAAS,KAAK,QAAQ,KAAK,4BAA4B,SAAS,WAAW,KAAK,kBAAkB,WAAW,GAAG;AAChH,eAAS,CAAC,EAAE,gBAAgB;AAC5B,wBAAkB,KAAK,SAAS,CAAC,CAAC;AAAA,IACtC;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,MAAM,kBAAkB,SAAS;AACpC,UAAM,WAAW,KAAK,SAAS,IAAI,CAAAA,UAAQ,KAAK,cAAcA,OAAM,gBAAgB,CAAC;AACrF,UAAM,oBAAoB,WAAW;AAAA,MACjC,GAAG;AAAA,MACH,sBAAsB,QAAQ,wBAAwB;AAAA,QAClD,MAAMA,OAAM;AACR,iBAAO,QAAQ,qBAAqB,MAAMA,MAAK,OAAO;AAAA,QAC1D;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,KAAK,YAAY,SAAS,KAAK,OAAO,OAAO,MAAM,UAAU,iBAAiB;AACnF,QAAI,SAAS,KAAK,MAAM;AACpB,WAAK,KAAK,eAAe,MAAM,KAAK,WAAW;AAAA,IACnD;AACA,SAAK,aAAa,KAAK;AAAA,EAC3B;AAAA,EACA,cAAc,MAAM,kBAAkB;AAClC,QAAI,KAAK,OAAO;AACZ,aAAO;AAAA,QACH,SAAS;AAAA,QACT,aAAa,KAAK;AAAA,QAClB,WAAW;AAAA,MACf;AAAA,IACJ;AACA,QAAI;AACJ,QAAI,oBAAoB,iBAAiB,UAAU,YAAY,KAAK,MAAM,iBAAiB,UAAU,SAAS,QAAQ,KAAK,EAAE,IAAI,IAAI;AACjI,kBAAY;AAAA,IAChB,WACS,KAAK,eAAe;AACzB,kBAAY;AACZ,WAAK,gBAAgB;AAAA,IACzB,OACK;AACD,kBAAY,KAAK;AAAA,IACrB;AACA,WAAO;AAAA,MACH,SAAS;AAAA,MACT,UAAU,KAAK,cAAc,SAAS,IAAI,KAAK,UAAU,WAAS,KAAK,cAAc,OAAO,gBAAgB,CAAC,IAAI,CAAC;AAAA,MAClH,aAAa,KAAK;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gBAAgB,UAAU;AACtB,QAAI,KAAK,QAAQ;AACb,iBAAW,CAAC,GAAG,QAAQ,EAAE,KAAK,KAAK,OAAO,QAAQ,KAAK,KAAK,MAAM,CAAC;AAAA,IACvE;AACA,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AACN,SAAK,YAAY,QAAQ;AACzB,SAAK,KAAK,QAAQ;AAAA,EACtB;AACJ;AACA,IAAM,uCAAN,MAAM,sCAAqC;AAAA,EACvC,IAAI,UAAU;AACV,WAAO;AAAA,MACH,UAAU,KAAK,KAAK,QAAQ,SAAS,IAAI,OAAK,EAAE,OAAO;AAAA,MACvD,gBAAgB,KAAK,KAAK,QAAQ;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,IAAI,WAAW;AAAE,WAAO,KAAK,KAAK,SAAS,IAAI,UAAQ,IAAI,sCAAqC,IAAI,CAAC;AAAA,EAAG;AAAA,EACxG,IAAI,QAAQ;AAAE,WAAO,KAAK,KAAK;AAAA,EAAO;AAAA,EACtC,IAAI,uBAAuB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAsB;AAAA,EACpE,IAAI,oBAAoB;AAAE,WAAO,KAAK,KAAK;AAAA,EAAmB;AAAA,EAC9D,IAAI,cAAc;AAAE,WAAO,KAAK,KAAK;AAAA,EAAa;AAAA,EAClD,IAAI,YAAY;AAAE,WAAO,KAAK,KAAK;AAAA,EAAW;AAAA,EAC9C,IAAI,UAAU;AAAE,WAAO,KAAK,KAAK;AAAA,EAAS;AAAA,EAC1C,IAAI,aAAa;AAAE,WAAO,KAAK,KAAK;AAAA,EAAY;AAAA,EAChD,YAAY,MAAM;AACd,SAAK,OAAO;AAAA,EAChB;AACJ;AACA,IAAM,oCAAN,MAAwC;AAAA,EACpC,YAAY,UAAU,YAAY,gCAAgC,yBAAyB;AACvF,SAAK,WAAW;AAChB,SAAK,aAAa;AAClB,SAAK,iCAAiC;AACtC,SAAK,0BAA0B;AAC/B,SAAK,gBAAgB,oBAAI,IAAI;AAC7B,SAAK,cAAc,CAAC;AACpB,SAAK,aAAa,SAAS;AAAA,EAC/B;AAAA,EACA,eAAe,WAAW;AACtB,UAAM,eAAe,KAAK,SAAS,eAAe,SAAS;AAC3D,WAAO,EAAE,aAAa;AAAA,EAC1B;AAAA,EACA,cAAc,MAAM,OAAO,cAAc,QAAQ;AAC7C,SAAK,SAAS,cAAc,KAAK,WAAW,IAAI,IAAI,GAAG,OAAO,aAAa,cAAc,MAAM;AAAA,EACnG;AAAA,EACA,yBAAyB,MAAM,OAAO,cAAc,QAAQ;AACxD,SAAK,SAAS,yBAAyB,KAAK,+BAA+B,EAAE,IAAI,IAAI,GAAG,OAAO,aAAa,cAAc,MAAM;AAAA,EACpI;AAAA,EACA,cAAc,SAAS,gBAAgB;AACnC,QAAI,QAAQ,MAAM;AACd,qBAAe,UAAU,IAAI,GAAG,UAAU,iBAAiB,QAAQ,eAAe,CAAC;AACnF,aAAO;AAAA,IACX,OACK;AACD,qBAAe,UAAU,OAAO,GAAG,UAAU,iBAAiB,QAAQ,eAAe,CAAC;AACtF,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,eAAe,MAAM,OAAO,cAAc,QAAQ;AAC9C,QAAI,IAAI;AACR,KAAC,MAAM,KAAK,KAAK,UAAU,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,KAAK,WAAW,IAAI,IAAI,GAAG,OAAO,aAAa,cAAc,MAAM;AAAA,EACnK;AAAA,EACA,0BAA0B,MAAM,OAAO,cAAc,QAAQ;AACzD,QAAI,IAAI;AACR,KAAC,MAAM,KAAK,KAAK,UAAU,+BAA+B,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,IAAI,KAAK,+BAA+B,EAAE,IAAI,IAAI,GAAG,OAAO,aAAa,cAAc,MAAM;AAAA,EACpM;AAAA,EACA,gBAAgB,cAAc;AAC1B,SAAK,SAAS,gBAAgB,aAAa,YAAY;AAAA,EAC3D;AAAA,EACA,UAAU;AACN,SAAK,cAAc,MAAM;AACzB,SAAK,cAAc,QAAQ,KAAK,WAAW;AAAA,EAC/C;AACJ;AACA,SAAS,gCAAgC,SAAS;AAC9C,QAAM,oBAAoB,WAAWF,qBAAoB,OAAO;AAChE,SAAO,qBAAqB;AAAA,IACxB,GAAG;AAAA,IACH,iCAAiC,kBAAkB,mCAAmC;AAAA,MAClF,GAAG,kBAAkB;AAAA,MACrB,yCAAyC,KAAK;AAC1C,eAAO,QAAQ,gCAAgC,yCAAyC,IAAI,IAAI,OAAK,EAAE,OAAO,CAAC;AAAA,MACnH;AAAA,IACJ;AAAA,EACJ;AACJ;AACO,IAAM,4BAAN,cAAwC,cAAc;AAAA,EACzD,YAAY,MAAM,WAAW,iBAAiB,qBAAqB,WAAW,YAAY,UAAU,CAAC,GAAG;AACpG,UAAM,MAAM,WAAW,iBAAiB,WAAW,YAAY,OAAO;AACtE,SAAK,sBAAsB;AAC3B,SAAK,yBAAyB,IAAI,WAAW,UAAQ,IAAI,qCAAqC,IAAI,CAAC;AACnG,SAAK,SAAS,QAAQ;AAAA,EAC1B;AAAA,EACA,WAAW,MAAM,WAAW,UAAU,WAAW,SAAS;AACtD,UAAM,qBAAqB,IAAI,qBAAqB,QAAQ;AAC5D,UAAM,sBAAsB,UAAU,IAAI,OAAK,IAAI,kCAAkC,GAAG,KAAK,YAAY,MAAM,KAAK,wBAAwB,KAAK,0BAA0B,KAAK,CAAC;AACjL,UAAM,oBAAoB,gCAAgC,OAAO,KAAK,CAAC;AACvE,WAAO,IAAI,uBAAuB,MAAM,WAAW,oBAAoB,qBAAqB,iBAAiB;AAAA,EACjH;AAAA,EACA,cAAc,MAAM,kBAAkB;AAClC,WAAO;AAAA,MACH,gBAAgB,KAAK,oBAAoB,iBAAiB,KAAK,OAAO;AAAA,MACtE,GAAG,MAAM,cAAc,MAAM,gBAAgB;AAAA,IACjD;AAAA,EACJ;AAAA,EACA,cAAc,UAAU,CAAC,GAAG;AACxB,SAAK,KAAK,cAAc,OAAO;AAAA,EACnC;AAAA,EACA,OAAO,MAAM,kBAAkB;AAC3B,QAAI,CAAC,KAAK,kBAAkB;AACxB,aAAO,MAAM,OAAO,MAAM,gBAAgB;AAAA,IAC9C;AAIA,UAAM,QAAQ,CAAC,YAAY,KAAK,iBAAiB,MAAM,OAAO,EAAE,SAAS;AACzE,UAAM,qBAAqB,CAAC,UAAU;AAClC,YAAM,SAAS,oBAAI,IAAI;AACvB,iBAAWE,SAAQ,OAAO;AACtB,cAAM,iBAAiB,KAAK,KAAK,sBAAsBA,UAAS,KAAK,OAAO,OAAOA,KAAI;AACvF,YAAI,CAAC,eAAe,SAAS;AACzB;AAAA,QACJ;AACA,mBAAWA,SAAQ,eAAe,QAAQ,UAAU;AAChD,iBAAO,IAAI,MAAMA,MAAK,OAAO,CAAC;AAAA,QAClC;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,UAAM,eAAe,mBAAmB,KAAK,KAAK,aAAa,CAAC;AAChE,UAAM,WAAW,mBAAmB,KAAK,KAAK,SAAS,CAAC;AACxD,UAAM,OAAO,MAAM,gBAAgB;AACnC,UAAM,YAAY,KAAK,aAAa;AACpC,QAAI,qBAAqB;AACzB,UAAM,QAAQ,KAAK,SAAS;AAC5B,QAAI,iBAAiB;AACrB,UAAM,QAAQ,CAACA,UAAS;AACpB,YAAM,iBAAiBA,MAAK;AAC5B,UAAI,gBAAgB;AAChB,iBAAS,IAAI,GAAG,IAAI,eAAe,SAAS,QAAQ,KAAK;AACrD,gBAAM,KAAK,MAAM,eAAe,SAAS,CAAC,EAAE,OAAO;AACnD,gBAAM,UAAU,eAAe,SAAS,eAAe,SAAS,SAAS,CAAC,EAAE;AAE5E,cAAI,aAAa,IAAI,EAAE,KAAK,UAAU,QAAQ,OAAO,MAAM,IAAI;AAC3D,sBAAU,KAAK,OAAO;AACtB,iCAAqB;AAAA,UACzB;AACA,cAAI,SAAS,IAAI,EAAE,KAAK,MAAM,QAAQ,OAAO,MAAM,IAAI;AACnD,kBAAM,KAAK,OAAO;AAClB,6BAAiB;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AACA,MAAAA,MAAK,SAAS,QAAQ,KAAK;AAAA,IAC/B;AACA,UAAM,KAAK,KAAK,sBAAsB,SAAS,KAAK,OAAO,OAAO,IAAI,CAAC;AACvE,QAAI,oBAAoB;AACpB,WAAK,aAAa,SAAS;AAAA,IAC/B;AACA,QAAI,gBAAgB;AAChB,WAAK,SAAS,KAAK;AAAA,IACvB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB,UAAU;AACtB,QAAI,KAAK,QAAQ;AACb,iBAAW,SAAS,OAAO,UAAU,OAAK;AACtC,cAAM,SAAS,KAAK,OAAO;AAAA,UAAO;AAAA,UAAG;AAAA;AAAA,QAA8B;AACnE,cAAM,aAAa,cAAc,MAAM;AACvC,YAAI,eAAe,GAAgC;AAC/C,gBAAM,IAAI,MAAM,wEAAwE;AAAA,QAC5F;AACA,eAAO,eAAe;AAAA,MAC1B,CAAC;AAAA,IACL;AACA,WAAO,MAAM,gBAAgB,QAAQ;AAAA,EACzC;AACJ;AACA,SAAS,cAAc,cAAc;AACjC,MAAI,OAAO,iBAAiB,WAAW;AACnC,WAAO,eAAe,IAAiC;AAAA,EAC3D,WACS,eAAe,YAAY,GAAG;AACnC,WAAO,gBAAgB,aAAa,UAAU;AAAA,EAClD,OACK;AACD,WAAO,gBAAgB,YAAY;AAAA,EACvC;AACJ;;;ACt0BO,IAAM,WAAN,cAAuB,aAAa;AAAA,EACvC,YAAY,MAAM,WAAW,UAAU,WAAW,YAAY,UAAU,CAAC,GAAG;AACxE,UAAM,MAAM,WAAW,UAAU,WAAW,OAAO;AACnD,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,YAAY,MAAM,MAAM,SAAS;AAC7B,WAAO,IAAI,gBAAgB,MAAM,MAAM,OAAO;AAAA,EAClD;AACJ;;;ACRA,IAAI;AAEJ,IAAM,eAAe,WAAW;AAChC,IAAI,OAAO,iBAAiB,eAAe,OAAO,aAAa,YAAY,aAAa;AACpF,QAAM,gBAAgB,aAAa,QAAQ,cAAc;AACzD,MAAI,eAAe;AACf,cAAU,cAAc;AAAA,EAC5B,OACK;AACD,UAAM,IAAI,MAAM,uEAAuE;AAAA,EAC3F;AACJ,WAES,WAAW,wBAAwB,WAAW,sBAAsB;AAEzE,YAAU,WAAW;AAErB,MAAI,IAAI,YAAY,GAAG;AACnB,WAAO,OAAO,SAAS;AAAA,MACnB,WAAW,GAAG,QAAQ,SAAS;AAAA,MAC/B,UAAU,GAAG,QAAQ,QAAQ;AAAA,MAC7B,gBAAgB,GAAG,QAAQ,cAAc;AAAA,MACzC,sBAAsB,QAAQ,uBAAuB,GAAG,QAAQ,oBAAoB,SAAS;AAAA,IACjG,CAAC;AAAA,EACL;AAIA,MAAI,CAAC,QAAQ,SAAS;AAClB,UAAM,MAAM,WAAW;AACvB,WAAO,OAAO,SAAS;AAAA,MACnB,SAAS,IAAI;AAAA,IACjB,CAAC;AAAA,EACL;AACJ,OAEK;AAED,YAAU;AAAA;AAAA,EAAyC;AAEnD,MAAI,OAAO,KAAK,OAAO,EAAE,WAAW,GAAG;AACnC,WAAO,OAAO,SAAS;AAAA,MACnB,SAAS;AAAA,MACT,WAAW;AAAA,MACX,UAAU;AAAA,MACV,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,kBAAkB;AAAA,IACtB,CAAC;AAAA,EACL;AACJ;AAIA,IAAO,kBAAQ;;;AC9Df,IAAIC,cAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AACA,IAAI,UAAoC,SAAU,YAAY,WAAW;AACrE,SAAO,SAAU,QAAQ,KAAK;AAAE,cAAU,QAAQ,KAAK,UAAU;AAAA,EAAG;AACxE;AAsBO,IAAM,eAAe,gBAAgB,aAAa;AAClD,IAAM,cAAN,MAAkB;AAAA,EACrB,IAAI,kBAAkB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,cAAc;AACV,SAAK,cAAc,IAAI,gBAAgB;AACvC,SAAK,QAAQ,CAAC;AACd,SAAK,qBAAqB;AAC1B,SAAK,6BAA6B;AAAA,EACtC;AAAA,EACA,mBAAmB,QAAQ;AACvB,QAAI,IAAI;AACR,QAAI,WAAW,KAAK,oBAAoB;AACpC;AAAA,IACJ;AACA,KAAC,KAAK,KAAK,wBAAwB,QAAQ,OAAO,SAAS,SAAS,GAAG,eAAe,EAAE,UAAU,OAAO,cAAc;AACvH,SAAK,qBAAqB;AAC1B,KAAC,KAAK,KAAK,wBAAwB,QAAQ,OAAO,SAAS,SAAS,GAAG,eAAe,EAAE,UAAU,IAAI,cAAc;AAAA,EACxH;AAAA,EACA,SAAS,QAAQ,kBAAkB;AAC/B,QAAI,CAAC,KAAK,4BAA4B;AAClC,WAAK,6BAA6B;AAElC,YAAM,kBAAkB,IAAI,uBAAuB,iBAAiB,GAAG,EAAE;AACzE,sBAAgB,MAAM,iBAAiB;AAAA,IAC3C;AACA,QAAI,KAAK,MAAM,KAAK,OAAK,EAAE,WAAW,MAAM,GAAG;AAC3C,YAAM,IAAI,MAAM,gDAAgD;AAAA,IACpE;AAEA,UAAM,iBAAiB,EAAE,QAAQ,iBAAiB;AAClD,SAAK,MAAM,KAAK,cAAc;AAE9B,QAAI,gBAAgB,OAAO,eAAe,CAAC,GAAG;AAC1C,WAAK,mBAAmB,MAAM;AAAA,IAClC;AACA,WAAO,mBAAmB,OAAO,WAAW,MAAM,KAAK,mBAAmB,MAAM,CAAC,GAAG,aAAa,MAAM,KAAK,MAAM,OAAO,KAAK,MAAM,QAAQ,cAAc,GAAG,CAAC,CAAC,GAAG,OAAO,aAAa,MAAM;AACxL,WAAK,QAAQ,KAAK,MAAM,OAAO,OAAK,MAAM,cAAc;AACxD,UAAI,KAAK,uBAAuB,QAAQ;AACpC,aAAK,mBAAmB,MAAS;AAAA,MACrC;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAAA,EACA,UAAU;AACN,SAAK,YAAY,QAAQ;AAAA,EAC7B;AACJ;AACO,IAAM,6CAA6C,IAAI,cAAc,wBAAwB,MAAM;AACnG,IAAM,qCAAqC,eAAe,GAAG,2CAA2C,UAAU,KAAK,GAAG,2CAA2C,UAAU,MAAM,CAAC;AACtL,IAAM,wCAAwC,eAAe,GAAG,2CAA2C,UAAU,QAAQ,GAAG,2CAA2C,UAAU,MAAM,CAAC;AAC5L,IAAM,kCAAkC,IAAI,cAAc,aAAa,IAAI;AAC3E,IAAM,6CAA6C,IAAI,cAAc,2BAA2B,IAAI;AACpG,IAAM,+BAA+B,eAAe,IAAI,iCAAiC,eAAe,IAAI,sBAAsB,CAAC;AACnI,IAAM,mCAAmC,IAAI,cAAc,2BAA2B,KAAK;AAC3F,IAAM,+BAA+B,IAAI,cAAc,uBAAuB,KAAK;AACnF,IAAM,8BAA8B,IAAI,cAAc,sBAAsB,KAAK;AACjF,IAAM,mCAAmC,IAAI,cAAc,2BAA2B,KAAK;AAC3F,IAAM,4BAA4B,IAAI,cAAc,oBAAoB,IAAI;AAC5E,IAAM,kCAAkC,IAAI,cAAc,0BAA0B,KAAK;AACzF,IAAM,gCAAgC,IAAI,cAAc,wBAAwB,KAAK;AACrF,IAAM,gCAAgC,IAAI,cAAc,wBAAwB,KAAK;AACrF,IAAM,+BAA+B,IAAI,cAAc,uBAAuB,KAAK;AACnF,IAAM,wBAAwB,IAAI,cAAc,gBAAgB,KAAK;AAC5E,IAAM,qCAAqC;AAI3C,IAAM,oDAAoD;AAC1D,SAAS,8BAA8B,mBAAmB,QAAQ;AAC9D,QAAM,SAAS,kBAAkB,aAAa,OAAO,eAAe,CAAC;AACrE,kCAAgC,OAAO,MAAM;AAC7C,SAAO;AACX;AACA,SAAS,qBAAqB,mBAAmB,QAAQ;AACrD,QAAM,eAAe,2CAA2C,OAAO,iBAAiB;AACxF,QAAM,SAAS,MAAM;AACjB,UAAM,QAAQ,OAAO,cAAc;AAGnC,UAAM,WAAW,OAAO,eAAe,OAAO,eAAe,OAAO,YAAY;AAChF,QAAI,SAAS,UAAU;AACnB,mBAAa,IAAI,MAAM;AAAA,IAC3B,WACS,OAAO;AACZ,mBAAa,IAAI,KAAK;AAAA,IAC1B,WACS,UAAU;AACf,mBAAa,IAAI,QAAQ;AAAA,IAC7B,OACK;AACD,mBAAa,IAAI,MAAM;AAAA,IAC3B;AAAA,EACJ;AACA,SAAO;AACP,SAAO,OAAO,YAAY,MAAM;AACpC;AACA,IAAM,gCAAgC;AACtC,IAAM,qBAAqB;AAC3B,IAAM,yBAAyB;AAC/B,IAAM,4BAA4B;AAClC,IAAM,+BAA+B;AAErC,IAAM,+BAA+B;AACrC,IAAM,kBAAkB;AACxB,IAAM,iCAAiC;AACvC,IAAM,gBAAgB;AACtB,IAAM,4BAA4B;AAClC,IAAM,sBAAsB;AAC5B,IAAM,iCAAiC;AACvC,IAAM,2BAA2B;AACjC,IAAM,iBAAiB;AACvB,IAAM,mBAAmB;AACzB,IAAM,8BAA8B;AACpC,SAAS,kCAAkC,sBAAsB;AAC7D,SAAO,qBAAqB,SAAS,6BAA6B,MAAM;AAC5E;AACA,IAAM,8BAAN,cAA0C,WAAW;AAAA,EACjD,YAAY,sBAAsB;AAC9B,UAAM;AACN,SAAK,uBAAuB;AAC5B,SAAK,oCAAoC,kCAAkC,oBAAoB;AAC/F,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,oBAAoB;AAChB,SAAK,UAAU,KAAK,qBAAqB,yBAAyB,OAAK;AACnE,UAAI,EAAE,qBAAqB,6BAA6B,GAAG;AACvD,aAAK,oCAAoC,kCAAkC,KAAK,oBAAoB;AAAA,MACxG;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAAA,EACA,6BAA6B,OAAO;AAChC,QAAI,KAAK,mCAAmC;AACxC,aAAO,MAAM,aAAa;AAAA,IAC9B;AACA,WAAO,6BAA6B,KAAK;AAAA,EAC7C;AAAA,EACA,4BAA4B,OAAO;AAC/B,WAAO,4BAA4B,KAAK;AAAA,EAC5C;AACJ;AACA,SAAS,uBAAuB,UAAU,SAAS;AAC/C,MAAI;AACJ,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,QAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,QAAM,cAAc,IAAI,gBAAgB;AACxC,QAAM,SAAS;AAAA,IACX,GAAG;AAAA,IACH,4BAA4B,EAAE,+BAA+B,GAAG;AAAE,aAAO,kBAAkB,+BAA+B,CAAC;AAAA,IAAG,EAAE;AAAA,IAChI,iBAAiB,QAAQ,qBAAqB,SAAS,mBAAmB,CAAC;AAAA,IAC3E,6BAA6B,qBAAqB,SAAS,8BAA8B;AAAA,IACzF,uBAAuB,qBAAqB,SAAS,wBAAwB;AAAA,IAC7E,8BAA8B,KAAK,QAAQ,iCAAiC,QAAQ,OAAO,SAAS,KAAK,YAAY,IAAI,IAAI,4BAA4B,oBAAoB,CAAC;AAAA,IAC9K,+BAA+B,oCAAoC,iBAAiB;AAAA,IACpF,cAAc,QAAQ,qBAAqB,SAAS,eAAe,CAAC;AAAA,EACxE;AACA,SAAO,CAAC,QAAQ,WAAW;AAC/B;AACA,IAAI,gBAAgB,MAAMC,uBAAsB,KAAK;AAAA,EACjD,YAAY,MAAM,WAAW,UAAU,WAAW,SAAS,mBAAmB,aAAa,sBAAsB,sBAAsB;AACnI,UAAM,sBAAsB,OAAO,QAAQ,wBAAwB,cAAc,QAAQ,sBAAsB,QAAQ,qBAAqB,SAAS,sBAAsB,CAAC;AAC5K,UAAM,CAAC,sBAAsB,8BAA8B,IAAI,qBAAqB,eAAe,wBAAwB,OAAO;AAClI,UAAM,MAAM,WAAW,UAAU,WAAW;AAAA,MACxC,iBAAiB;AAAA,MACjB,GAAG;AAAA,MACH;AAAA,IACJ,CAAC;AACD,SAAK,YAAY,IAAI,8BAA8B;AACnD,SAAK,oBAAoB,8BAA8B,mBAAmB,IAAI;AAC9E,SAAK,YAAY,IAAI,qBAAqB,KAAK,mBAAmB,IAAI,CAAC;AACvE,SAAK,0BAA0B,2CAA2C,OAAO,KAAK,iBAAiB;AACvG,SAAK,wBAAwB,IAAI,QAAQ,6BAA6B,KAAK;AAC3E,UAAM,0BAA0B,iCAAiC,OAAO,KAAK,iBAAiB;AAC9F,4BAAwB,IAAI,QAAQ,QAAQ,mBAAmB,CAAC;AAChE,SAAK,0BAA0B,iCAAiC,OAAO,KAAK,iBAAiB;AAC7F,SAAK,sBAAsB,6BAA6B,OAAO,KAAK,iBAAiB;AACrF,SAAK,qBAAqB,4BAA4B,OAAO,KAAK,iBAAiB;AACnF,SAAK,sBAAsB,QAAQ;AACnC,SAAK,qCAAqC,kCAAkC,oBAAoB;AAChG,SAAK,YAAY,IAAI,KAAK,iBAAiB;AAC3C,SAAK,YAAY,IAAI,YAAY,SAAS,IAAI,CAAC;AAC/C,SAAK,aAAa,QAAQ,cAAc;AACxC,SAAK,YAAY,IAAI,KAAK,qBAAqB,MAAM;AACjD,YAAM,YAAY,KAAK,aAAa;AACpC,YAAM,QAAQ,KAAK,SAAS;AAC5B,WAAK,kBAAkB,mBAAmB,MAAM;AAC5C,aAAK,wBAAwB,IAAI,UAAU,SAAS,KAAK,MAAM,SAAS,CAAC;AACzE,aAAK,mBAAmB,IAAI,UAAU,SAAS,CAAC;AAChD,aAAK,oBAAoB,IAAI,UAAU,WAAW,CAAC;AAAA,MACvD,CAAC;AAAA,IACL,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,KAAK,iBAAiB,MAAM;AAC7C,YAAM,YAAY,KAAK,aAAa;AACpC,YAAM,QAAQ,KAAK,SAAS;AAC5B,WAAK,wBAAwB,IAAI,UAAU,SAAS,KAAK,MAAM,SAAS,CAAC;AAAA,IAC7E,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,qBAAqB,yBAAyB,OAAK;AACpE,UAAI,EAAE,qBAAqB,6BAA6B,GAAG;AACvD,aAAK,qCAAqC,kCAAkC,oBAAoB;AAAA,MACpG;AACA,UAAIC,WAAU,CAAC;AACf,UAAI,EAAE,qBAAqB,sBAAsB,KAAK,KAAK,wBAAwB,QAAW;AAC1F,cAAMC,uBAAsB,QAAQ,qBAAqB,SAAS,sBAAsB,CAAC;AACzF,QAAAD,WAAU,EAAE,GAAGA,UAAS,qBAAAC,qBAAoB;AAAA,MAChD;AACA,UAAI,EAAE,qBAAqB,eAAe,GAAG;AACzC,cAAM,eAAe,QAAQ,qBAAqB,SAAS,eAAe,CAAC;AAC3E,QAAAD,WAAU,EAAE,GAAGA,UAAS,aAAa;AAAA,MACzC;AACA,UAAI,EAAE,qBAAqB,mBAAmB,GAAG;AAC7C,cAAM,kBAAkB,QAAQ,qBAAqB,SAAS,mBAAmB,CAAC;AAClF,QAAAA,WAAU,EAAE,GAAGA,UAAS,gBAAgB;AAAA,MAC5C;AACA,UAAI,EAAE,qBAAqB,8BAA8B,GAAG;AACxD,cAAM,8BAA8B,qBAAqB,SAAS,8BAA8B;AAChG,QAAAA,WAAU,EAAE,GAAGA,UAAS,4BAA4B;AAAA,MACxD;AACA,UAAI,EAAE,qBAAqB,wBAAwB,GAAG;AAClD,cAAM,wBAAwB,qBAAqB,SAAS,wBAAwB;AACpF,QAAAA,WAAU,EAAE,GAAGA,UAAS,sBAAsB;AAAA,MAClD;AACA,UAAI,OAAO,KAAKA,QAAO,EAAE,SAAS,GAAG;AACjC,aAAK,cAAcA,QAAO;AAAA,MAC9B;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,sBAAsB,MAAM,EAAE,sBAAsB,GAAG,QAAQ,CAAC;AACrF,SAAK,YAAY,IAAI,KAAK,SAAS;AAAA,EACvC;AAAA,EACA,cAAc,SAAS;AACnB,UAAM,cAAc,OAAO;AAC3B,QAAI,QAAQ,mBAAmB,QAAW;AACtC,WAAK,aAAa,QAAQ,cAAc;AAAA,IAC5C;AACA,QAAI,QAAQ,6BAA6B,QAAW;AAChD,WAAK,wBAAwB,IAAI,CAAC,CAAC,QAAQ,wBAAwB;AAAA,IACvE;AAAA,EACJ;AAAA,EACA,aAAa,QAAQ;AACjB,SAAK,MAAM,SAAS,cAAc,MAAM,IAAI,iBAAiB;AAAA,EACjE;AACJ;AACA,gBAAgBF,YAAW;AAAA,EACvB,QAAQ,GAAG,kBAAkB;AAAA,EAC7B,QAAQ,GAAG,YAAY;AAAA,EACvB,QAAQ,GAAG,qBAAqB;AAAA,EAChC,QAAQ,GAAG,qBAAqB;AACpC,GAAG,aAAa;AAEhB,IAAI,qBAAqB,MAAMI,4BAA2B,UAAU;AAAA,EAChE,YAAY,MAAM,WAAW,UAAU,WAAW,SAAS,mBAAmB,aAAa,sBAAsB,sBAAsB;AACnI,UAAM,sBAAsB,OAAO,QAAQ,wBAAwB,cAAc,QAAQ,sBAAsB,QAAQ,qBAAqB,SAAS,sBAAsB,CAAC;AAC5K,UAAM,CAAC,sBAAsB,8BAA8B,IAAI,qBAAqB,eAAe,wBAAwB,OAAO;AAClI,UAAM,MAAM,WAAW,UAAU,WAAW;AAAA,MACxC,iBAAiB;AAAA,MACjB,GAAG;AAAA,MACH;AAAA,IACJ,CAAC;AACD,SAAK,cAAc,IAAI,gBAAgB;AACvC,SAAK,YAAY,IAAI,8BAA8B;AACnD,SAAK,oBAAoB,8BAA8B,mBAAmB,IAAI;AAC9E,SAAK,YAAY,IAAI,qBAAqB,KAAK,mBAAmB,KAAK,MAAM,CAAC;AAC9E,SAAK,sBAAsB,QAAQ;AACnC,SAAK,0BAA0B,2CAA2C,OAAO,KAAK,iBAAiB;AACvG,SAAK,wBAAwB,IAAI,QAAQ,6BAA6B,KAAK;AAC3E,UAAM,0BAA0B,iCAAiC,OAAO,KAAK,iBAAiB;AAC9F,4BAAwB,IAAI,QAAQ,QAAQ,mBAAmB,CAAC;AAChE,SAAK,qCAAqC,kCAAkC,oBAAoB;AAChG,SAAK,YAAY,IAAI,KAAK,iBAAiB;AAC3C,SAAK,YAAY,IAAI,YAAY,SAAS,IAAI,CAAC;AAC/C,SAAK,aAAa,QAAQ,cAAc;AACxC,SAAK,YAAY,IAAI,qBAAqB,yBAAyB,OAAK;AACpE,UAAI,EAAE,qBAAqB,6BAA6B,GAAG;AACvD,aAAK,qCAAqC,kCAAkC,oBAAoB;AAAA,MACpG;AACA,UAAIC,WAAU,CAAC;AACf,UAAI,EAAE,qBAAqB,sBAAsB,KAAK,KAAK,wBAAwB,QAAW;AAC1F,cAAMC,uBAAsB,QAAQ,qBAAqB,SAAS,sBAAsB,CAAC;AACzF,QAAAD,WAAU,EAAE,GAAGA,UAAS,qBAAAC,qBAAoB;AAAA,MAChD;AACA,UAAI,EAAE,qBAAqB,eAAe,GAAG;AACzC,cAAM,eAAe,QAAQ,qBAAqB,SAAS,eAAe,CAAC;AAC3E,QAAAD,WAAU,EAAE,GAAGA,UAAS,aAAa;AAAA,MACzC;AACA,UAAI,EAAE,qBAAqB,mBAAmB,GAAG;AAC7C,cAAM,kBAAkB,QAAQ,qBAAqB,SAAS,mBAAmB,CAAC;AAClF,QAAAA,WAAU,EAAE,GAAGA,UAAS,gBAAgB;AAAA,MAC5C;AACA,UAAI,EAAE,qBAAqB,8BAA8B,GAAG;AACxD,cAAM,8BAA8B,qBAAqB,SAAS,8BAA8B;AAChG,QAAAA,WAAU,EAAE,GAAGA,UAAS,4BAA4B;AAAA,MACxD;AACA,UAAI,EAAE,qBAAqB,wBAAwB,GAAG;AAClD,cAAM,wBAAwB,qBAAqB,SAAS,wBAAwB;AACpF,QAAAA,WAAU,EAAE,GAAGA,UAAS,sBAAsB;AAAA,MAClD;AACA,UAAI,OAAO,KAAKA,QAAO,EAAE,SAAS,GAAG;AACjC,aAAK,cAAcA,QAAO;AAAA,MAC9B;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,sBAAsB,MAAM,EAAE,sBAAsB,GAAG,QAAQ,CAAC;AACrF,SAAK,YAAY,IAAI,KAAK,SAAS;AAAA,EACvC;AAAA,EACA,cAAc,SAAS;AACnB,UAAM,cAAc,OAAO;AAC3B,QAAI,QAAQ,mBAAmB,QAAW;AACtC,WAAK,aAAa,QAAQ,cAAc;AAAA,IAC5C;AACA,QAAI,QAAQ,6BAA6B,QAAW;AAChD,WAAK,wBAAwB,IAAI,CAAC,CAAC,QAAQ,wBAAwB;AAAA,IACvE;AAAA,EACJ;AAAA,EACA,aAAa,QAAQ;AACjB,SAAK,MAAM,SAAS,cAAc,MAAM,IAAI,iBAAiB;AAAA,EACjE;AAAA,EACA,UAAU;AACN,SAAK,YAAY,QAAQ;AACzB,UAAM,QAAQ;AAAA,EAClB;AACJ;AACA,qBAAqBE,YAAW;AAAA,EAC5B,QAAQ,GAAG,kBAAkB;AAAA,EAC7B,QAAQ,GAAG,YAAY;AAAA,EACvB,QAAQ,GAAG,qBAAqB;AAAA,EAChC,QAAQ,GAAG,qBAAqB;AACpC,GAAG,kBAAkB;AAErB,IAAI,iBAAiB,MAAMC,wBAAuB,MAAM;AAAA,EACpD,YAAY,MAAM,WAAW,UAAU,SAAS,WAAW,SAAS,mBAAmB,aAAa,sBAAsB,sBAAsB;AAC5I,UAAM,sBAAsB,OAAO,QAAQ,wBAAwB,cAAc,QAAQ,sBAAsB,QAAQ,qBAAqB,SAAS,sBAAsB,CAAC;AAC5K,UAAM,CAAC,sBAAsB,8BAA8B,IAAI,qBAAqB,eAAe,wBAAwB,OAAO;AAClI,UAAM,MAAM,WAAW,UAAU,SAAS,WAAW;AAAA,MACjD,iBAAiB;AAAA,MACjB,GAAG;AAAA,MACH;AAAA,IACJ,CAAC;AACD,SAAK,YAAY,IAAI,8BAA8B;AACnD,SAAK,oBAAoB,8BAA8B,mBAAmB,IAAI;AAC9E,SAAK,YAAY,IAAI,qBAAqB,KAAK,mBAAmB,IAAI,CAAC;AACvE,SAAK,0BAA0B,2CAA2C,OAAO,KAAK,iBAAiB;AACvG,SAAK,wBAAwB,IAAI,QAAQ,6BAA6B,KAAK;AAC3E,UAAM,0BAA0B,iCAAiC,OAAO,KAAK,iBAAiB;AAC9F,4BAAwB,IAAI,QAAQ,QAAQ,mBAAmB,CAAC;AAChE,SAAK,0BAA0B,iCAAiC,OAAO,KAAK,iBAAiB;AAC7F,SAAK,sBAAsB,6BAA6B,OAAO,KAAK,iBAAiB;AACrF,SAAK,qBAAqB,4BAA4B,OAAO,KAAK,iBAAiB;AACnF,SAAK,sBAAsB,QAAQ;AACnC,SAAK,qCAAqC,kCAAkC,oBAAoB;AAChG,SAAK,YAAY,IAAI,KAAK,iBAAiB;AAC3C,SAAK,YAAY,IAAI,YAAY,SAAS,IAAI,CAAC;AAC/C,SAAK,aAAa,QAAQ,cAAc;AACxC,SAAK,YAAY,IAAI,KAAK,qBAAqB,MAAM;AACjD,YAAM,YAAY,KAAK,aAAa;AACpC,YAAM,QAAQ,KAAK,SAAS;AAC5B,WAAK,kBAAkB,mBAAmB,MAAM;AAC5C,aAAK,wBAAwB,IAAI,UAAU,SAAS,KAAK,MAAM,SAAS,CAAC;AACzE,aAAK,mBAAmB,IAAI,UAAU,SAAS,CAAC;AAChD,aAAK,oBAAoB,IAAI,UAAU,WAAW,CAAC;AAAA,MACvD,CAAC;AAAA,IACL,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,KAAK,iBAAiB,MAAM;AAC7C,YAAM,YAAY,KAAK,aAAa;AACpC,YAAM,QAAQ,KAAK,SAAS;AAC5B,WAAK,wBAAwB,IAAI,UAAU,SAAS,KAAK,MAAM,SAAS,CAAC;AAAA,IAC7E,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,qBAAqB,yBAAyB,OAAK;AACpE,UAAI,EAAE,qBAAqB,6BAA6B,GAAG;AACvD,aAAK,qCAAqC,kCAAkC,oBAAoB;AAAA,MACpG;AACA,UAAIC,WAAU,CAAC;AACf,UAAI,EAAE,qBAAqB,sBAAsB,KAAK,KAAK,wBAAwB,QAAW;AAC1F,cAAMC,uBAAsB,QAAQ,qBAAqB,SAAS,sBAAsB,CAAC;AACzF,QAAAD,WAAU,EAAE,GAAGA,UAAS,qBAAAC,qBAAoB;AAAA,MAChD;AACA,UAAI,EAAE,qBAAqB,eAAe,GAAG;AACzC,cAAM,eAAe,QAAQ,qBAAqB,SAAS,eAAe,CAAC;AAC3E,QAAAD,WAAU,EAAE,GAAGA,UAAS,aAAa;AAAA,MACzC;AACA,UAAI,EAAE,qBAAqB,mBAAmB,GAAG;AAC7C,cAAM,kBAAkB,QAAQ,qBAAqB,SAAS,mBAAmB,CAAC;AAClF,QAAAA,WAAU,EAAE,GAAGA,UAAS,gBAAgB;AAAA,MAC5C;AACA,UAAI,EAAE,qBAAqB,8BAA8B,GAAG;AACxD,cAAM,8BAA8B,qBAAqB,SAAS,8BAA8B;AAChG,QAAAA,WAAU,EAAE,GAAGA,UAAS,4BAA4B;AAAA,MACxD;AACA,UAAI,EAAE,qBAAqB,wBAAwB,GAAG;AAClD,cAAM,wBAAwB,qBAAqB,SAAS,wBAAwB;AACpF,QAAAA,WAAU,EAAE,GAAGA,UAAS,sBAAsB;AAAA,MAClD;AACA,UAAI,OAAO,KAAKA,QAAO,EAAE,SAAS,GAAG;AACjC,aAAK,cAAcA,QAAO;AAAA,MAC9B;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,uBAAuB,MAAM,EAAE,sBAAsB,GAAG,QAAQ,CAAC;AACtF,SAAK,YAAY,IAAI,KAAK,SAAS;AAAA,EACvC;AAAA,EACA,cAAc,SAAS;AACnB,UAAM,cAAc,OAAO;AAC3B,QAAI,QAAQ,mBAAmB,QAAW;AACtC,WAAK,aAAa,QAAQ,cAAc;AAAA,IAC5C;AACA,QAAI,QAAQ,6BAA6B,QAAW;AAChD,WAAK,wBAAwB,IAAI,CAAC,CAAC,QAAQ,wBAAwB;AAAA,IACvE;AAAA,EACJ;AAAA,EACA,aAAa,QAAQ;AACjB,SAAK,MAAM,SAAS,cAAc,MAAM,IAAI,iBAAiB;AAAA,EACjE;AAAA,EACA,UAAU;AACN,SAAK,YAAY,QAAQ;AACzB,UAAM,QAAQ;AAAA,EAClB;AACJ;AACA,iBAAiBE,YAAW;AAAA,EACxB,QAAQ,GAAG,kBAAkB;AAAA,EAC7B,QAAQ,GAAG,YAAY;AAAA,EACvB,QAAQ,GAAG,qBAAqB;AAAA,EAChC,QAAQ,GAAG,qBAAqB;AACpC,GAAG,cAAc;AAEjB,IAAM,oBAAN,cAAgC,WAAW;AAAA,EACvC,YAAY,QAAQ,SAAS;AACzB,QAAI;AACJ,UAAM;AACN,SAAK,SAAS;AACd,SAAK,aAAa,KAAK,UAAU,IAAI,QAAQ,CAAC;AAC9C,SAAK,YAAY,KAAK,WAAW;AACjC,SAAK,UAAU,MAAM,OAAO,KAAK,OAAO,sBAAsB,OAAK,gBAAgB,EAAE,YAAY,CAAC,EAAE,OAAK,KAAK,wBAAwB,CAAC,CAAC,CAAC;AACzI,SAAK,UAAU,KAAK,OAAO,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;AACtF,SAAK,UAAU,KAAK,OAAO,gBAAgB,CAAC,MAAM,KAAK,gBAAgB,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;AAClG,QAAI,QAAQ,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,uBAAuB,cAAc,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,uBAAuB;AACxL,WAAK,qBAAqB,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,qBAAqB,SAAS,kBAAkB,OAAO;AAC3I,WAAK,UAAU,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,qBAAqB,yBAAyB,OAAK;AACxH,YAAI,EAAE,qBAAqB,kBAAkB,GAAG;AAC5C,eAAK,qBAAqB,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,qBAAqB,SAAS,kBAAkB,OAAO;AAAA,QAC/I;AAAA,MACJ,CAAC,CAAC;AAAA,IACN,OACK;AACD,WAAK,qBAAqB,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,uBAAuB,QAAQ,OAAO,SAAS,KAAK;AAAA,IACjJ;AAAA,EACJ;AAAA,EACA,wBAAwB,OAAO;AAC3B,QAAI,MAAM,SAAS,WAAW,GAAG;AAC7B;AAAA,IACJ;AACA,UAAM,yBAAyB,MAAM;AACrC,UAAM,gBAAgB,OAAO,uBAAuB,kBAAkB,YAAY,uBAAuB,gBAAgB;AACzH,UAAM,SAAS,OAAO,uBAAuB,WAAW,YAAY,uBAAuB,SAAS,CAAC;AACrG,UAAM,aAAa;AACnB,SAAK,MAAM,KAAK,mBAAmB,GAAG,eAAe,QAAQ,YAAY,MAAM,YAAY;AAAA,EAC/F;AAAA,EACA,UAAU,SAAS,cAAc;AAC7B,QAAI,CAAC,KAAK,mBAAmB;AACzB;AAAA,IACJ;AACA,UAAM,gBAAgB,aAAa,WAAW;AAC9C,QAAI,eAAe;AACf;AAAA,IACJ;AACA,UAAM,gBAAgB,aAAa,WAAW;AAC9C,UAAM,gBAAgB;AACtB,UAAM,SAAS;AACf,UAAM,aAAa,aAAa,WAAW,aAAa,WAAW,aAAa;AAChF,SAAK,MAAM,SAAS,eAAe,QAAQ,YAAY,YAAY;AAAA,EACvE;AAAA,EACA,gBAAgB,SAAS,cAAc;AACnC,QAAI,CAAC,cAAc;AACf;AAAA,IACJ;AAEA,UAAM,SAAS,aAAa;AAC5B,UAAM,YAAY,OAAO,UAAU,SAAS,mBAAmB,KACvD,OAAO,UAAU,SAAS,mBAAmB,KAAK,OAAO,UAAU,SAAS,aAAa,KAAK,aAAa,UAAU;AAC7H,QAAI,WAAW;AACX;AAAA,IACJ;AACA,UAAM,gBAAgB;AACtB,UAAM,SAAS;AACf,UAAM,aAAc,aAAa,WAAW,aAAa,WAAW,aAAa;AACjF,SAAK,MAAM,SAAS,eAAe,QAAQ,YAAY,YAAY;AAAA,EACvE;AAAA,EACA,MAAM,SAAS,eAAe,QAAQ,YAAY,cAAc;AAC5D,QAAI,CAAC,SAAS;AACV;AAAA,IACJ;AACA,SAAK,WAAW,KAAK;AAAA,MACjB,eAAe;AAAA,QACX;AAAA,QACA;AAAA,QACA,iBAAiB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AACA,IAAM,wBAAN,cAAoC,kBAAkB;AAAA,EAClD,YAAY,QAAQ,SAAS;AACzB,UAAM,QAAQ,OAAO;AACrB,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK,OAAO,oBAAoB,EAAE,CAAC;AAAA,EAC9C;AACJ;AACA,IAAM,yBAAN,cAAqC,kBAAkB;AAAA,EACnD,YAAY,QAAQ,SAAS;AACzB,UAAM,QAAQ,OAAO;AAAA,EACzB;AAAA,EACA,qBAAqB;AACjB,WAAO,KAAK,OAAO,oBAAoB,EAAE,CAAC;AAAA,EAC9C;AACJ;AACA,IAAM,wBAAN,cAAoC,kBAAkB;AAAA,EAClD,YAAY,QAAQ,SAAS;AACzB,UAAM,QAAQ,OAAO;AAAA,EACzB;AAAA,EACA,qBAAqB;AACjB,QAAI;AACJ,YAAQ,KAAK,KAAK,OAAO,aAAa,EAAE,CAAC,OAAO,QAAQ,OAAO,SAAS,KAAK;AAAA,EACjF;AACJ;AACA,SAAS,oCAAoC,mBAAmB;AAC5D,MAAI,eAAe;AACnB,SAAO,WAAS;AACZ,QAAI,MAAM,eAAe,EAAE,cAAc,GAAG;AACxC,aAAO;AAAA,IACX;AACA,QAAI,cAAc;AACd,qBAAe;AACf,aAAO;AAAA,IACX;AACA,UAAM,SAAS,kBAAkB,aAAa,OAAO,MAAM,MAAM;AACjE,QAAI,OAAO,SAAS,GAAqC;AACrD,qBAAe;AACf,aAAO;AAAA,IACX;AACA,mBAAe;AACf,WAAO,OAAO,SAAS;AAAA,EAC3B;AACJ;AACA,IAAI,sBAAsB,MAAMC,6BAA4B,WAAW;AAAA,EACnE,YAAY,MAAM,WAAW,UAAU,WAAW,SAAS,sBAAsB,mBAAmB,aAAa,sBAAsB;AACnI,UAAM,EAAE,SAAS,aAAa,uBAAuB,WAAW,IAAI,qBAAqB,eAAe,2BAA2B,OAAO;AAC1I,UAAM,MAAM,WAAW,UAAU,WAAW,WAAW;AACvD,SAAK,YAAY,IAAI,UAAU;AAC/B,SAAK,YAAY,IAAI,uBAAuB,MAAM,SAAS,uBAAuB,QAAQ,gBAAgB,mBAAmB,aAAa,oBAAoB;AAC9J,SAAK,YAAY,IAAI,KAAK,SAAS;AAAA,EACvC;AAAA,EACA,cAAc,SAAS;AACnB,UAAM,cAAc,OAAO;AAC3B,SAAK,UAAU,cAAc,OAAO;AAAA,EACxC;AACJ;AACA,sBAAsBC,YAAW;AAAA,EAC7B,QAAQ,GAAG,qBAAqB;AAAA,EAChC,QAAQ,GAAG,kBAAkB;AAAA,EAC7B,QAAQ,GAAG,YAAY;AAAA,EACvB,QAAQ,GAAG,qBAAqB;AACpC,GAAG,mBAAmB;AAEtB,IAAI,kCAAkC,MAAMC,yCAAwC,uBAAuB;AAAA,EACvG,YAAY,MAAM,WAAW,UAAU,WAAW,SAAS,sBAAsB,mBAAmB,aAAa,sBAAsB;AACnI,UAAM,EAAE,SAAS,aAAa,uBAAuB,WAAW,IAAI,qBAAqB,eAAe,2BAA2B,OAAO;AAC1I,UAAM,MAAM,WAAW,UAAU,WAAW,WAAW;AACvD,SAAK,YAAY,IAAI,UAAU;AAC/B,SAAK,YAAY,IAAI,uBAAuB,MAAM,SAAS,uBAAuB,QAAQ,gBAAgB,mBAAmB,aAAa,oBAAoB;AAC9J,SAAK,YAAY,IAAI,KAAK,SAAS;AAAA,EACvC;AAAA,EACA,cAAc,UAAU,CAAC,GAAG;AACxB,UAAM,cAAc,OAAO;AAC3B,QAAI,QAAQ,gBAAgB;AACxB,WAAK,UAAU,qBAAqB,QAAQ,cAAc;AAAA,IAC9D;AACA,SAAK,UAAU,cAAc,OAAO;AAAA,EACxC;AACJ;AACA,kCAAkCC,YAAW;AAAA,EACzC,QAAQ,GAAG,qBAAqB;AAAA,EAChC,QAAQ,GAAG,kBAAkB;AAAA,EAC7B,QAAQ,GAAG,YAAY;AAAA,EACvB,QAAQ,GAAG,qBAAqB;AACpC,GAAG,+BAA+B;AAElC,IAAI,oBAAoB,MAAMC,2BAA0B,SAAS;AAAA,EAC7D,YAAY,MAAM,WAAW,UAAU,WAAW,YAAY,SAAS,sBAAsB,mBAAmB,aAAa,sBAAsB;AAC/I,UAAM,EAAE,SAAS,aAAa,uBAAuB,WAAW,IAAI,qBAAqB,eAAe,2BAA2B,OAAO;AAC1I,UAAM,MAAM,WAAW,UAAU,WAAW,YAAY,WAAW;AACnE,SAAK,YAAY,IAAI,UAAU;AAC/B,SAAK,YAAY,IAAI,uBAAuB,MAAM,SAAS,uBAAuB,QAAQ,gBAAgB,mBAAmB,aAAa,oBAAoB;AAC9J,SAAK,YAAY,IAAI,KAAK,SAAS;AAAA,EACvC;AAAA,EACA,cAAc,UAAU,CAAC,GAAG;AACxB,UAAM,cAAc,OAAO;AAC3B,QAAI,QAAQ,mBAAmB,QAAW;AACtC,WAAK,UAAU,qBAAqB,QAAQ,cAAc;AAAA,IAC9D;AACA,SAAK,UAAU,cAAc,OAAO;AAAA,EACxC;AACJ;AACA,oBAAoBC,YAAW;AAAA,EAC3B,QAAQ,GAAG,qBAAqB;AAAA,EAChC,QAAQ,GAAG,kBAAkB;AAAA,EAC7B,QAAQ,GAAG,YAAY;AAAA,EACvB,QAAQ,GAAG,qBAAqB;AACpC,GAAG,iBAAiB;AAEpB,IAAI,yBAAyB,MAAMC,gCAA+B,cAAc;AAAA,EAC5E,IAAI,YAAY;AAAE,WAAO,KAAK,UAAU;AAAA,EAAW;AAAA,EACnD,YAAY,MAAM,WAAW,UAAU,WAAW,YAAY,SAAS,sBAAsB,mBAAmB,aAAa,sBAAsB;AAC/I,UAAM,EAAE,SAAS,aAAa,uBAAuB,WAAW,IAAI,qBAAqB,eAAe,2BAA2B,OAAO;AAC1I,UAAM,MAAM,WAAW,UAAU,WAAW,YAAY,WAAW;AACnE,SAAK,YAAY,IAAI,UAAU;AAC/B,SAAK,YAAY,IAAI,uBAAuB,MAAM,SAAS,uBAAuB,QAAQ,gBAAgB,mBAAmB,aAAa,oBAAoB;AAC9J,SAAK,YAAY,IAAI,KAAK,SAAS;AAAA,EACvC;AAAA,EACA,cAAc,UAAU,CAAC,GAAG;AACxB,UAAM,cAAc,OAAO;AAC3B,QAAI,QAAQ,gBAAgB;AACxB,WAAK,UAAU,qBAAqB,QAAQ,cAAc;AAAA,IAC9D;AACA,SAAK,UAAU,cAAc,OAAO;AAAA,EACxC;AACJ;AACA,yBAAyBC,YAAW;AAAA,EAChC,QAAQ,GAAG,qBAAqB;AAAA,EAChC,QAAQ,GAAG,kBAAkB;AAAA,EAC7B,QAAQ,GAAG,YAAY;AAAA,EACvB,QAAQ,GAAG,qBAAqB;AACpC,GAAG,sBAAsB;AAEzB,IAAI,qCAAqC,MAAMC,4CAA2C,0BAA0B;AAAA,EAChH,YAAY,MAAM,WAAW,iBAAiB,qBAAqB,WAAW,YAAY,SAAS,sBAAsB,mBAAmB,aAAa,sBAAsB;AAC3K,UAAM,EAAE,SAAS,aAAa,uBAAuB,WAAW,IAAI,qBAAqB,eAAe,2BAA2B,OAAO;AAC1I,UAAM,MAAM,WAAW,iBAAiB,qBAAqB,WAAW,YAAY,WAAW;AAC/F,SAAK,YAAY,IAAI,UAAU;AAC/B,SAAK,YAAY,IAAI,uBAAuB,MAAM,SAAS,uBAAuB,QAAQ,gBAAgB,mBAAmB,aAAa,oBAAoB;AAC9J,SAAK,YAAY,IAAI,KAAK,SAAS;AAAA,EACvC;AAAA,EACA,cAAc,SAAS;AACnB,UAAM,cAAc,OAAO;AAC3B,SAAK,UAAU,cAAc,OAAO;AAAA,EACxC;AACJ;AACA,qCAAqCC,YAAW;AAAA,EAC5C,QAAQ,GAAG,qBAAqB;AAAA,EAChC,QAAQ,GAAG,kBAAkB;AAAA,EAC7B,QAAQ,GAAG,YAAY;AAAA,EACvB,QAAQ,IAAI,qBAAqB;AACrC,GAAG,kCAAkC;AAErC,SAAS,uBAAuB,sBAAsB;AAClD,QAAM,QAAQ,qBAAqB,SAAS,yBAAyB;AACrE,MAAI,UAAU,aAAa;AACvB,WAAO,aAAa;AAAA,EACxB,WACS,UAAU,UAAU;AACzB,WAAO,aAAa;AAAA,EACxB;AACA,QAAM,kBAAkB,qBAAqB,SAAS,4BAA4B;AAClF,MAAI,oBAAoB,YAAY,oBAAoB,aAAa;AACjE,WAAO,aAAa;AAAA,EACxB,WACS,oBAAoB,UAAU;AACnC,WAAO,aAAa;AAAA,EACxB;AACA,SAAO;AACX;AACA,SAAS,4BAA4B,sBAAsB;AACvD,QAAM,QAAQ,qBAAqB,SAAS,8BAA8B;AAC1E,MAAI,UAAU,SAAS;AACnB,WAAO,kBAAkB;AAAA,EAC7B,WACS,UAAU,cAAc;AAC7B,WAAO,kBAAkB;AAAA,EAC7B;AACA,SAAO;AACX;AACA,SAAS,0BAA0B,UAAU,SAAS;AAClD,MAAI;AACJ,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,QAAM,qBAAqB,SAAS,IAAI,mBAAmB;AAC3D,QAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,QAAM,wBAAwB,MAAM;AAEhC,UAAM,aAAa,kBAAkB,mBAAmB,kCAAkC;AAC1F,QAAI,eAAe,aAAa;AAC5B,aAAO,mBAAmB;AAAA,IAC9B,WACS,eAAe,WAAW;AAC/B,aAAO,mBAAmB;AAAA,IAC9B;AAEA,UAAM,cAAc,kBAAkB,mBAAmB,iDAAiD;AAC1G,QAAI,gBAAgB,OAAO;AACvB,aAAO,mBAAmB;AAAA,IAC9B;AAEA,UAAM,eAAe,qBAAqB,SAAS,4BAA4B;AAC/E,QAAI,iBAAiB,aAAa;AAC9B,aAAO,mBAAmB;AAAA,IAC9B,WACS,iBAAiB,WAAW;AACjC,aAAO,mBAAmB;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AACA,QAAM,sBAAsB,QAAQ,wBAAwB,SAAY,QAAQ,sBAAsB,QAAQ,qBAAqB,SAAS,sBAAsB,CAAC;AACnK,QAAM,CAAC,sBAAsB,UAAU,IAAI,qBAAqB,eAAe,wBAAwB,OAAO;AAC9G,QAAM,gBAAgB,QAAQ;AAC9B,QAAM,qBAAqB,QAAQ,uBAAuB,SAAY,QAAQ,qBAAqB,qBAAqB,SAAS,yBAAyB;AAC1J,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,SAAS;AAAA;AAAA,MAEL,iBAAiB;AAAA,MACjB,GAAG;AAAA,MACH,QAAQ,OAAO,qBAAqB,SAAS,aAAa,MAAM,WAAW,qBAAqB,SAAS,aAAa,IAAI;AAAA,MAC1H;AAAA,MACA,iBAAiB,QAAQ,qBAAqB,SAAS,mBAAmB,CAAC;AAAA,MAC3E,iBAAiB,uBAAuB,oBAAoB;AAAA,MAC5D,sBAAsB,4BAA4B,oBAAoB;AAAA,MACtE;AAAA,MACA,cAAc,QAAQ,qBAAqB,SAAS,eAAe,CAAC;AAAA,MACpE;AAAA,MACA,iCAAiC,QAAQ;AAAA,MACzC,2BAA2B,KAAK,QAAQ,8BAA8B,QAAQ,OAAO,SAAS,KAAM,qBAAqB,SAAS,cAAc,MAAM;AAAA,MACtJ,qBAAqB;AAAA,MACrB,kBAAkB;AAAA,MAClB,oBAAoB,QAAQ,qBAAqB,SAAS,gBAAgB,CAAC;AAAA,MAC3E,0BAA0B,OAAO,qBAAqB,SAAS,2BAA2B,CAAC;AAAA,IAC/F;AAAA,EACJ;AACJ;AACA,IAAI,yBAAyB,MAAMC,wBAAuB;AAAA,EACtD,IAAI,YAAY;AAAE,WAAO,KAAK,UAAU;AAAA,EAAW;AAAA,EACnD,YAAY,MAAM,SAAS,uBAAuB,gBAAgB,mBAAmB,aAAa,sBAAsB;AACpH,QAAI;AACJ,SAAK,OAAO;AACZ,SAAK,cAAc,CAAC;AACpB,SAAK,oBAAoB,8BAA8B,mBAAmB,IAAI;AAC9E,SAAK,YAAY,KAAK,qBAAqB,KAAK,mBAAmB,IAAI,CAAC;AACxE,SAAK,0BAA0B,2CAA2C,OAAO,KAAK,iBAAiB;AACvG,SAAK,wBAAwB,IAAI,QAAQ,6BAA6B,KAAK;AAC3E,UAAM,0BAA0B,iCAAiC,OAAO,KAAK,iBAAiB;AAC9F,4BAAwB,IAAI,QAAQ,QAAQ,mBAAmB,CAAC;AAChE,SAAK,wBAAwB,0BAA0B,OAAO,KAAK,iBAAiB;AACpF,SAAK,sBAAsB,KAAK,KAAK,QAAQ,uBAAuB,QAAQ,OAAO,SAAS,KAAK,IAAI;AACrG,SAAK,sBAAsB,iCAAiC,OAAO,KAAK,iBAAiB;AACzF,SAAK,qBAAqB,6BAA6B,OAAO,KAAK,iBAAiB;AACpF,SAAK,oBAAoB,4BAA4B,OAAO,KAAK,iBAAiB;AAClF,SAAK,yBAAyB,gCAAgC,OAAO,KAAK,iBAAiB;AAC3F,SAAK,uBAAuB,8BAA8B,OAAO,KAAK,iBAAiB;AACvF,SAAK,uBAAuB,8BAA8B,OAAO,KAAK,iBAAiB;AACvF,SAAK,sBAAsB,6BAA6B,OAAO,KAAK,iBAAiB;AACrF,SAAK,eAAe,sBAAsB,OAAO,KAAK,iBAAiB;AACvE,SAAK,qCAAqC,kCAAkC,oBAAoB;AAChG,SAAK,qBAAqB,cAAc;AACxC,UAAM,4BAA4B,MAAM;AACpC,YAAM,QAAQ,KAAK,SAAS,EAAE,CAAC;AAC/B,UAAI,CAAC,OAAO;AACR;AAAA,MACJ;AACA,YAAM,OAAO,KAAK,QAAQ,KAAK;AAC/B,WAAK,uBAAuB,IAAI,KAAK,eAAe,CAAC,KAAK,SAAS;AACnE,WAAK,qBAAqB,IAAI,CAAC,CAAC,KAAK,iBAAiB,KAAK,CAAC;AAC5D,WAAK,qBAAqB,IAAI,KAAK,eAAe,KAAK,SAAS;AAChE,WAAK,oBAAoB,IAAI,CAAC,CAAC,KAAK,qBAAqB,KAAK,CAAC;AAAA,IACnE;AACA,UAAM,yBAAyB,oBAAI,IAAI;AACvC,2BAAuB,IAAI,kCAAkC;AAC7D,2BAAuB,IAAI,iDAAiD;AAC5E,SAAK,YAAY,KAAK,KAAK,mBAAmB,YAAY,SAAS,IAAI,GAAG,KAAK,qBAAqB,MAAM;AACtG,YAAM,YAAY,KAAK,aAAa;AACpC,YAAM,QAAQ,KAAK,SAAS;AAC5B,WAAK,kBAAkB,mBAAmB,MAAM;AAC5C,aAAK,oBAAoB,IAAI,UAAU,SAAS,KAAK,MAAM,SAAS,CAAC;AACrE,aAAK,kBAAkB,IAAI,UAAU,SAAS,CAAC;AAC/C,aAAK,mBAAmB,IAAI,UAAU,WAAW,CAAC;AAAA,MACtD,CAAC;AAAA,IACL,CAAC,GAAG,KAAK,iBAAiB,MAAM;AAC5B,YAAM,YAAY,KAAK,aAAa;AACpC,YAAM,QAAQ,KAAK,SAAS;AAC5B,WAAK,oBAAoB,IAAI,UAAU,SAAS,KAAK,MAAM,SAAS,CAAC;AACrE,gCAA0B;AAAA,IAC9B,CAAC,GAAG,KAAK,yBAAyB,yBAAyB,GAAG,KAAK,iBAAiB,yBAAyB,GAAG,KAAK,yBAAyB,aAAW,KAAK,aAAa,IAAI,OAAO,CAAC,GAAG,qBAAqB,yBAAyB,OAAK;AACzO,UAAI,aAAa,CAAC;AAClB,UAAI,EAAE,qBAAqB,6BAA6B,GAAG;AACvD,aAAK,qCAAqC,kCAAkC,oBAAoB;AAAA,MACpG;AACA,UAAI,EAAE,qBAAqB,aAAa,GAAG;AACvC,cAAM,SAAS,qBAAqB,SAAS,aAAa;AAC1D,qBAAa,EAAE,GAAG,YAAY,OAAO;AAAA,MACzC;AACA,UAAI,EAAE,qBAAqB,yBAAyB,KAAK,QAAQ,uBAAuB,QAAW;AAC/F,cAAM,qBAAqB,qBAAqB,SAAS,yBAAyB;AAClF,qBAAa,EAAE,GAAG,YAAY,mBAAmB;AAAA,MACrD;AACA,UAAI,EAAE,qBAAqB,mBAAmB,GAAG;AAC7C,cAAM,kBAAkB,QAAQ,qBAAqB,SAAS,mBAAmB,CAAC;AAClF,qBAAa,EAAE,GAAG,YAAY,gBAAgB;AAAA,MAClD;AACA,UAAI,EAAE,qBAAqB,yBAAyB,KAAK,EAAE,qBAAqB,4BAA4B,GAAG;AAC3G,cAAM,kBAAkB,uBAAuB,oBAAoB;AACnE,qBAAa,EAAE,GAAG,YAAY,gBAAgB;AAAA,MAClD;AACA,UAAI,EAAE,qBAAqB,4BAA4B,KAAK,EAAE,qBAAqB,4BAA4B,GAAG;AAC9G,cAAM,qBAAqB,sBAAsB;AACjD,qBAAa,EAAE,GAAG,YAAY,mBAAmB;AAAA,MACrD;AACA,UAAI,EAAE,qBAAqB,8BAA8B,GAAG;AACxD,cAAM,uBAAuB,4BAA4B,oBAAoB;AAC7E,qBAAa,EAAE,GAAG,YAAY,qBAAqB;AAAA,MACvD;AACA,UAAI,EAAE,qBAAqB,sBAAsB,KAAK,QAAQ,wBAAwB,QAAW;AAC7F,cAAM,sBAAsB,QAAQ,qBAAqB,SAAS,sBAAsB,CAAC;AACzF,qBAAa,EAAE,GAAG,YAAY,oBAAoB;AAAA,MACtD;AACA,UAAI,EAAE,qBAAqB,eAAe,GAAG;AACzC,cAAM,eAAe,QAAQ,qBAAqB,SAAS,eAAe,CAAC;AAC3E,qBAAa,EAAE,GAAG,YAAY,aAAa;AAAA,MAC/C;AACA,UAAI,EAAE,qBAAqB,cAAc,KAAK,QAAQ,6BAA6B,QAAW;AAC1F,qBAAa,EAAE,GAAG,YAAY,0BAA0B,qBAAqB,SAAS,cAAc,MAAM,cAAc;AAAA,MAC5H;AACA,UAAI,EAAE,qBAAqB,gBAAgB,GAAG;AAC1C,cAAM,qBAAqB,qBAAqB,SAAS,gBAAgB;AACzE,qBAAa,EAAE,GAAG,YAAY,mBAAmB;AAAA,MACrD;AACA,UAAI,EAAE,qBAAqB,2BAA2B,GAAG;AACrD,cAAM,2BAA2B,KAAK,IAAI,GAAG,qBAAqB,SAAS,2BAA2B,CAAC;AACvG,qBAAa,EAAE,GAAG,YAAY,yBAAyB;AAAA,MAC3D;AACA,UAAI,EAAE,qBAAqB,8BAA8B,GAAG;AACxD,cAAM,8BAA8B,qBAAqB,SAAS,8BAA8B;AAChG,qBAAa,EAAE,GAAG,YAAY,4BAA4B;AAAA,MAC9D;AACA,UAAI,EAAE,qBAAqB,wBAAwB,GAAG;AAClD,cAAM,wBAAwB,qBAAqB,SAAS,wBAAwB;AACpF,qBAAa,EAAE,GAAG,YAAY,sBAAsB;AAAA,MACxD;AACA,UAAI,OAAO,KAAK,UAAU,EAAE,SAAS,GAAG;AACpC,aAAK,cAAc,UAAU;AAAA,MACjC;AAAA,IACJ,CAAC,GAAG,KAAK,kBAAkB,mBAAmB,OAAK;AAC/C,UAAI,EAAE,YAAY,sBAAsB,GAAG;AACvC,aAAK,cAAc,EAAE,oBAAoB,sBAAsB,EAAE,CAAC;AAAA,MACtE;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,YAAY,IAAI,sBAAsB,MAAM,EAAE,sBAAsB,GAAG,QAAQ,CAAC;AACrF,SAAK,YAAY,KAAK,KAAK,SAAS;AAAA,EACxC;AAAA,EACA,cAAc,SAAS;AACnB,QAAI,QAAQ,6BAA6B,QAAW;AAChD,WAAK,wBAAwB,IAAI,CAAC,CAAC,QAAQ,wBAAwB;AAAA,IACvE;AAAA,EACJ;AAAA,EACA,qBAAqB,gBAAgB;AACjC,SAAK,KAAK,MAAM,iBAAiB,cAAc,cAAc,IAAI,iBAAiB;AAAA,EACtF;AAAA,EACA,UAAU;AACN,SAAK,cAAc,QAAQ,KAAK,WAAW;AAAA,EAC/C;AACJ;AACA,yBAAyBC,YAAW;AAAA,EAChC,QAAQ,GAAG,kBAAkB;AAAA,EAC7B,QAAQ,GAAG,YAAY;AAAA,EACvB,QAAQ,GAAG,qBAAqB;AACpC,GAAG,sBAAsB;AACzB,IAAM,wBAAwB,SAAS,GAAG,WAAwB,aAAa;AAC/E,sBAAsB,sBAAsB;AAAA,EACxC,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,OAAO,SAAS,+BAA+B,WAAW;AAAA,EAC1D,MAAM;AAAA,EACN,YAAY;AAAA,IACR,CAAC,6BAA6B,GAAG;AAAA,MAC7B,MAAM;AAAA,MACN,MAAM,CAAC,WAAW,KAAK;AAAA,MACvB,0BAA0B;AAAA,QACtB,SAAS,+BAA+B,mEAAmE;AAAA,QAC3G,SAAS,2BAA2B,8DAA8D;AAAA,MACtG;AAAA,MACA,SAAS;AAAA,MACT,aAAa,SAAS;AAAA,QAClB,KAAK;AAAA,QACL,SAAS;AAAA,UACL;AAAA,UACA;AAAA,QACJ;AAAA,MACJ,GAAG,qRAAqR;AAAA,IAC5R;AAAA,IACA,CAAC,kBAAkB,GAAG;AAAA,MAClB,MAAM;AAAA,MACN,MAAM,CAAC,eAAe,aAAa;AAAA,MACnC,SAAS;AAAA,MACT,aAAa,SAAS;AAAA,QAClB,KAAK;AAAA,QACL,SAAS,CAAC,qGAAqG;AAAA,MACnH,GAAG,2KAA2K;AAAA,IAClL;AAAA,IACA,CAAC,sBAAsB,GAAG;AAAA,MACtB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa,SAAS,+BAA+B,iJAAiJ;AAAA,IAC1M;AAAA,IACA,CAAC,eAAe,GAAG;AAAA,MACf,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa,SAAS,qBAAqB,+DAA+D;AAAA,IAC9G;AAAA,IACA,CAAC,aAAa,GAAG;AAAA,MACb,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa,SAAS,uBAAuB,sCAAsC;AAAA,IACvF;AAAA,IACA,CAAC,yBAAyB,GAAG;AAAA,MACzB,MAAM;AAAA,MACN,MAAM,CAAC,QAAQ,WAAW,QAAQ;AAAA,MAClC,SAAS;AAAA,MACT,aAAa,SAAS,6BAA6B,wDAAwD;AAAA,IAC/G;AAAA,IACA,CAAC,mBAAmB,GAAG;AAAA,MACnB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa,SAAS,gCAAgC,yDAAyD;AAAA,IACnH;AAAA,IACA,CAAC,8BAA8B,GAAG;AAAA,MAC9B,MAAM;AAAA,MACN,SAAS;AAAA,MACT,qBAAqB,SAAS,kCAAkC,oFAAoF;AAAA,IACxJ;AAAA,IACA,CAAC,wBAAwB,GAAG;AAAA,MACxB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,qBAAqB,SAAS,2BAA2B,iDAAiD;AAAA,IAC9G;AAAA,IACA,CAAC,yBAAyB,GAAG;AAAA,MACzB,MAAM;AAAA,MACN,MAAM,CAAC,aAAa,QAAQ;AAAA,MAC5B,kBAAkB;AAAA,QACd,SAAS,uCAAuC,gHAAgH;AAAA,QAChK,SAAS,oCAAoC,iCAAiC;AAAA,MAClF;AAAA,MACA,SAAS;AAAA,MACT,aAAa,SAAS,6BAA6B,sEAAsE;AAAA,IAC7H;AAAA,IACA,CAAC,4BAA4B,GAAG;AAAA,MAC5B,MAAM;AAAA,MACN,MAAM,CAAC,UAAU,aAAa,QAAQ;AAAA,MACtC,kBAAkB;AAAA,QACd,SAAS,uCAAuC,gHAAgH;AAAA,QAChK,SAAS,0CAA0C,+JAA+J;AAAA,QAClN,SAAS,uCAAuC,6GAA6G;AAAA,MACjK;AAAA,MACA,SAAS;AAAA,MACT,aAAa,SAAS,gCAAgC,mHAAmH;AAAA,MACzK,YAAY;AAAA,MACZ,oBAAoB,SAAS,0CAA0C,8FAA8F;AAAA,IACzK;AAAA,IACA,CAAC,8BAA8B,GAAG;AAAA,MAC9B,MAAM;AAAA,MACN,MAAM,CAAC,SAAS,YAAY;AAAA,MAC5B,kBAAkB;AAAA,QACd,SAAS,wCAAwC,oCAAoC;AAAA,QACrF,SAAS,6CAA6C,yCAAyC;AAAA,MACnG;AAAA,MACA,SAAS;AAAA,MACT,aAAa,SAAS,kCAAkC,qFAAqF;AAAA,IACjJ;AAAA,IACA,CAAC,cAAc,GAAG;AAAA,MACd,MAAM;AAAA,MACN,MAAM,CAAC,eAAe,aAAa;AAAA,MACnC,SAAS;AAAA,MACT,aAAa,SAAS,eAAe,oKAAoK;AAAA,IAC7M;AAAA,IACA,CAAC,gBAAgB,GAAG;AAAA,MAChB,MAAM;AAAA,MACN,SAAS,OAAO,gBAAQ,YAAY,YAAY,gBAAQ,YAAY;AAAA;AAAA,MACpE,aAAa,SAAS,iBAAiB,wDAAwD;AAAA,IACnG;AAAA,IACA,CAAC,2BAA2B,GAAG;AAAA,MAC3B,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,qBAAqB,SAAS,+BAA+B,qHAAqH;AAAA,IACtL;AAAA,IACA,CAAC,4BAA4B,GAAG;AAAA,MAC5B,MAAM;AAAA,MACN,MAAM,CAAC,aAAa,SAAS;AAAA,MAC7B,SAAS;AAAA,MACT,qBAAqB,SAAS,uBAAuB,6KAA6K;AAAA,IACtO;AAAA,EACJ;AACJ,CAAC;;;ACngCM,IAAM,mBAAmB,gBAAgB,uBAAuB;AAChE,IAAM,eAAN,MAAmB;AAAA,EACtB,YAAY,UAAU;AAClB,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,OAAO,QAAQ,MAAM;AACjB,WAAO,KAAK,MAAM,IAAI,CAAAC,UAAQ;AAC1B,UAAI,iBAAiB,GAAGA,KAAI,GAAG;AAC3B,eAAO,iBAAiB,KAAKA,KAAI;AAAA,MACrC;AACA,UAAI,iBAAiB,GAAGA,KAAI,GAAG;AAC3B,eAAO,iBAAiB,KAAKA,KAAI;AAAA,MACrC;AACA,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACtC,CAAC;AAAA,EACL;AACJ;AACO,IAAM,mBAAN,MAAM,0BAAyB,aAAa;AAAA,EAC/C,OAAO,GAAG,WAAW;AACjB,QAAI,qBAAqB,mBAAkB;AACvC,aAAO;AAAA,IACX;AACA,WAAO,SAAS,SAAS,KAClB,IAAI,MAAM,UAAU,QAAQ,KAC5B,SAAS,UAAU,QAAQ;AAAA,EACtC;AAAA,EACA,OAAO,KAAK,MAAM;AACd,QAAI,gBAAgB,mBAAkB;AAClC,aAAO;AAAA,IACX,OACK;AACD,aAAO,IAAI,kBAAiB,KAAK,UAAU,KAAK,UAAU,KAAK,WAAW,KAAK,QAAQ;AAAA,IAC3F;AAAA,EACJ;AAAA,EACA,YAAY,UAAU,UAAU,YAAY,QAAW,UAAU;AAC7D,UAAM,QAAQ;AACd,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,YAAY;AAAA,EACrB;AACJ;AACO,IAAM,mBAAN,MAAM,0BAAyB,aAAa;AAAA,EAC/C,OAAO,GAAG,WAAW;AACjB,QAAI,qBAAqB,mBAAkB;AACvC,aAAO;AAAA,IACX,OACK;AACD,aAAO,SAAS,SAAS,MACjB,QAAQ,UAAU,WAAW,KAAK,QAAQ,UAAU,WAAW;AAAA,IAC3E;AAAA,EACJ;AAAA,EACA,OAAO,KAAK,MAAM;AACd,QAAI,gBAAgB,mBAAkB;AAClC,aAAO;AAAA,IACX,OACK;AACD,aAAO,IAAI,kBAAiB,KAAK,aAAa,KAAK,aAAa,KAAK,SAAS,KAAK,QAAQ;AAAA,IAC/F;AAAA,EACJ;AAAA,EACA,YAAY,aAAa,aAAa,UAAU,CAAC,GAAG,UAAU;AAC1D,UAAM,QAAQ;AACd,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,UAAU;AAAA,EACnB;AACJ;;;AClEA,OAAO;AACA,IAAM,aAAN,MAAiB;AAAA,EACpB,YAAY,WAAW,SAAS,QAAQ;AACpC,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,UAAU,OAAO,WAAW,EAAE,qBAAqB,CAAC;AACzD,SAAK,cAAc,KAAK,QAAQ,eAAe;AAC/C,SAAK,cAAc,KAAK,QAAQ,eAAe;AAC/C,SAAK,SAAS,KAAK,QAAQ,SAAS,CAAC;AAAA,EACzC;AAAA,EACA,SAAS,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,eAAe,aAAa;AACxB,SAAK,cAAc;AACnB,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,SAAS;AACL,QAAI,IAAI;AACR,SAAK,QAAQ,cAAc,OAAO,KAAK,aAAa,KAAK,KAAK;AAC9D,SAAK,QAAQ,QAAQ,OAAO,KAAK,aAAa,KAAK,KAAK;AACxD,SAAK,QAAQ,MAAM,mBAAmB,KAAK,KAAK,OAAO,qBAAqB,QAAQ,OAAO,SAAS,KAAK;AACzG,SAAK,QAAQ,MAAM,SAAS,KAAK,KAAK,OAAO,qBAAqB,QAAQ,OAAO,SAAS,KAAK;AAC/F,QAAI,KAAK,OAAO,aAAa;AACzB,WAAK,QAAQ,MAAM,SAAS,aAAa,KAAK,OAAO,WAAW;AAAA,IACpE;AAAA,EACJ;AACJ;",
  "names": ["range", "MarkerSeverity", "IMarkerData", "State", "Sizing", "start", "alt", "minDelta", "maxDelta", "size", "onChangeDisposable", "item", "index", "disposable", "h", "ObjectTreeElementCollapseState", "TreeMouseEventTarget", "node", "model", "ref", "RenderIndentGuides", "TreeFindMode", "TreeFindMatchType", "renderer", "$", "collapsed", "splice", "node", "e", "asTreeMouseEvent", "asObjectTreeOptions", "dfs", "node", "__decorate", "WorkbenchList", "options", "horizontalScrolling", "WorkbenchPagedList", "options", "horizontalScrolling", "__decorate", "WorkbenchTable", "options", "horizontalScrolling", "__decorate", "WorkbenchObjectTree", "__decorate", "WorkbenchCompressibleObjectTree", "__decorate", "WorkbenchDataTree", "__decorate", "WorkbenchAsyncDataTree", "__decorate", "WorkbenchCompressibleAsyncDataTree", "__decorate", "WorkbenchTreeInternals", "__decorate", "edit"]
}
