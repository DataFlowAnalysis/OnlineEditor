import {
  require_model_utils
} from "./chunk-VAGWBBZP.js";
import {
  __commonJS
} from "./chunk-6NOISVLF.js";

// node_modules/sprotty-protocol/lib/utils/object.js
var require_object = __commonJS({
  "node_modules/sprotty-protocol/lib/utils/object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.safeAssign = exports.hasOwnProperty = exports.isObject = void 0;
    function isObject(data) {
      return typeof data === "object" && data !== null;
    }
    exports.isObject = isObject;
    function hasOwnProperty(arg, key, type) {
      if (!isObject(arg)) {
        return false;
      }
      if (Array.isArray(key)) {
        for (const k of key) {
          if (!Object.prototype.hasOwnProperty.call(arg, k)) {
            return false;
          }
          if (typeof type === "string" && typeof arg[k] !== type) {
            return false;
          } else if (typeof type === "function" && !type(arg[k])) {
            return false;
          }
        }
      } else {
        if (!Object.prototype.hasOwnProperty.call(arg, key)) {
          return false;
        }
        if (typeof type === "string") {
          return typeof arg[key] === type;
        }
        if (typeof type === "function") {
          return type(arg[key]);
        }
      }
      return true;
    }
    exports.hasOwnProperty = hasOwnProperty;
    function safeAssign(target, partial) {
      return Object.assign(target, partial);
    }
    exports.safeAssign = safeAssign;
  }
});

// node_modules/sprotty-protocol/lib/actions.js
var require_actions = __commonJS({
  "node_modules/sprotty-protocol/lib/actions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReconnectAction = exports.ApplyLabelEditAction = exports.DeleteElementAction = exports.CreateElementAction = exports.HoverFeedbackAction = exports.MoveAction = exports.RedoAction = exports.UndoAction = exports.BringToFrontAction = exports.ViewportResult = exports.GetViewportAction = exports.SetViewportAction = exports.FitToScreenAction = exports.CenterAction = exports.LayoutAction = exports.OpenAction = exports.CollapseExpandAllAction = exports.CollapseExpandAction = exports.SelectionResult = exports.GetSelectionAction = exports.SelectAllAction = exports.SelectAction = exports.LoggingAction = exports.ComputedBoundsAction = exports.RequestBoundsAction = exports.SetBoundsAction = exports.SetPopupModelAction = exports.RequestPopupModelAction = exports.UpdateModelAction = exports.SetModelAction = exports.RequestModelAction = exports.RejectAction = exports.isResponseAction = exports.setRequestContext = exports.generateRequestId = exports.isRequestAction = exports.isAction = exports.isActionMessage = void 0;
    var object_1 = require_object();
    function isActionMessage(object) {
      return (0, object_1.hasOwnProperty)(object, "action");
    }
    exports.isActionMessage = isActionMessage;
    function isAction(object) {
      return (0, object_1.hasOwnProperty)(object, "kind", "string");
    }
    exports.isAction = isAction;
    function isRequestAction(object) {
      return (0, object_1.hasOwnProperty)(object, "requestId", "string");
    }
    exports.isRequestAction = isRequestAction;
    var requestContext = "";
    var nextRequestId = 1;
    function generateRequestId() {
      return `${requestContext}_${nextRequestId++}`;
    }
    exports.generateRequestId = generateRequestId;
    function setRequestContext(context) {
      requestContext = context;
    }
    exports.setRequestContext = setRequestContext;
    function isResponseAction(object) {
      return (0, object_1.hasOwnProperty)(object, "responseId", "string") && object.responseId !== "";
    }
    exports.isResponseAction = isResponseAction;
    var RejectAction;
    (function(RejectAction2) {
      RejectAction2.KIND = "rejectRequest";
      function create(options) {
        return {
          kind: RejectAction2.KIND,
          message: options.message,
          detail: options.detail,
          responseId: options.requestId
        };
      }
      RejectAction2.create = create;
    })(RejectAction || (exports.RejectAction = RejectAction = {}));
    var RequestModelAction;
    (function(RequestModelAction2) {
      RequestModelAction2.KIND = "requestModel";
      function create(options) {
        return {
          kind: RequestModelAction2.KIND,
          options,
          requestId: generateRequestId()
        };
      }
      RequestModelAction2.create = create;
    })(RequestModelAction || (exports.RequestModelAction = RequestModelAction = {}));
    var SetModelAction;
    (function(SetModelAction2) {
      SetModelAction2.KIND = "setModel";
      function create(newRoot, requestId = "") {
        return {
          kind: SetModelAction2.KIND,
          newRoot,
          responseId: requestId
        };
      }
      SetModelAction2.create = create;
    })(SetModelAction || (exports.SetModelAction = SetModelAction = {}));
    var UpdateModelAction;
    (function(UpdateModelAction2) {
      UpdateModelAction2.KIND = "updateModel";
      function create(input, options = {}) {
        if (Array.isArray(input)) {
          return {
            kind: UpdateModelAction2.KIND,
            matches: input,
            animate: options.animate,
            cause: options.cause
          };
        } else {
          return {
            kind: UpdateModelAction2.KIND,
            newRoot: input,
            animate: options.animate,
            cause: options.cause
          };
        }
      }
      UpdateModelAction2.create = create;
    })(UpdateModelAction || (exports.UpdateModelAction = UpdateModelAction = {}));
    var RequestPopupModelAction;
    (function(RequestPopupModelAction2) {
      RequestPopupModelAction2.KIND = "requestPopupModel";
      function create(options) {
        return {
          kind: RequestPopupModelAction2.KIND,
          elementId: options.elementId,
          bounds: options.bounds,
          requestId: generateRequestId()
        };
      }
      RequestPopupModelAction2.create = create;
    })(RequestPopupModelAction || (exports.RequestPopupModelAction = RequestPopupModelAction = {}));
    var SetPopupModelAction;
    (function(SetPopupModelAction2) {
      SetPopupModelAction2.KIND = "setPopupModel";
      function create(newRoot, requestId = "") {
        return {
          kind: SetPopupModelAction2.KIND,
          newRoot,
          responseId: requestId
        };
      }
      SetPopupModelAction2.create = create;
    })(SetPopupModelAction || (exports.SetPopupModelAction = SetPopupModelAction = {}));
    var SetBoundsAction;
    (function(SetBoundsAction2) {
      SetBoundsAction2.KIND = "setBounds";
      function create(bounds) {
        return {
          kind: SetBoundsAction2.KIND,
          bounds
        };
      }
      SetBoundsAction2.create = create;
    })(SetBoundsAction || (exports.SetBoundsAction = SetBoundsAction = {}));
    var RequestBoundsAction;
    (function(RequestBoundsAction2) {
      RequestBoundsAction2.KIND = "requestBounds";
      function create(newRoot) {
        return {
          kind: RequestBoundsAction2.KIND,
          newRoot,
          requestId: generateRequestId()
        };
      }
      RequestBoundsAction2.create = create;
    })(RequestBoundsAction || (exports.RequestBoundsAction = RequestBoundsAction = {}));
    var ComputedBoundsAction;
    (function(ComputedBoundsAction2) {
      ComputedBoundsAction2.KIND = "computedBounds";
      function create(bounds, options = {}) {
        var _a;
        return {
          kind: ComputedBoundsAction2.KIND,
          bounds,
          revision: options.revision,
          alignments: options.alignments,
          responseId: (_a = options.requestId) !== null && _a !== void 0 ? _a : ""
        };
      }
      ComputedBoundsAction2.create = create;
    })(ComputedBoundsAction || (exports.ComputedBoundsAction = ComputedBoundsAction = {}));
    var LoggingAction;
    (function(LoggingAction2) {
      LoggingAction2.KIND = "logging";
      function create(options) {
        return Object.assign({ kind: LoggingAction2.KIND }, options);
      }
      LoggingAction2.create = create;
    })(LoggingAction || (exports.LoggingAction = LoggingAction = {}));
    var SelectAction;
    (function(SelectAction2) {
      SelectAction2.KIND = "elementSelected";
      function create(options) {
        var _a, _b;
        return {
          kind: SelectAction2.KIND,
          selectedElementsIDs: (_a = options.selectedElementsIDs) !== null && _a !== void 0 ? _a : [],
          deselectedElementsIDs: (_b = options.deselectedElementsIDs) !== null && _b !== void 0 ? _b : []
        };
      }
      SelectAction2.create = create;
    })(SelectAction || (exports.SelectAction = SelectAction = {}));
    var SelectAllAction;
    (function(SelectAllAction2) {
      SelectAllAction2.KIND = "allSelected";
      function create(options = {}) {
        var _a;
        return {
          kind: SelectAllAction2.KIND,
          select: (_a = options.select) !== null && _a !== void 0 ? _a : true
        };
      }
      SelectAllAction2.create = create;
    })(SelectAllAction || (exports.SelectAllAction = SelectAllAction = {}));
    var GetSelectionAction;
    (function(GetSelectionAction2) {
      GetSelectionAction2.KIND = "getSelection";
      function create() {
        return {
          kind: GetSelectionAction2.KIND,
          requestId: generateRequestId()
        };
      }
      GetSelectionAction2.create = create;
    })(GetSelectionAction || (exports.GetSelectionAction = GetSelectionAction = {}));
    var SelectionResult;
    (function(SelectionResult2) {
      SelectionResult2.KIND = "selectionResult";
      function create(selectedElementsIDs, requestId) {
        return {
          kind: SelectionResult2.KIND,
          selectedElementsIDs,
          responseId: requestId
        };
      }
      SelectionResult2.create = create;
    })(SelectionResult || (exports.SelectionResult = SelectionResult = {}));
    var CollapseExpandAction;
    (function(CollapseExpandAction2) {
      CollapseExpandAction2.KIND = "collapseExpand";
      function create(options) {
        var _a, _b;
        return {
          kind: CollapseExpandAction2.KIND,
          expandIds: (_a = options.expandIds) !== null && _a !== void 0 ? _a : [],
          collapseIds: (_b = options.collapseIds) !== null && _b !== void 0 ? _b : []
        };
      }
      CollapseExpandAction2.create = create;
    })(CollapseExpandAction || (exports.CollapseExpandAction = CollapseExpandAction = {}));
    var CollapseExpandAllAction;
    (function(CollapseExpandAllAction2) {
      CollapseExpandAllAction2.KIND = "collapseExpandAll";
      function create(options = {}) {
        var _a;
        return {
          kind: CollapseExpandAllAction2.KIND,
          expand: (_a = options.expand) !== null && _a !== void 0 ? _a : true
        };
      }
      CollapseExpandAllAction2.create = create;
    })(CollapseExpandAllAction || (exports.CollapseExpandAllAction = CollapseExpandAllAction = {}));
    var OpenAction;
    (function(OpenAction2) {
      OpenAction2.KIND = "open";
      function create(elementId) {
        return {
          kind: OpenAction2.KIND,
          elementId
        };
      }
      OpenAction2.create = create;
    })(OpenAction || (exports.OpenAction = OpenAction = {}));
    var LayoutAction;
    (function(LayoutAction2) {
      LayoutAction2.KIND = "layout";
      function create(options = {}) {
        return {
          kind: LayoutAction2.KIND,
          layoutType: options.layoutType,
          elementIds: options.elementIds
        };
      }
      LayoutAction2.create = create;
    })(LayoutAction || (exports.LayoutAction = LayoutAction = {}));
    var CenterAction;
    (function(CenterAction2) {
      CenterAction2.KIND = "center";
      function create(elementIds, options = {}) {
        var _a, _b;
        return {
          kind: CenterAction2.KIND,
          elementIds,
          animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true,
          retainZoom: (_b = options.retainZoom) !== null && _b !== void 0 ? _b : false,
          zoomScale: options.zoomScale
        };
      }
      CenterAction2.create = create;
    })(CenterAction || (exports.CenterAction = CenterAction = {}));
    var FitToScreenAction;
    (function(FitToScreenAction2) {
      FitToScreenAction2.KIND = "fit";
      function create(elementIds, options = {}) {
        var _a;
        return {
          kind: FitToScreenAction2.KIND,
          elementIds,
          padding: options.padding,
          maxZoom: options.maxZoom,
          animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true
        };
      }
      FitToScreenAction2.create = create;
    })(FitToScreenAction || (exports.FitToScreenAction = FitToScreenAction = {}));
    var SetViewportAction;
    (function(SetViewportAction2) {
      SetViewportAction2.KIND = "viewport";
      function create(elementId, newViewport, options = {}) {
        var _a;
        return {
          kind: SetViewportAction2.KIND,
          elementId,
          newViewport,
          animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true
        };
      }
      SetViewportAction2.create = create;
    })(SetViewportAction || (exports.SetViewportAction = SetViewportAction = {}));
    var GetViewportAction;
    (function(GetViewportAction2) {
      GetViewportAction2.KIND = "getViewport";
      function create() {
        return {
          kind: GetViewportAction2.KIND,
          requestId: generateRequestId()
        };
      }
      GetViewportAction2.create = create;
    })(GetViewportAction || (exports.GetViewportAction = GetViewportAction = {}));
    var ViewportResult;
    (function(ViewportResult2) {
      ViewportResult2.KIND = "viewportResult";
      function create(viewport, canvasBounds, requestId) {
        return {
          kind: ViewportResult2.KIND,
          viewport,
          canvasBounds,
          responseId: requestId
        };
      }
      ViewportResult2.create = create;
    })(ViewportResult || (exports.ViewportResult = ViewportResult = {}));
    var BringToFrontAction;
    (function(BringToFrontAction2) {
      BringToFrontAction2.KIND = "bringToFront";
      function create(elementIDs) {
        return {
          kind: BringToFrontAction2.KIND,
          elementIDs
        };
      }
      BringToFrontAction2.create = create;
    })(BringToFrontAction || (exports.BringToFrontAction = BringToFrontAction = {}));
    var UndoAction;
    (function(UndoAction2) {
      UndoAction2.KIND = "undo";
      function create() {
        return {
          kind: UndoAction2.KIND
        };
      }
      UndoAction2.create = create;
    })(UndoAction || (exports.UndoAction = UndoAction = {}));
    var RedoAction;
    (function(RedoAction2) {
      RedoAction2.KIND = "redo";
      function create() {
        return {
          kind: RedoAction2.KIND
        };
      }
      RedoAction2.create = create;
    })(RedoAction || (exports.RedoAction = RedoAction = {}));
    var MoveAction;
    (function(MoveAction2) {
      MoveAction2.KIND = "move";
      function create(moves, options = {}) {
        var _a, _b;
        return {
          kind: MoveAction2.KIND,
          moves,
          animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true,
          finished: (_b = options.finished) !== null && _b !== void 0 ? _b : false
        };
      }
      MoveAction2.create = create;
    })(MoveAction || (exports.MoveAction = MoveAction = {}));
    var HoverFeedbackAction;
    (function(HoverFeedbackAction2) {
      HoverFeedbackAction2.KIND = "hoverFeedback";
      function create(options) {
        return {
          kind: HoverFeedbackAction2.KIND,
          mouseoverElement: options.mouseoverElement,
          mouseIsOver: options.mouseIsOver
        };
      }
      HoverFeedbackAction2.create = create;
    })(HoverFeedbackAction || (exports.HoverFeedbackAction = HoverFeedbackAction = {}));
    var CreateElementAction;
    (function(CreateElementAction2) {
      CreateElementAction2.KIND = "createElement";
      function create(elementSchema, options) {
        return {
          kind: CreateElementAction2.KIND,
          elementSchema,
          containerId: options.containerId
        };
      }
      CreateElementAction2.create = create;
    })(CreateElementAction || (exports.CreateElementAction = CreateElementAction = {}));
    var DeleteElementAction;
    (function(DeleteElementAction2) {
      DeleteElementAction2.KIND = "delete";
      function create(elementIds) {
        return {
          kind: DeleteElementAction2.KIND,
          elementIds
        };
      }
      DeleteElementAction2.create = create;
    })(DeleteElementAction || (exports.DeleteElementAction = DeleteElementAction = {}));
    var ApplyLabelEditAction;
    (function(ApplyLabelEditAction2) {
      ApplyLabelEditAction2.KIND = "applyLabelEdit";
      function create(labelId, text) {
        return {
          kind: ApplyLabelEditAction2.KIND,
          labelId,
          text
        };
      }
      ApplyLabelEditAction2.create = create;
    })(ApplyLabelEditAction || (exports.ApplyLabelEditAction = ApplyLabelEditAction = {}));
    var ReconnectAction;
    (function(ReconnectAction2) {
      ReconnectAction2.KIND = "reconnect";
      function create(options) {
        return {
          kind: ReconnectAction2.KIND,
          routableId: options.routableId,
          newSourceId: options.newSourceId,
          newTargetId: options.newTargetId
        };
      }
      ReconnectAction2.create = create;
    })(ReconnectAction || (exports.ReconnectAction = ReconnectAction = {}));
  }
});

// node_modules/sprotty-protocol/lib/utils/async.js
var require_async = __commonJS({
  "node_modules/sprotty-protocol/lib/utils/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Deferred = void 0;
    var Deferred = class {
      constructor() {
        this._state = "unresolved";
        this.promise = new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
        this.promise.then((res) => this._state = "resolved", (rej) => this._state = "rejected");
      }
      set state(state) {
        if (this._state === "unresolved") {
          this._state = state;
        }
      }
      get state() {
        return this._state;
      }
    };
    exports.Deferred = Deferred;
  }
});

// node_modules/sprotty-protocol/lib/diagram-server.js
var require_diagram_server = __commonJS({
  "node_modules/sprotty-protocol/lib/diagram-server.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiagramServer = void 0;
    var actions_1 = require_actions();
    var async_1 = require_async();
    var model_utils_1 = require_model_utils();
    var DiagramServer = class {
      constructor(dispatch, services) {
        this.state = {
          currentRoot: {
            type: "NONE",
            id: "ROOT"
          },
          revision: 0
        };
        this.requests = /* @__PURE__ */ new Map();
        this.dispatch = dispatch;
        this.diagramGenerator = services.DiagramGenerator;
        this.layoutEngine = services.ModelLayoutEngine;
        this.actionHandlerRegistry = services.ServerActionHandlerRegistry;
      }
      /**
       * Set the model and submit it to the client.
       */
      setModel(newRoot) {
        newRoot.revision = ++this.state.revision;
        this.state.currentRoot = newRoot;
        return this.submitModel(newRoot, false);
      }
      /**
       * Update the model to a new state and submit it to the client.
       */
      updateModel(newRoot) {
        newRoot.revision = ++this.state.revision;
        this.state.currentRoot = newRoot;
        return this.submitModel(newRoot, true);
      }
      /**
       * Whether the client needs to compute the layout of parts of the model. This affects the behavior
       * of `submitModel`.
       *
       * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`
       * from the client. If the client does not specify whether it needs client layout, the default value
       * is `true`.
       */
      get needsClientLayout() {
        if (this.state.options && this.state.options.needsClientLayout !== void 0) {
          return !!this.state.options.needsClientLayout;
        }
        return true;
      }
      /**
       * Whether the server needs to compute the layout of parts of the model. This affects the behavior
       * of `submitModel`.
       *
       * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`
       * from the client. If the client does not specify whether it needs server layout, the default value
       * is `false`.
       */
      get needsServerLayout() {
        if (this.state.options && this.state.options.needsServerLayout !== void 0) {
          return !!this.state.options.needsServerLayout;
        }
        return false;
      }
      /**
       * Called when an action is received from the client.
       */
      accept(action) {
        if ((0, actions_1.isResponseAction)(action)) {
          const id = action.responseId;
          const future = this.requests.get(id);
          if (future) {
            this.requests.delete(id);
            if (action.kind === actions_1.RejectAction.KIND) {
              const rejectAction = action;
              future.reject(new Error(rejectAction.message));
              console.warn(`Request with id ${action.responseId} failed: ${rejectAction.message}`, rejectAction.detail);
            } else {
              future.resolve(action);
            }
            return Promise.resolve();
          }
          console.info("No matching request for response:", action);
        }
        return this.handleAction(action);
      }
      /**
       * Send a request action to the client. The resulting promise is resolved when a matching
       * response is received and rejected when a `RejectAction` is received.
       */
      request(action) {
        if (!action.requestId) {
          action.requestId = "server_" + (0, actions_1.generateRequestId)();
        }
        const future = new async_1.Deferred();
        this.requests.set(action.requestId, future);
        this.dispatch(action).catch((err) => {
          this.requests.delete(action.requestId);
          future.reject(err);
        });
        return future.promise;
      }
      /**
       * Send a `RejectAction` to the client to notify that a request could not be fulfilled.
       */
      rejectRemoteRequest(action, error) {
        if (action && (0, actions_1.isRequestAction)(action)) {
          this.dispatch({
            kind: actions_1.RejectAction.KIND,
            responseId: action.requestId,
            message: error.message,
            detail: error.stack
          });
        }
      }
      handleAction(action) {
        var _a;
        const handlers = (_a = this.actionHandlerRegistry) === null || _a === void 0 ? void 0 : _a.getHandler(action.kind);
        if (handlers && handlers.length === 1) {
          return handlers[0](action, this.state, this);
        } else if (handlers && handlers.length > 1) {
          return Promise.all(handlers.map((h) => h(action, this.state, this)));
        }
        switch (action.kind) {
          case actions_1.RequestModelAction.KIND:
            return this.handleRequestModel(action);
          case actions_1.ComputedBoundsAction.KIND:
            return this.handleComputedBounds(action);
          case actions_1.LayoutAction.KIND:
            return this.handleLayout(action);
        }
        console.warn(`Unhandled action from client: ${action.kind}`);
        return Promise.resolve();
      }
      async handleRequestModel(action) {
        var _a;
        this.state.options = action.options;
        try {
          const newRoot = await this.diagramGenerator.generate({
            options: (_a = this.state.options) !== null && _a !== void 0 ? _a : {},
            state: this.state
          });
          newRoot.revision = ++this.state.revision;
          this.state.currentRoot = newRoot;
          await this.submitModel(this.state.currentRoot, false, action);
        } catch (err) {
          this.rejectRemoteRequest(action, err);
          console.error("Failed to generate diagram:", err);
        }
      }
      /**
       * Submit a model to the client after it has been updated in the server state.
       */
      async submitModel(newRoot, update, cause) {
        if (this.needsClientLayout) {
          if (!this.needsServerLayout) {
            this.dispatch({ kind: actions_1.RequestBoundsAction.KIND, newRoot });
          } else {
            const request = actions_1.RequestBoundsAction.create(newRoot);
            const response = await this.request(request);
            const currentRoot = this.state.currentRoot;
            if (response.revision === currentRoot.revision) {
              (0, model_utils_1.applyBounds)(currentRoot, response);
              await this.doSubmitModel(currentRoot, update, cause);
            } else {
              this.rejectRemoteRequest(cause, new Error(`Model revision does not match: ${response.revision}`));
            }
          }
        } else {
          await this.doSubmitModel(newRoot, update, cause);
        }
      }
      async doSubmitModel(newRoot, update, cause) {
        if (newRoot.revision !== this.state.revision) {
          return;
        }
        if (this.needsServerLayout && this.layoutEngine) {
          newRoot = await this.layoutEngine.layout(newRoot);
        }
        const modelType = newRoot.type;
        if (cause && cause.kind === actions_1.RequestModelAction.KIND) {
          const requestId = cause.requestId;
          const response = actions_1.SetModelAction.create(newRoot, requestId);
          await this.dispatch(response);
        } else if (update && modelType === this.state.lastSubmittedModelType) {
          await this.dispatch({ kind: actions_1.UpdateModelAction.KIND, newRoot, cause });
        } else {
          await this.dispatch({ kind: actions_1.SetModelAction.KIND, newRoot });
        }
        this.state.lastSubmittedModelType = modelType;
      }
      handleComputedBounds(action) {
        if (action.revision !== this.state.currentRoot.revision) {
          return Promise.reject();
        }
        (0, model_utils_1.applyBounds)(this.state.currentRoot, action);
        return Promise.resolve();
      }
      async handleLayout(action) {
        if (!this.layoutEngine) {
          return;
        }
        if (!this.needsServerLayout) {
          let newRoot = (0, model_utils_1.cloneModel)(this.state.currentRoot);
          newRoot = await this.layoutEngine.layout(newRoot);
          newRoot.revision = ++this.state.revision;
          this.state.currentRoot = newRoot;
        }
        await this.doSubmitModel(this.state.currentRoot, true, action);
      }
    };
    exports.DiagramServer = DiagramServer;
  }
});

// node_modules/sprotty-protocol/lib/diagram-services.js
var require_diagram_services = __commonJS({
  "node_modules/sprotty-protocol/lib/diagram-services.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/sprotty-protocol/lib/model.js
var require_model = __commonJS({
  "node_modules/sprotty-protocol/lib/model.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isZoomable = exports.isScrollable = void 0;
    var object_1 = require_object();
    function isScrollable(element) {
      return (0, object_1.hasOwnProperty)(element, "scroll");
    }
    exports.isScrollable = isScrollable;
    function isZoomable(element) {
      return (0, object_1.hasOwnProperty)(element, "zoom");
    }
    exports.isZoomable = isZoomable;
  }
});

// node_modules/sprotty-protocol/lib/utils/geometry.js
var require_geometry = __commonJS({
  "node_modules/sprotty-protocol/lib/utils/geometry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.almostEquals = exports.toRadians = exports.toDegrees = exports.Bounds = exports.isBounds = exports.Dimension = exports.centerOfLine = exports.angleBetweenPoints = exports.angleOfPoint = exports.Point = void 0;
    var object_1 = require_object();
    var Point;
    (function(Point2) {
      Point2.ORIGIN = Object.freeze({
        x: 0,
        y: 0
      });
      function add(p1, p2) {
        return {
          x: p1.x + p2.x,
          y: p1.y + p2.y
        };
      }
      Point2.add = add;
      function subtract(p1, p2) {
        return {
          x: p1.x - p2.x,
          y: p1.y - p2.y
        };
      }
      Point2.subtract = subtract;
      function equals(point1, point2) {
        return point1.x === point2.x && point1.y === point2.y;
      }
      Point2.equals = equals;
      function shiftTowards(point, refPoint, distance) {
        const diff = subtract(refPoint, point);
        const normalized = normalize(diff);
        const shift = { x: normalized.x * distance, y: normalized.y * distance };
        return add(point, shift);
      }
      Point2.shiftTowards = shiftTowards;
      function normalize(point) {
        const mag = magnitude(point);
        if (mag === 0 || mag === 1) {
          return Point2.ORIGIN;
        }
        return {
          x: point.x / mag,
          y: point.y / mag
        };
      }
      Point2.normalize = normalize;
      function magnitude(point) {
        return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
      }
      Point2.magnitude = magnitude;
      function linear(p0, p1, lambda) {
        return {
          x: (1 - lambda) * p0.x + lambda * p1.x,
          y: (1 - lambda) * p0.y + lambda * p1.y
        };
      }
      Point2.linear = linear;
      function euclideanDistance(a, b) {
        const dx = b.x - a.x;
        const dy = b.y - a.y;
        return Math.sqrt(dx * dx + dy * dy);
      }
      Point2.euclideanDistance = euclideanDistance;
      function manhattanDistance(a, b) {
        return Math.abs(b.x - a.x) + Math.abs(b.y - a.y);
      }
      Point2.manhattanDistance = manhattanDistance;
      function maxDistance(a, b) {
        return Math.max(Math.abs(b.x - a.x), Math.abs(b.y - a.y));
      }
      Point2.maxDistance = maxDistance;
    })(Point || (exports.Point = Point = {}));
    function angleOfPoint(p) {
      return Math.atan2(p.y, p.x);
    }
    exports.angleOfPoint = angleOfPoint;
    function angleBetweenPoints(a, b) {
      const lengthProduct = Math.sqrt((a.x * a.x + a.y * a.y) * (b.x * b.x + b.y * b.y));
      if (isNaN(lengthProduct) || lengthProduct === 0)
        return NaN;
      const dotProduct = a.x * b.x + a.y * b.y;
      return Math.acos(dotProduct / lengthProduct);
    }
    exports.angleBetweenPoints = angleBetweenPoints;
    function centerOfLine(s, e) {
      const b = {
        x: s.x > e.x ? e.x : s.x,
        y: s.y > e.y ? e.y : s.y,
        width: Math.abs(e.x - s.x),
        height: Math.abs(e.y - s.y)
      };
      return Bounds.center(b);
    }
    exports.centerOfLine = centerOfLine;
    var Dimension;
    (function(Dimension2) {
      Dimension2.EMPTY = Object.freeze({
        width: -1,
        height: -1
      });
      function isValid(d) {
        return d.width >= 0 && d.height >= 0;
      }
      Dimension2.isValid = isValid;
    })(Dimension || (exports.Dimension = Dimension = {}));
    function isBounds(element) {
      return (0, object_1.hasOwnProperty)(element, ["x", "y", "width", "height"]);
    }
    exports.isBounds = isBounds;
    var Bounds;
    (function(Bounds2) {
      Bounds2.EMPTY = Object.freeze({
        x: 0,
        y: 0,
        width: -1,
        height: -1
      });
      function combine(b0, b1) {
        if (!Dimension.isValid(b0))
          return Dimension.isValid(b1) ? b1 : Bounds2.EMPTY;
        if (!Dimension.isValid(b1))
          return b0;
        const minX = Math.min(b0.x, b1.x);
        const minY = Math.min(b0.y, b1.y);
        const maxX = Math.max(b0.x + (b0.width >= 0 ? b0.width : 0), b1.x + (b1.width >= 0 ? b1.width : 0));
        const maxY = Math.max(b0.y + (b0.height >= 0 ? b0.height : 0), b1.y + (b1.height >= 0 ? b1.height : 0));
        return {
          x: minX,
          y: minY,
          width: maxX - minX,
          height: maxY - minY
        };
      }
      Bounds2.combine = combine;
      function translate(b, p) {
        return {
          x: b.x + p.x,
          y: b.y + p.y,
          width: b.width,
          height: b.height
        };
      }
      Bounds2.translate = translate;
      function center(b) {
        return {
          x: b.x + (b.width >= 0 ? 0.5 * b.width : 0),
          y: b.y + (b.height >= 0 ? 0.5 * b.height : 0)
        };
      }
      Bounds2.center = center;
      function includes(b, p) {
        return p.x >= b.x && p.x <= b.x + b.width && p.y >= b.y && p.y <= b.y + b.height;
      }
      Bounds2.includes = includes;
    })(Bounds || (exports.Bounds = Bounds = {}));
    function toDegrees(a) {
      return a * 180 / Math.PI;
    }
    exports.toDegrees = toDegrees;
    function toRadians(a) {
      return a * Math.PI / 180;
    }
    exports.toRadians = toRadians;
    function almostEquals(a, b) {
      return Math.abs(a - b) < 1e-3;
    }
    exports.almostEquals = almostEquals;
  }
});

// node_modules/sprotty-protocol/lib/utils/json.js
var require_json = __commonJS({
  "node_modules/sprotty-protocol/lib/utils/json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/sprotty-protocol/lib/index.js
var require_lib = __commonJS({
  "node_modules/sprotty-protocol/lib/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_actions(), exports);
    __exportStar(require_diagram_server(), exports);
    __exportStar(require_diagram_services(), exports);
    __exportStar(require_model(), exports);
    __exportStar(require_async(), exports);
    __exportStar(require_geometry(), exports);
    __exportStar(require_json(), exports);
    __exportStar(require_model_utils(), exports);
    __exportStar(require_object(), exports);
  }
});

export {
  require_object,
  require_actions,
  require_async,
  require_geometry,
  require_lib
};
//# sourceMappingURL=chunk-FBBREKZP.js.map
