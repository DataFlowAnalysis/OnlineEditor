{
  "version": 3,
  "sources": ["../../sprotty-protocol/src/utils/object.ts", "../../sprotty-protocol/src/actions.ts", "../../sprotty-protocol/src/utils/async.ts", "../../sprotty-protocol/src/diagram-server.ts", "../../sprotty-protocol/src/model.ts", "../../sprotty-protocol/src/utils/geometry.ts", "../../sprotty-protocol/src/index.ts"],
  "sourcesContent": ["/********************************************************************************\n * Copyright (c) 2017-2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport function isObject(data: unknown): data is Record<PropertyKey, unknown> {\n    return typeof data === 'object' && data !== null;\n}\n\nexport type TypeOf<T> =\n    T extends number ? 'number'\n    : T extends string ? 'string'\n    : T extends boolean ? 'boolean'\n    : T extends bigint ? 'bigint'\n    : T extends symbol ? 'symbol'\n    : T extends Function ? 'function'\n    : T extends object ? 'object'\n    : 'undefined';\n\nexport function hasOwnProperty<K extends PropertyKey, T>(arg: unknown, key: K | K[], type?: TypeOf<T> | ((v: unknown) => v is T)): arg is Record<K, T> {\n    if (!isObject(arg)) {\n        return false;\n    }\n    if (Array.isArray(key)) {\n        for (const k of key) {\n            if (!Object.prototype.hasOwnProperty.call(arg, k)) {\n                return false;\n            }\n            if (typeof type === 'string' && typeof arg[k] !== type) {\n                return false;\n            } else if (typeof type === 'function' && !type(arg[k])) {\n                return false;\n            }\n        }\n    } else {\n        if (!Object.prototype.hasOwnProperty.call(arg, key)) {\n            return false;\n        }\n        if (typeof type === 'string') {\n            return typeof arg[key] === type;\n        }\n        if (typeof type === 'function') {\n            return type(arg[key]);\n        }\n    }\n    return true;\n}\n\nexport function safeAssign<T extends {}>(target: T, partial: Partial<T>): T {\n    return Object.assign(target, partial);\n}\n", "/********************************************************************************\n * Copyright (c) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { SModelRoot, SModelElement, Viewport } from './model';\nimport { Bounds, Point, Dimension } from './utils/geometry';\nimport { JsonAny, JsonMap } from './utils/json';\nimport { hasOwnProperty } from './utils/object';\n\n/**\n * Wrapper for actions when transferring them between client and server.\n * The `clientId` is used to identify the specific diagram instance in the client.\n */\nexport interface ActionMessage {\n    clientId: string\n    action: Action\n}\n\nexport function isActionMessage(object: unknown): object is ActionMessage {\n    return hasOwnProperty(object, 'action');\n}\n\n/**\n * An action describes a change to the model declaratively.\n * It is a plain data structure, and as such transferable between server and client.\n */\nexport interface Action {\n    kind: string;\n}\n\nexport function isAction(object?: unknown): object is Action {\n    return hasOwnProperty<string, string>(object, 'kind', 'string');\n}\n\n/**\n * A request action is tied to the expectation of receiving a corresponding response action.\n * The `requestId` property is used to match the received response with the original request.\n */\nexport interface RequestAction<Res extends ResponseAction> extends Action {\n    requestId: string\n\n    /**\n     * Used to ensure correct typing. Clients must not use this property\n     */\n    readonly _?: Res;\n}\n\nexport function isRequestAction(object?: Action): object is RequestAction<ResponseAction> {\n    return hasOwnProperty<string, string>(object, 'requestId', 'string');\n}\n\nlet requestContext = '';\nlet nextRequestId = 1;\n/**\n * Generate a unique `requestId` for a request action.\n */\nexport function generateRequestId(): string {\n    return `${requestContext}_${nextRequestId++}`;\n}\n\n/**\n * Configure the context in which request actions are created. This is typically either\n * 'client' or 'server' to avoid collisions of request IDs.\n */\nexport function setRequestContext(context: string): void {\n    requestContext = context;\n}\n\n/**\n * A response action is sent to respond to a request action. The `responseId` must match\n * the `requestId` of the preceding request. In case the `responseId` is empty or undefined,\n * the action is handled as standalone, i.e. it was fired without a preceding request.\n */\nexport interface ResponseAction extends Action {\n    responseId: string;\n}\n\n/**\n * A response action is sent to respond to a request action. The `responseId` must match\n * the `requestId` of the preceding request. In case the `responseId` is empty or undefined,\n * the action is handled as standalone, i.e. it was fired without a preceding request.\n */\n\nexport function isResponseAction(object?: Action): object is ResponseAction {\n    return hasOwnProperty<string, string>(object, 'responseId', 'string') && object.responseId !== '';\n}\n\n/**\n * A reject action is fired to indicate that a request must be rejected.\n */\nexport interface RejectAction extends ResponseAction {\n    kind: typeof RejectAction.KIND\n    message: string\n    detail?: JsonAny\n}\nexport namespace RejectAction {\n    export const KIND = 'rejectRequest';\n\n    export function create(options: { message: string, detail?: JsonAny, requestId: string }): RejectAction {\n        return {\n            kind: KIND,\n            message: options.message,\n            detail: options.detail,\n            responseId: options.requestId\n        };\n    }\n}\n\n/**\n * Sent from the client to the model source (e.g. a DiagramServer) in order to request a model. Usually this\n * is the first message that is sent to the source, so it is also used to initiate the communication.\n * The response is a SetModelAction or an UpdateModelAction.\n */\nexport interface RequestModelAction extends RequestAction<SetModelAction> {\n    kind: typeof RequestModelAction.KIND\n    options?: JsonMap\n}\nexport namespace RequestModelAction {\n    export const KIND = 'requestModel';\n\n    export function create(options?: JsonMap): RequestModelAction {\n        return {\n            kind: KIND,\n            options,\n            requestId: generateRequestId()\n        };\n    }\n}\n\n/**\n * Sent from the model source to the client in order to set the model. If a model is already present, it is replaced.\n */\nexport interface SetModelAction extends ResponseAction {\n    kind: typeof SetModelAction.KIND\n    newRoot: SModelRoot\n}\nexport namespace SetModelAction {\n    export const KIND = 'setModel';\n\n    export function create(newRoot: SModelRoot, requestId: string = ''): SetModelAction {\n        return {\n            kind: KIND,\n            newRoot,\n            responseId: requestId\n        };\n    }\n}\n\n/**\n * Sent from the model source to the client in order to update the model. If no model is present yet,\n * this behaves the same as a SetModelAction. The transition from the old model to the new one can be animated.\n */\nexport interface UpdateModelAction {\n    kind: typeof UpdateModelAction.KIND\n    newRoot?: SModelRoot\n    matches?: Match[]\n    animate?: boolean\n    cause?: Action\n}\nexport namespace UpdateModelAction {\n    export const KIND = 'updateModel';\n\n    export function create(input: SModelRoot | Match[], options: { animate?: boolean, cause?: Action } = {}): UpdateModelAction {\n        if (Array.isArray(input)) {\n            return {\n                kind: KIND,\n                matches: input,\n                animate: options.animate,\n                cause: options.cause\n            };\n        } else {\n            return {\n                kind: KIND,\n                newRoot: input,\n                animate: options.animate,\n                cause: options.cause\n            };\n        }\n    }\n}\n\nexport interface Match {\n    left?: SModelElement\n    right?: SModelElement\n    leftParentId?: string\n    rightParentId?: string\n}\n\n/**\n * Triggered when the user hovers the mouse pointer over an element to get a popup with details on\n * that element. This action is sent from the client to the model source, e.g. a DiagramServer.\n * The response is a SetPopupModelAction.\n */\nexport interface RequestPopupModelAction extends RequestAction<SetPopupModelAction> {\n    kind: typeof RequestPopupModelAction.KIND\n    elementId: string\n    bounds: Bounds\n}\nexport namespace RequestPopupModelAction {\n    export const KIND = 'requestPopupModel';\n\n    export function create(options: { elementId: string, bounds: Bounds }): RequestPopupModelAction {\n        return {\n            kind: KIND,\n            elementId: options.elementId,\n            bounds: options.bounds,\n            requestId: generateRequestId()\n        };\n    }\n}\n\n/**\n * Sent from the model source to the client to display a popup in response to a RequestPopupModelAction.\n * This action can also be used to remove any existing popup by choosing EMPTY_ROOT as root element.\n */\nexport interface SetPopupModelAction extends ResponseAction {\n    kind: typeof SetPopupModelAction.KIND\n    newRoot: SModelRoot\n}\nexport namespace SetPopupModelAction {\n    export const KIND = 'setPopupModel';\n\n    export function create(newRoot: SModelRoot, requestId: string = ''): SetPopupModelAction {\n        return {\n            kind: KIND,\n            newRoot,\n            responseId: requestId\n        };\n    }\n}\n\n/**\n * Sent from the model source (e.g. a DiagramServer) to the client to update the bounds of some\n * (or all) model elements.\n */\nexport interface SetBoundsAction extends Action {\n    kind: typeof SetBoundsAction.KIND\n    bounds: ElementAndBounds[]\n}\nexport namespace SetBoundsAction {\n    export const KIND = 'setBounds';\n\n    export function create(bounds: ElementAndBounds[]): SetBoundsAction {\n        return {\n            kind: KIND,\n            bounds\n        };\n    }\n}\n\n/**\n * Sent from the model source to the client to request bounds for the given model. The model is\n * rendered invisibly so the bounds can derived from the DOM. The response is a ComputedBoundsAction.\n * This hidden rendering round-trip is necessary if the client is responsible for parts of the layout\n * (see `needsClientLayout` viewer option).\n */\nexport interface RequestBoundsAction extends RequestAction<ComputedBoundsAction> {\n    kind: typeof RequestBoundsAction.KIND\n    newRoot: SModelRoot\n}\nexport namespace RequestBoundsAction {\n    export const KIND = 'requestBounds';\n\n    export function create(newRoot: SModelRoot): RequestBoundsAction {\n        return {\n            kind: KIND,\n            newRoot,\n            requestId: generateRequestId()\n        };\n    }\n}\n\n/**\n * Sent from the client to the model source (e.g. a DiagramServer) to transmit the result of bounds\n * computation as a response to a RequestBoundsAction. If the server is responsible for parts of\n * the layout (see `needsServerLayout` viewer option), it can do so after applying the computed bounds\n * received with this action. Otherwise there is no need to send the computed bounds to the server,\n * so they can be processed locally by the client.\n */\nexport interface ComputedBoundsAction extends ResponseAction {\n    kind: typeof ComputedBoundsAction.KIND\n    bounds: ElementAndBounds[]\n    revision?: number\n    alignments?: ElementAndAlignment[]\n}\nexport namespace ComputedBoundsAction {\n    export const KIND = 'computedBounds';\n\n    export function create(bounds: ElementAndBounds[], options: { revision?: number, alignments?: ElementAndAlignment[], requestId?: string } = {}): ComputedBoundsAction {\n        return {\n            kind: KIND,\n            bounds,\n            revision: options.revision,\n            alignments: options.alignments,\n            responseId: options.requestId ?? ''\n        };\n    }\n}\n\n/**\n * Associates new bounds with a model element, which is referenced via its id.\n */\nexport interface ElementAndBounds {\n    elementId: string\n    newPosition?: Point\n    newSize: Dimension\n}\n\n/**\n * Associates a new alignment with a model element, which is referenced via its id.\n */\nexport interface ElementAndAlignment {\n    elementId: string\n    newAlignment: Point\n}\n\n/**\n * Transport logging data to be stored elsewhere.\n */\nexport interface LoggingAction extends Action {\n    kind: typeof LoggingAction.KIND;\n    severity: string\n    time: string\n    caller: string\n    message: string\n    params: string[]\n}\nexport namespace LoggingAction {\n    export const KIND = 'logging';\n\n    export function create(options: { severity: string, time: string, caller: string, message: string, params: string[] }): LoggingAction {\n        return {\n            kind: KIND,\n            ...options\n        };\n    }\n}\n\n/**\n * Triggered when the user changes the selection, e.g. by clicking on a selectable element. The resulting\n * SelectCommand changes the `selected` state accordingly, so the elements can be rendered differently.\n * This action is also forwarded to the diagram server, if present, so it may react on the selection change.\n * Furthermore, the server can send such an action to the client in order to change the selection programmatically.\n */\nexport interface SelectAction {\n    kind: typeof SelectAction.KIND\n    selectedElementsIDs: string[]\n    deselectedElementsIDs: string[]\n}\nexport namespace SelectAction {\n    export const KIND = 'elementSelected';\n\n    export function create(options: { selectedElementsIDs?: string[], deselectedElementsIDs?: string[] }): SelectAction {\n        return {\n            kind: KIND,\n            selectedElementsIDs: options.selectedElementsIDs ?? [],\n            deselectedElementsIDs: options.deselectedElementsIDs ?? []\n        };\n    }\n}\n\n/**\n * Programmatic action for selecting or deselecting all elements.\n * If `select` is true, all elements are selected, otherwise they are deselected.\n */\nexport interface SelectAllAction {\n    kind: typeof SelectAllAction.KIND\n    select: boolean\n}\nexport namespace SelectAllAction {\n    export const KIND = 'allSelected';\n\n    export function create(options: { select?: boolean } = {}): SelectAllAction {\n        return {\n            kind: KIND,\n            select: options.select ?? true\n        };\n    }\n}\n\n/**\n * Request action for retrieving the current selection.\n */\nexport interface GetSelectionAction extends RequestAction<SelectionResult> {\n    kind: typeof GetSelectionAction.KIND\n}\nexport namespace GetSelectionAction {\n    export const KIND = 'getSelection';\n\n    export function create(): GetSelectionAction {\n        return {\n            kind: KIND,\n            requestId: generateRequestId()\n        };\n    }\n}\n\n/**\n * Result for a `GetSelectionAction`.\n */\nexport interface SelectionResult extends ResponseAction {\n    kind: typeof SelectionResult.KIND\n    selectedElementsIDs: string[]\n}\nexport namespace SelectionResult {\n    export const KIND = 'selectionResult';\n\n    export function create(selectedElementsIDs: string[], requestId: string): SelectionResult {\n        return {\n            kind: KIND,\n            selectedElementsIDs,\n            responseId: requestId\n        };\n    }\n}\n\n/**\n * Sent from the client to the model source to recalculate a diagram when elements\n * are collapsed/expanded by the client.\n */\nexport interface CollapseExpandAction {\n    kind: typeof CollapseExpandAction.KIND\n    expandIds: string[]\n    collapseIds: string[]\n}\nexport namespace CollapseExpandAction {\n    export const KIND = 'collapseExpand';\n\n    export function create(options: { expandIds?: string[], collapseIds?: string[] }): CollapseExpandAction {\n        return {\n            kind: KIND,\n            expandIds: options.expandIds ?? [],\n            collapseIds: options.collapseIds ?? []\n        };\n    }\n}\n\n/**\n * Programmatic action for expanding or collapsing all elements.\n * If `expand` is true, all elements are expanded, otherwise they are collapsed.\n */\nexport interface CollapseExpandAllAction {\n    kind: typeof CollapseExpandAllAction.KIND\n    expand: boolean\n}\nexport namespace CollapseExpandAllAction {\n    export const KIND = 'collapseExpandAll';\n\n    export function create(options: { expand?: boolean } = {}): CollapseExpandAllAction {\n        return {\n            kind: KIND,\n            expand: options.expand ?? true\n        };\n    }\n}\n\nexport interface OpenAction {\n    kind: typeof OpenAction.KIND\n    elementId: string\n}\nexport namespace OpenAction {\n    export const KIND = 'open';\n\n    export function create(elementId: string): OpenAction {\n        return {\n            kind: KIND,\n            elementId\n        };\n    }\n}\n\n/**\n * Request a layout of the diagram or the selected elements only.\n */\nexport interface LayoutAction {\n    kind: typeof LayoutAction.KIND\n    layoutType?: string\n    elementIds?: string[]\n}\nexport namespace LayoutAction {\n    export const KIND = 'layout';\n\n    export function create(options: { layoutType?: string, elementIds?: string[] } = {}): LayoutAction {\n        return {\n            kind: KIND,\n            layoutType: options.layoutType,\n            elementIds: options.elementIds\n        };\n    }\n}\n\n/**\n * Triggered when the user requests the viewer to center on the current model. The resulting\n * CenterCommand changes the scroll setting of the viewport accordingly.\n * It also resets the zoom to its default if retainZoom is false.\n * This action can also be sent from the model source to the client in order to perform such a\n * viewport change programmatically.\n */\nexport interface CenterAction extends Action {\n    kind: typeof CenterAction.KIND\n    elementIds: string[]\n    animate: boolean\n    retainZoom: boolean\n    zoomScale?: number\n}\nexport namespace CenterAction {\n    export const KIND = 'center';\n\n    export function create(elementIds: string[], options: { animate?: boolean, retainZoom?: boolean, zoomScale?: number } = {}): CenterAction {\n        return {\n            kind: KIND,\n            elementIds,\n            animate: options.animate ?? true,\n            retainZoom: options.retainZoom ?? false,\n            zoomScale: options.zoomScale\n        };\n    }\n}\n\n/**\n * Triggered when the user requests the viewer to fit its content to the available drawing area.\n * The resulting FitToScreenCommand changes the zoom and scroll settings of the viewport so the model\n * can be shown completely. This action can also be sent from the model source to the client in order\n * to perform such a viewport change programmatically.\n */\nexport interface FitToScreenAction extends Action {\n    kind: typeof FitToScreenAction.KIND;\n    elementIds: string[]\n    padding?: number\n    maxZoom?: number\n    animate: boolean\n}\nexport namespace FitToScreenAction {\n    export const KIND = 'fit';\n\n    export function create(elementIds: string[], options: { padding?: number, maxZoom?: number, animate?: boolean } = {}): FitToScreenAction {\n        return {\n            kind: KIND,\n            elementIds,\n            padding: options.padding,\n            maxZoom: options.maxZoom,\n            animate: options.animate ?? true\n        };\n    }\n}\n\n/**\n * Directly set the diagram viewport to the given scroll and zoom values.\n * The ID of the viewport element to manipulate must be given with the action\n * (usually it is the root element's ID).\n */\nexport interface SetViewportAction extends Action {\n    kind: typeof SetViewportAction.KIND;\n    elementId: string\n    newViewport: Viewport\n    animate: boolean\n}\nexport namespace SetViewportAction {\n    export const KIND = 'viewport';\n\n    export function create(elementId: string, newViewport: Viewport, options: { animate?: boolean } = {}): SetViewportAction {\n        return {\n            kind: KIND,\n            elementId,\n            newViewport,\n            animate: options.animate ?? true\n        };\n    }\n}\n\n/**\n * Request action for retrieving the current viewport and canvas bounds.\n */\nexport interface GetViewportAction extends RequestAction<ViewportResult> {\n    kind: typeof GetViewportAction.KIND;\n}\nexport namespace GetViewportAction {\n    export const KIND = 'getViewport';\n\n    export function create(): GetViewportAction {\n        return {\n            kind: KIND,\n            requestId: generateRequestId()\n        };\n    }\n}\n\n/**\n * Response to a `GetViewportAction`.\n */\nexport interface ViewportResult extends ResponseAction {\n    kind: typeof ViewportResult.KIND;\n    viewport: Viewport\n    canvasBounds: Bounds\n}\nexport namespace ViewportResult {\n    export const KIND = 'viewportResult';\n\n    export function create(viewport: Viewport, canvasBounds: Bounds, requestId: string): ViewportResult {\n        return {\n            kind: KIND,\n            viewport,\n            canvasBounds,\n            responseId: requestId\n        };\n    }\n}\n\n/**\n * Action to render the selected elements in front of others by manipulating the z-order.\n */\nexport interface BringToFrontAction extends Action {\n    kind: typeof BringToFrontAction.KIND;\n    elementIDs: string[]\n}\nexport namespace BringToFrontAction {\n    export const KIND = 'bringToFront';\n\n    export function create(elementIDs: string[]): BringToFrontAction {\n        return {\n            kind: KIND,\n            elementIDs\n        };\n    }\n}\n\n/**\n * Undo the previous operation on the stack of operations.\n */\nexport interface UndoAction extends Action {\n    kind: typeof UndoAction.KIND;\n}\nexport namespace UndoAction {\n    export const KIND = 'undo';\n\n    export function create(): UndoAction {\n        return {\n            kind: KIND\n        };\n    }\n}\n\n/**\n * Redo a previously undone operation.\n */\nexport interface RedoAction extends Action {\n    kind: typeof RedoAction.KIND;\n}\nexport namespace RedoAction {\n    export const KIND = 'redo';\n\n    export function create(): RedoAction {\n        return {\n            kind: KIND\n        };\n    }\n}\n\n/**\n * Move an arbitrary set of elements to new positions.\n */\nexport interface MoveAction extends Action {\n    kind: typeof MoveAction.KIND\n    moves: ElementMove[]\n    animate: boolean\n    finished: boolean\n}\nexport namespace MoveAction {\n    export const KIND = 'move';\n\n    export function create(moves: ElementMove[], options: { animate?: boolean, finished?: boolean } = {}): MoveAction {\n        return {\n            kind: KIND,\n            moves,\n            animate: options.animate ?? true,\n            finished: options.finished ?? false\n        };\n    }\n}\n\nexport interface ElementMove {\n    elementId: string\n    elementType?: string\n    fromPosition?: Point\n    toPosition: Point\n}\n\n/**\n * Triggered when the user puts the mouse pointer over an element.\n */\nexport interface HoverFeedbackAction extends Action {\n    kind: typeof HoverFeedbackAction.KIND\n    mouseoverElement: string\n    mouseIsOver: boolean\n}\nexport namespace HoverFeedbackAction {\n    export const KIND = 'hoverFeedback';\n\n    export function create(options: { mouseoverElement: string, mouseIsOver: boolean }): HoverFeedbackAction {\n        return {\n            kind: KIND,\n            mouseoverElement: options.mouseoverElement,\n            mouseIsOver: options.mouseIsOver\n        };\n    }\n}\n\n/**\n * Create an element with the given schema and add it to the diagram.\n */\nexport interface CreateElementAction extends Action {\n    kind: typeof CreateElementAction.KIND\n    containerId: string\n    elementSchema: SModelElement\n}\nexport namespace CreateElementAction {\n    export const KIND = 'createElement';\n\n    export function create(elementSchema: SModelElement, options: { containerId: string }): CreateElementAction {\n        return {\n            kind: KIND,\n            elementSchema,\n            containerId: options.containerId\n        };\n    }\n}\n\n/**\n * Delete a set of elements identified by their IDs.\n */\nexport interface DeleteElementAction extends Action {\n    kind: typeof DeleteElementAction.KIND\n    elementIds: string[]\n}\nexport namespace DeleteElementAction {\n    export const KIND = 'delete';\n\n    export function create(elementIds: string[]): DeleteElementAction {\n        return {\n            kind: KIND,\n            elementIds\n        };\n    }\n}\n\n/**\n * Apply a text change to a label element.\n */\nexport interface ApplyLabelEditAction extends Action {\n    kind: typeof ApplyLabelEditAction.KIND;\n    labelId: string,\n    text: string\n}\nexport namespace ApplyLabelEditAction {\n    export const KIND = 'applyLabelEdit';\n\n    export function create(labelId: string, text: string): ApplyLabelEditAction {\n        return {\n            kind: KIND,\n            labelId,\n            text\n        };\n    }\n}\n\n/**\n * Change the source or target node of a routable element (edge of a graph).\n */\nexport interface ReconnectAction extends Action {\n    kind: typeof ReconnectAction.KIND\n    routableId: string\n    newSourceId?: string\n    newTargetId?: string\n}\nexport namespace ReconnectAction {\n    export const KIND = 'reconnect';\n\n    export function create(options: { routableId: string, newSourceId?: string, newTargetId?: string }): ReconnectAction {\n        return {\n            kind: KIND,\n            routableId: options.routableId,\n            newSourceId: options.newSourceId,\n            newTargetId: options.newTargetId\n        };\n    }\n}\n", "/********************************************************************************\n * Copyright (c) 2017-2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */\nexport class Deferred<T> {\n    resolve: (value?: T | PromiseLike<T>) => void;\n    reject: (reason?: any) => void;\n    readonly promise: Promise<T>;\n    private _state: DeferredState = 'unresolved';\n\n\n    constructor() {\n        this.promise = new Promise<T>((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        this.promise.then(\n            res => this._state = 'resolved',\n            rej => this._state = 'rejected'\n        );\n    }\n\n    private set state(state: DeferredState) {\n        if (this._state === 'unresolved') {\n            this._state = state;\n        }\n    }\n\n    get state(): DeferredState {\n        return this._state;\n    }\n}\n\nexport type DeferredState = 'resolved' | 'rejected' | 'unresolved';\n", "/********************************************************************************\n * Copyright (c) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ServerActionHandlerRegistry } from './action-handler';\nimport {\n    Action, isResponseAction, ResponseAction, RequestModelAction, ComputedBoundsAction, LayoutAction, RequestBoundsAction,\n    RequestAction, generateRequestId, SetModelAction, UpdateModelAction, RejectAction, isRequestAction\n} from './actions';\nimport { DiagramServices, DiagramState, IDiagramGenerator, IModelLayoutEngine } from './diagram-services';\nimport { SModelRoot } from './model';\nimport { Deferred } from './utils/async';\nimport { applyBounds, cloneModel } from './utils/model-utils';\n\n/**\n * An instance of this class is responsible for handling a single diagram client. It holds the current\n * state of the diagram and manages communication with the client via actions.\n */\nexport class DiagramServer {\n\n    readonly state: DiagramState & {\n        lastSubmittedModelType?: string\n    } = {\n        currentRoot: {\n            type: 'NONE',\n            id: 'ROOT'\n        },\n        revision: 0\n    };\n    readonly dispatch: <A extends Action>(action: A) => Promise<void>;\n\n    protected readonly diagramGenerator: IDiagramGenerator;\n    protected readonly layoutEngine?: IModelLayoutEngine;\n    protected actionHandlerRegistry?: ServerActionHandlerRegistry;\n    protected readonly requests = new Map<string, Deferred<ResponseAction>>();\n\n    constructor(dispatch: <A extends Action>(action: A) => Promise<void>,\n                services: DiagramServices) {\n        this.dispatch = dispatch;\n        this.diagramGenerator = services.DiagramGenerator;\n        this.layoutEngine = services.ModelLayoutEngine;\n        this.actionHandlerRegistry = services.ServerActionHandlerRegistry;\n    }\n\n    /**\n     * Set the model and submit it to the client.\n     */\n    setModel(newRoot: SModelRoot): Promise<void> {\n        newRoot.revision = ++this.state.revision;\n        this.state.currentRoot = newRoot;\n        return this.submitModel(newRoot, false);\n    }\n\n    /**\n     * Update the model to a new state and submit it to the client.\n     */\n    updateModel(newRoot: SModelRoot): Promise<void> {\n        newRoot.revision = ++this.state.revision;\n        this.state.currentRoot = newRoot;\n        return this.submitModel(newRoot, true);\n    }\n\n    /**\n     * Whether the client needs to compute the layout of parts of the model. This affects the behavior\n     * of `submitModel`.\n     *\n     * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`\n     * from the client. If the client does not specify whether it needs client layout, the default value\n     * is `true`.\n     */\n    get needsClientLayout(): boolean {\n        if (this.state.options && this.state.options.needsClientLayout !== undefined) {\n            return !!this.state.options.needsClientLayout;\n        }\n        return true;\n    }\n\n    /**\n     * Whether the server needs to compute the layout of parts of the model. This affects the behavior\n     * of `submitModel`.\n     *\n     * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`\n     * from the client. If the client does not specify whether it needs server layout, the default value\n     * is `false`.\n     */\n    get needsServerLayout(): boolean {\n        if (this.state.options && this.state.options.needsServerLayout !== undefined) {\n            return !!this.state.options.needsServerLayout;\n        }\n        return false;\n    }\n\n    /**\n     * Called when an action is received from the client.\n     */\n    accept(action: Action): Promise<void> {\n        if (isResponseAction(action)) {\n            const id = action.responseId;\n            const future = this.requests.get(id);\n            if (future) {\n                this.requests.delete(id);\n                if (action.kind === RejectAction.KIND) {\n                    const rejectAction: RejectAction = action as any;\n                    future.reject(new Error(rejectAction.message));\n                    console.warn(`Request with id ${action.responseId} failed: ${rejectAction.message}`, rejectAction.detail);\n                } else {\n                    future.resolve(action);\n                }\n                return Promise.resolve();\n            }\n            console.info('No matching request for response:', action);\n        }\n        return this.handleAction(action);\n    }\n\n    /**\n     * Send a request action to the client. The resulting promise is resolved when a matching\n     * response is received and rejected when a `RejectAction` is received.\n     */\n    request<Res extends ResponseAction>(action: RequestAction<Res>): Promise<Res> {\n        if (!action.requestId) {\n            action.requestId = 'server_' + generateRequestId();\n        }\n        const future = new Deferred<Res>();\n        this.requests.set(action.requestId, future as any);\n        this.dispatch(action).catch(err => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.requests.delete(action.requestId!);\n            future.reject(err);\n        });\n        return future.promise;\n    }\n\n    /**\n     * Send a `RejectAction` to the client to notify that a request could not be fulfilled.\n     */\n    rejectRemoteRequest(action: Action | undefined, error: Error): void {\n        if (action && isRequestAction(action)) {\n            this.dispatch({\n                kind: RejectAction.KIND,\n                responseId: action.requestId,\n                message: error.message,\n                detail: error.stack\n            });\n        }\n    }\n\n    protected handleAction(action: Action): Promise<void> {\n        // Find a matching action handler in the registry\n        const handlers = this.actionHandlerRegistry?.getHandler(action.kind);\n        if (handlers && handlers.length === 1) {\n            return handlers[0](action, this.state, this);\n        } else if (handlers && handlers.length > 1) {\n            return Promise.all(handlers.map(h => h(action, this.state, this))) as Promise<any>;\n        }\n        // If no handler is registered, call one of the default handling methods\n        switch (action.kind) {\n            case RequestModelAction.KIND:\n                return this.handleRequestModel(action as RequestModelAction);\n            case ComputedBoundsAction.KIND:\n                return this.handleComputedBounds(action as ComputedBoundsAction);\n            case LayoutAction.KIND:\n                return this.handleLayout(action as LayoutAction);\n        }\n        // We don't know this action kind, sigh\n        console.warn(`Unhandled action from client: ${action.kind}`);\n        return Promise.resolve();\n    }\n\n    protected async handleRequestModel(action: RequestModelAction): Promise<void> {\n        this.state.options = action.options;\n        try {\n            const newRoot = await this.diagramGenerator.generate({\n                options: this.state.options ?? {},\n                state: this.state\n            });\n            newRoot.revision = ++this.state.revision;\n            this.state.currentRoot = newRoot;\n            await this.submitModel(this.state.currentRoot, false, action);\n        } catch (err) {\n            this.rejectRemoteRequest(action, err as Error);\n            console.error('Failed to generate diagram:', err);\n        }\n    }\n\n    /**\n     * Submit a model to the client after it has been updated in the server state.\n     */\n     protected async submitModel(newRoot: SModelRoot, update: boolean, cause?: Action): Promise<void> {\n        if (this.needsClientLayout) {\n            if (!this.needsServerLayout) {\n                // In this case the client won't send us the computed bounds\n                this.dispatch({ kind: RequestBoundsAction.KIND, newRoot });\n            } else {\n                const request = RequestBoundsAction.create(newRoot);\n                const response = await this.request<ComputedBoundsAction>(request);\n                const currentRoot = this.state.currentRoot;\n                if (response.revision === currentRoot.revision) {\n                    applyBounds(currentRoot, response);\n                    await this.doSubmitModel(currentRoot, update, cause);\n                } else {\n                    this.rejectRemoteRequest(cause, new Error(`Model revision does not match: ${response.revision}`));\n                }\n            }\n        } else {\n            await this.doSubmitModel(newRoot, update, cause);\n        }\n    }\n\n    private async doSubmitModel(newRoot: SModelRoot, update: boolean, cause?: Action): Promise<void> {\n        if (newRoot.revision !== this.state.revision) {\n            return;\n        }\n        if (this.needsServerLayout && this.layoutEngine) {\n            newRoot = await this.layoutEngine.layout(newRoot);\n        }\n        const modelType = newRoot.type;\n        if (cause && cause.kind === RequestModelAction.KIND) {\n            const requestId = (cause as RequestModelAction).requestId;\n            const response = SetModelAction.create(newRoot, requestId);\n            await this.dispatch(response);\n        } else if (update && modelType === this.state.lastSubmittedModelType) {\n            await this.dispatch({ kind: UpdateModelAction.KIND, newRoot, cause });\n        } else {\n            await this.dispatch({ kind: SetModelAction.KIND, newRoot });\n        }\n        this.state.lastSubmittedModelType = modelType;\n    }\n\n    protected handleComputedBounds(action: ComputedBoundsAction): Promise<void> {\n        if (action.revision !== this.state.currentRoot.revision) {\n            return Promise.reject();\n        }\n        applyBounds(this.state.currentRoot, action);\n        return Promise.resolve();\n    }\n\n    protected async handleLayout(action: LayoutAction): Promise<void> {\n        if (!this.layoutEngine) {\n            return;\n        }\n        if (!this.needsServerLayout) {\n            let newRoot = cloneModel(this.state.currentRoot);\n            newRoot = await this.layoutEngine.layout(newRoot);\n            newRoot.revision = ++this.state.revision;\n            this.state.currentRoot = newRoot;\n        }\n        await this.doSubmitModel(this.state.currentRoot, true, action);\n    }\n\n}\n", "/********************************************************************************\n * Copyright (c) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Bounds, Point, Dimension } from './utils/geometry';\nimport { hasOwnProperty } from './utils/object';\n\n/**\n * Base type for all elements of the diagram model.\n * Each model element must have a unique ID and a type that is used to look up its view.\n */\nexport interface SModelElement {\n    type: string\n    id: string\n    children?: SModelElement[]\n    cssClasses?: string[]\n}\n\n/**\n * Base type for the root element of the diagram model tree.\n */\nexport interface SModelRoot extends SModelElement {\n    canvasBounds?: Bounds\n    revision?: number\n}\n\n/**\n * Model elements that implement this interface have a position and a size.\n */\nexport interface BoundsAware {\n    position: Point\n    size: Dimension\n}\n\n/**\n * Used to adjust elements whose bounding box is not at the origin, e.g. labels\n * or pre-rendered SVG figures.\n */\nexport interface Alignable {\n    alignment: Point\n}\n\n/**\n * A viewport has a scroll position and a zoom factor. Usually these properties are\n * applied to the root element to enable navigating through the diagram.\n */\nexport interface Viewport extends Scrollable, Zoomable {\n}\n\n/**\n * Usually the root of a model is also a viewport.\n */\nexport interface ViewportRootElement extends SModelRoot {\n    scroll?: Point\n    zoom?: number\n    position?: Point\n    size?: Dimension\n}\n\n/**\n * A scrollable element has a scroll position, which indicates the top left corner of the\n * visible area.\n */\nexport interface Scrollable {\n    scroll: Point\n}\n\nexport function isScrollable(element: SModelElement | Scrollable): element is Scrollable {\n    return hasOwnProperty(element, 'scroll');\n}\n\n/**\n * A zoomable element can be scaled so it appears smaller or larger than its actual size.\n * The zoom value 1 is the default scale where the content is drawn with its actual size.\n */\nexport interface Zoomable {\n    zoom: number\n}\n\nexport function isZoomable(element: SModelElement | Zoomable): element is Zoomable {\n    return hasOwnProperty(element, 'zoom');\n}\n\n/**\n * Root element for graph-like models.\n */\nexport interface SGraph extends SModelRoot {\n    children: SModelElement[]\n    bounds?: Bounds\n    scroll?: Point\n    zoom?: number\n    layoutOptions?: ModelLayoutOptions\n}\n\n/**\n * Options to control the \"micro layout\" of a model element, i.e. the arrangement of its content\n * using simple algorithms such as horizontal or vertical box layout.\n */\nexport type ModelLayoutOptions = { [key: string]: string | number | boolean };\n\nexport interface SShapeElement extends SModelElement {\n    position?: Point\n    size?: Dimension\n    layoutOptions?: ModelLayoutOptions\n}\n\n/**\n * Model element class for nodes, which are the main entities in a graph. A node can be connected to\n * another node via an SEdge. Such a connection can be direct, i.e. the node is the source or target of\n * the edge, or indirect through a port, i.e. it contains an SPort which is the source or target of the edge.\n */\nexport interface SNode extends SShapeElement {\n    layout?: string\n    selected?: boolean\n    hoverFeedback?: boolean\n    opacity?: number\n    anchorKind?: string\n}\n\n/**\n * A port is a connection point for edges. It should always be contained in an SNode.\n */\nexport interface SPort extends SShapeElement {\n    selected?: boolean\n    hoverFeedback?: boolean\n    opacity?: number\n    anchorKind?: string\n}\n\n/**\n * Model element class for edges, which are the connectors in a graph. An edge has a source and a target,\n * each of which can be either a node or a port. The source and target elements are referenced via their ids.\n */\nexport interface SEdge extends SModelElement {\n    sourceId: string\n    targetId: string\n    routerKind?: string\n    routingPoints?: Point[]\n    selected?: boolean\n    hoverFeedback?: boolean\n    opacity?: number\n}\n\n/**\n * A label can be attached to a node, edge, or port, and contains some text to be rendered in its view.\n */\nexport interface SLabel extends SShapeElement {\n    text: string\n    selected?: boolean\n}\n\n/**\n * A compartment is used to group multiple child elements such as labels of a node. Usually a `vbox`\n * or `hbox` layout is used to arrange these children.\n */\nexport interface SCompartment extends SShapeElement {\n    layout?: string\n}\n\n/**\n * Root model element class for HTML content. Usually this is rendered with a `div` DOM element.\n */\nexport interface HtmlRoot extends SModelRoot {\n    classes?: string[]\n}\n\n/**\n * Pre-rendered elements contain HTML or SVG code to be transferred to the DOM. This can be useful to\n * render complex figures or to compute the view on the server instead of the client code.\n */\nexport interface PreRenderedElement extends SModelElement {\n    code: string\n}\n\n/**\n * Same as PreRenderedElement, but with a position and a size.\n */\nexport interface ShapedPreRenderedElement extends PreRenderedElement {\n    position?: Point\n    size?: Dimension\n}\n\n/**\n * A `foreignObject` element to be transferred to the DOM within the SVG.\n *\n * This can be useful to to benefit from e.g. HTML rendering features, such as line wrapping, inside of\n * the SVG diagram.  Note that `foreignObject` is not supported by all browsers and SVG viewers may not\n * support rendering the `foreignObject` content.\n *\n * If no dimensions are specified in the schema element, this element will obtain the dimension of\n * its parent to fill the entire available room. Thus, this element requires specified bounds itself\n * or bounds to be available for its parent.\n */\nexport interface ForeignObjectElement extends ShapedPreRenderedElement {\n    /** The namespace to be assigned to the elements inside of the `foreignObject`. */\n    namespace: string\n}\n", "/********************************************************************************\n * Copyright (c) 2017-2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { hasOwnProperty } from \"./object\";\n\n/**\n * A Point is composed of the (x,y) coordinates of an object.\n */\nexport interface Point {\n    readonly x: number\n    readonly y: number\n}\n\nexport namespace Point {\n    /**\n     * (x,y) coordinates of the origin.\n     */\n    export const ORIGIN: Point = Object.freeze({\n        x: 0,\n        y: 0\n    });\n\n    /**\n     * Adds two points.\n     * @param {Point} p1 - First point\n     * @param {Point} p2 - Second point\n     * @returns {Point} The sum of the two points\n     */\n    export function add(p1: Point, p2: Point): Point {\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y\n        };\n    }\n\n    /**\n     * Subtracts two points.\n     * @param {Point} p1 - First point\n     * @param {Point} p2 - Second point\n     * @returns {Point} The difference of the two points\n     */\n    export function subtract(p1: Point, p2: Point): Point {\n        return {\n            x: p1.x - p2.x,\n            y: p1.y - p2.y\n        };\n    }\n\n    /**\n     * Specifies whether a point has exactly the same coordinates as another point.\n     * @param {Point} point1 a point\n     * @param {Point} point2 another point\n     * @returns {boolean} `true` if `point1` has exactly the same `x` and `y` values as `point2`, `false` otherwise.\n     */\n    export function equals(point1: Point, point2: Point): boolean {\n        return point1.x === point2.x && point1.y === point2.y;\n    }\n\n    /**\n     * Computes a point that is the original `point` shifted towards `refPoint` by the given `distance`.\n     * @param {Point} point - Point to shift\n     * @param {Point} refPoint - Point to shift towards\n     * @param {Point} distance - Distance to shift\n     */\n    export function shiftTowards(point: Point, refPoint: Point, distance: number): Point {\n        const diff = subtract(refPoint, point);\n        const normalized = normalize(diff);\n        const shift = { x: normalized.x * distance, y: normalized.y * distance };\n        return add(point, shift);\n    }\n\n    /**\n     * Computes the normalized vector from the vector given in `point`; that is, computing its unit vector.\n     * @param {Point} point - Point representing the vector to be normalized\n     * @returns {Point} The normalized point\n     */\n    export function normalize(point: Point): Point {\n        const mag = magnitude(point);\n        if (mag === 0 || mag === 1) {\n            return ORIGIN;\n        }\n        return {\n            x: point.x / mag,\n            y: point.y / mag\n        };\n    }\n\n    /**\n     * Computes the magnitude of the vector given in `point`.\n     * @param {Point} point - Point representing the vector to compute the magnitude for\n     * @returns {number} The magnitude or also known as length of the `point`\n     */\n    export function magnitude(point: Point): number {\n        return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n    }\n\n    /**\n     * Calculates a linear combination of p0 and p1 using lambda, i.e.\n     *   (1-lambda) * p0 + lambda * p1\n     */\n    export function linear(p0: Point, p1: Point, lambda: number): Point {\n        return {\n            x: (1 - lambda) * p0.x + lambda * p1.x,\n            y: (1 - lambda) * p0.y + lambda * p1.y\n        };\n    }\n\n    /**\n     * Returns the \"straight line\" distance between two points.\n     * @param {Point} a - First point\n     * @param {Point} b - Second point\n     * @returns {number} The Eucledian distance\n     */\n    export function euclideanDistance(a: Point, b: Point): number {\n        const dx = b.x - a.x;\n        const dy = b.y - a.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     * Returns the distance between two points in a grid, using a\n     * strictly vertical and/or horizontal path (versus straight line).\n     * @param {Point} a - First point\n     * @param {Point} b - Second point\n     * @returns {number} The Manhattan distance\n     */\n    export function manhattanDistance(a: Point, b: Point): number {\n        return Math.abs(b.x - a.x) + Math.abs(b.y - a.y);\n    }\n\n    /**\n     * Returns the maximum of the horizontal and the vertical distance.\n     * @param {Point} a - First point\n     * @param {Point} b - Second point\n     * @returns {number} The maximum distance\n     */\n    export function maxDistance(a: Point, b: Point): number {\n        return Math.max(Math.abs(b.x - a.x), Math.abs(b.y - a.y));\n    }\n}\n\n/**\n * Computes the angle in radians of the given point to the x-axis of the coordinate system.\n * The result is in the range [-pi, pi].\n * @param {Point} p - A point in the Eucledian plane\n */\nexport function angleOfPoint(p: Point): number {\n    return Math.atan2(p.y, p.x);\n}\n\n/**\n * Computes the angle in radians between the two given points (relative to the origin of the coordinate system).\n * The result is in the range [0, pi]. Returns NaN if the points are equal.\n * @param {Point} a - First point\n * @param {Point} b - Second point\n */\nexport function angleBetweenPoints(a: Point, b: Point): number {\n    const lengthProduct = Math.sqrt((a.x * a.x + a.y * a.y) * (b.x * b.x + b.y * b.y));\n    if (isNaN(lengthProduct) || lengthProduct === 0)\n        return NaN;\n    const dotProduct = a.x * b.x + a.y * b.y;\n    return Math.acos(dotProduct / lengthProduct);\n}\n\n/**\n * Computes the center of the line segment spanned by the two given points.\n * @param {Point} s - Start point of the line\n * @param {Point} e - End point of the line\n */\nexport function centerOfLine(s: Point, e: Point): Point {\n    const b: Bounds = {\n        x: s.x > e.x ? e.x : s.x,\n        y: s.y > e.y ? e.y : s.y,\n        width: Math.abs(e.x - s.x),\n        height: Math.abs(e.y - s.y)\n    };\n    return Bounds.center(b);\n}\n\n/**\n * The Dimension of an object is composed of its width and height.\n */\nexport interface Dimension {\n    readonly width: number\n    readonly height: number\n}\n\nexport namespace Dimension {\n    /**\n     * A dimension with both width and height set to a negative value, which is considered as undefined.\n     */\n    export const EMPTY: Dimension = Object.freeze({\n        width: -1,\n        height: -1\n    });\n\n    /**\n     * Checks whether the given dimention is valid, i.e. the width and height are non-zero.\n     * @param {Dimension} b - Dimension object\n     * @returns {boolean} `true` if the dimension is valid\n     */\n    export function isValid(d: Dimension): boolean {\n        return d.width >= 0 && d.height >= 0;\n    }\n}\n\n/**\n * The bounds are the position (x, y) and dimension (width, height) of an object.\n */\nexport interface Bounds extends Point, Dimension {\n}\n\nexport function isBounds(element: unknown): element is Bounds {\n    return hasOwnProperty(element, ['x', 'y', 'width', 'height']);\n}\n\nexport namespace Bounds {\n    export const EMPTY: Bounds = Object.freeze({\n        x: 0,\n        y: 0,\n        width: -1,\n        height: -1\n    });\n\n    /**\n     * Combines the bounds of two objects into one, so that the new bounds\n     * are the minimum bounds that covers both of the original bounds.\n     * @param {Bounds} b0 - First bounds object\n     * @param {Bounds} b1 - Second bounds object\n     * @returns {Bounds} The combined bounds\n     */\n    export function combine(b0: Bounds, b1: Bounds): Bounds {\n        if (!Dimension.isValid(b0))\n            return Dimension.isValid(b1) ? b1 : EMPTY;\n        if (!Dimension.isValid(b1))\n            return b0;\n        const minX = Math.min(b0.x, b1.x);\n        const minY = Math.min(b0.y, b1.y);\n        const maxX = Math.max(b0.x + (b0.width >= 0 ? b0.width : 0), b1.x + (b1.width >= 0 ? b1.width : 0));\n        const maxY = Math.max(b0.y + (b0.height >= 0 ? b0.height : 0), b1.y + (b1.height >= 0 ? b1.height : 0));\n        return {\n            x: minX, y: minY, width: maxX - minX, height: maxY - minY\n        };\n    }\n\n    /**\n     * Translates the given bounds.\n     * @param {Bounds} b - Bounds object\n     * @param {Point} p - Vector by which to translate the bounds\n     * @returns {Bounds} The translated bounds\n     */\n    export function translate(b: Bounds, p: Point): Bounds {\n        return {\n            x: b.x + p.x,\n            y: b.y + p.y,\n            width: b.width,\n            height: b.height\n        };\n    }\n\n    /**\n     * Returns the center point of the bounds of an object\n     * @param {Bounds} b - Bounds object\n     * @returns {Point} the center point\n     */\n    export function center(b: Bounds): Point {\n        return {\n            x: b.x + (b.width >= 0 ? 0.5 * b.width : 0),\n            y: b.y + (b.height >= 0 ? 0.5 * b.height : 0)\n        };\n    }\n\n    /**\n    * Checks whether the point p is included in the bounds b.\n    */\n    export function includes(b: Bounds, p: Point): boolean {\n        return p.x >= b.x && p.x <= b.x + b.width && p.y >= b.y && p.y <= b.y + b.height;\n    }\n}\n\n/**\n * Converts from radians to degrees\n * @param {number} a - A value in radians\n * @returns {number} The converted value\n */\nexport function toDegrees(a: number): number {\n    return a * 180 / Math.PI;\n}\n\n/**\n * Converts from degrees to radians\n * @param {number} a - A value in degrees\n * @returns {number} The converted value\n */\nexport function toRadians(a: number): number {\n    return a * Math.PI / 180;\n}\n\n/**\n * Returns whether two numbers are almost equal, within a small margin (0.001)\n * @param {number} a - First number\n * @param {number} b - Second number\n * @returns {boolean} True if the two numbers are almost equal\n */\nexport function almostEquals(a: number, b: number): boolean {\n    return Math.abs(a - b) < 1e-3;\n}\n", "/********************************************************************************\n * Copyright (c) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './actions';\nexport * from './diagram-server';\nexport * from './diagram-services';\nexport * from './model';\nexport * from './utils/async';\nexport * from './utils/geometry';\nexport * from './utils/json';\nexport * from './utils/model-utils';\nexport * from './utils/object';\n"],
  "mappings": "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",
  "names": ["RejectAction", "RequestModelAction", "SetModelAction", "UpdateModelAction", "RequestPopupModelAction", "SetPopupModelAction", "SetBoundsAction", "RequestBoundsAction", "ComputedBoundsAction", "LoggingAction", "SelectAction", "SelectAllAction", "GetSelectionAction", "SelectionResult", "CollapseExpandAction", "CollapseExpandAllAction", "OpenAction", "LayoutAction", "CenterAction", "FitToScreenAction", "SetViewportAction", "GetViewportAction", "ViewportResult", "BringToFrontAction", "UndoAction", "RedoAction", "MoveAction", "HoverFeedbackAction", "CreateElementAction", "DeleteElementAction", "ApplyLabelEditAction", "ReconnectAction", "Point", "Dimension", "Bounds"]
}
