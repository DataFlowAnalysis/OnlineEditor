{
  "version": 3,
  "sources": ["../../sprotty-protocol/src/utils/model-utils.ts"],
  "sourcesContent": ["/********************************************************************************\n * Copyright (c) 2021 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Alignable, BoundsAware, SModelElement, SModelRoot } from '../model';\nimport { ComputedBoundsAction } from '../actions';\n\n/**\n * Clone a given model. This function requires that the model is serializable, so it's\n * free of cycles and functions.\n */\nexport function cloneModel<T extends SModelElement>(model: T): T {\n    return JSON.parse(JSON.stringify(model));\n}\n\n/**\n * Apply the computed bounds to the given model. This ensures that the model has complete\n * information about positions and sizes derived from its actual rendering in the frontend.\n */\nexport function applyBounds(root: SModelRoot, action: ComputedBoundsAction) {\n    const index = new SModelIndex();\n    index.add(root);\n    for (const b of action.bounds) {\n        const element = index.getById(b.elementId);\n        if (element) {\n            const bae = element as SModelElement & BoundsAware;\n            if (b.newPosition) {\n                bae.position = { x: b.newPosition.x, y: b.newPosition.y };\n            }\n            if (b.newSize) {\n                bae.size = { width: b.newSize.width, height: b.newSize.height };\n            }\n        }\n    }\n    if (action.alignments) {\n        for (const a of action.alignments) {\n            const element = index.getById(a.elementId);\n            if (element) {\n                const alignable = element as SModelElement & Alignable;\n                alignable.alignment = { x: a.newAlignment.x, y: a.newAlignment.y };\n            }\n        }\n    }\n}\n\n/**\n * Model element types can include a colon to separate the basic type and a sub-type. This function\n * extracts the basic type of a model element.\n */\nexport function getBasicType(element: { type: string }): string {\n    if (!element.type) {\n        return '';\n    }\n    const colonIndex = element.type.indexOf(':');\n    return colonIndex >= 0 ? element.type.substring(0, colonIndex) : element.type;\n}\n\n/**\n * Model element types can include a colon to separate the basic type and a sub-type. This function\n * extracts the sub-type of a model element.\n */\nexport function getSubType(schema: { type: string }): string {\n    if (!schema.type) {\n        return '';\n    }\n    const colonIndex = schema.type.indexOf(':');\n    return colonIndex >= 0 ? schema.type.substring(colonIndex + 1) : schema.type;\n}\n\n/**\n * Find the element with the given identifier. If you need to find multiple elements, using an\n * `SModelIndex` might be more effective.\n */\nexport function findElement(parent: SModelElement, elementId: string): SModelElement | undefined {\n    if (parent.id === elementId)\n        return parent;\n    if (parent.children !== undefined) {\n        for (const child of parent.children) {\n            const result = findElement(child, elementId);\n            if (result !== undefined)\n                return result;\n        }\n    }\n    return undefined;\n}\n\n/**\n * Used to speed up model element lookup by id.\n * This index implementation is for the serializable _external model_ defined in `sprotty-protocol`.\n */\nexport class SModelIndex {\n\n    private readonly id2element: Map<string, SModelElement> = new Map();\n    private id2parent: Map<string, SModelElement> = new Map();\n\n    add(element: SModelElement): void {\n        if (!element.id) {\n            throw new Error(\"Model element has no ID.\");\n        } else if (this.contains(element)) {\n            throw new Error(\"Duplicate ID in model: \" + element.id);\n        }\n        this.id2element.set(element.id, element);\n        if (Array.isArray(element.children)) {\n            for (const child of element.children) {\n                this.add(child as any);\n                this.id2parent.set(child.id, element);\n            }\n        }\n    }\n\n    remove(element: SModelElement): void {\n        this.id2element.delete(element.id);\n        if (Array.isArray(element.children)) {\n            for (const child of element.children) {\n                this.id2parent.delete(child.id);\n                this.remove(child as any);\n            }\n        }\n    }\n\n    contains(element: SModelElement): boolean {\n        return this.id2element.has(element.id);\n    }\n\n    getById(id: string): SModelElement | undefined {\n        return this.id2element.get(id);\n    }\n\n    getParent(id: string): SModelElement | undefined {\n        return this.id2parent.get(id);\n    }\n\n    getRoot(element: SModelElement): SModelRoot {\n        let current: SModelElement | undefined = element;\n        while (current) {\n            const parent = this.id2parent.get(current.id);\n            if (parent === undefined) {\n                return current;\n            }\n            current = parent;\n        }\n        throw new Error(\"Element has no root\");\n    }\n\n}\n"],
  "mappings": "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",
  "names": []
}
